// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock_tuplecodec is a generated GoMock package.
package mock_tuplecodec

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/matrixorigin/matrixone/pkg/container/types"
	orderedcodec "github.com/matrixorigin/matrixone/pkg/vm/engine/tpe/orderedcodec"
)

// MockTuple is a mock of Tuple interface.
type MockTuple struct {
	ctrl     *gomock.Controller
	recorder *MockTupleMockRecorder
}

// MockTupleMockRecorder is the mock recorder for MockTuple.
type MockTupleMockRecorder struct {
	mock *MockTuple
}

// NewMockTuple creates a new mock instance.
func NewMockTuple(ctrl *gomock.Controller) *MockTuple {
	mock := &MockTuple{ctrl: ctrl}
	mock.recorder = &MockTupleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTuple) EXPECT() *MockTupleMockRecorder {
	return m.recorder
}

// GetAttribute mocks base method.
func (m *MockTuple) GetAttribute(colIdx uint32) (types.Type, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttribute", colIdx)
	ret0, _ := ret[0].(types.Type)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAttribute indicates an expected call of GetAttribute.
func (mr *MockTupleMockRecorder) GetAttribute(colIdx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttribute", reflect.TypeOf((*MockTuple)(nil).GetAttribute), colIdx)
}

// GetAttributeCount mocks base method.
func (m *MockTuple) GetAttributeCount() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributeCount")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributeCount indicates an expected call of GetAttributeCount.
func (mr *MockTupleMockRecorder) GetAttributeCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeCount", reflect.TypeOf((*MockTuple)(nil).GetAttributeCount))
}

// GetInt mocks base method.
func (m *MockTuple) GetInt(colIdx uint32) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", colIdx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInt indicates an expected call of GetInt.
func (mr *MockTupleMockRecorder) GetInt(colIdx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockTuple)(nil).GetInt), colIdx)
}

// GetValue mocks base method.
func (m *MockTuple) GetValue(colIdx uint32) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", colIdx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockTupleMockRecorder) GetValue(colIdx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockTuple)(nil).GetValue), colIdx)
}

// IsNull mocks base method.
func (m *MockTuple) IsNull(colIdx uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNull", colIdx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsNull indicates an expected call of IsNull.
func (mr *MockTupleMockRecorder) IsNull(colIdx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNull", reflect.TypeOf((*MockTuple)(nil).IsNull), colIdx)
}

// MockValueSerializer is a mock of ValueSerializer interface.
type MockValueSerializer struct {
	ctrl     *gomock.Controller
	recorder *MockValueSerializerMockRecorder
}

// MockValueSerializerMockRecorder is the mock recorder for MockValueSerializer.
type MockValueSerializerMockRecorder struct {
	mock *MockValueSerializer
}

// NewMockValueSerializer creates a new mock instance.
func NewMockValueSerializer(ctrl *gomock.Controller) *MockValueSerializer {
	mock := &MockValueSerializer{ctrl: ctrl}
	mock.recorder = &MockValueSerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValueSerializer) EXPECT() *MockValueSerializerMockRecorder {
	return m.recorder
}

// DeserializeValue mocks base method.
func (m *MockValueSerializer) DeserializeValue(data []byte) ([]byte, *orderedcodec.DecodedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeserializeValue", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*orderedcodec.DecodedItem)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeserializeValue indicates an expected call of DeserializeValue.
func (mr *MockValueSerializerMockRecorder) DeserializeValue(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeserializeValue", reflect.TypeOf((*MockValueSerializer)(nil).DeserializeValue), data)
}

// SerializeValue mocks base method.
func (m *MockValueSerializer) SerializeValue(data []byte, value interface{}) ([]byte, *orderedcodec.EncodedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SerializeValue", data, value)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*orderedcodec.EncodedItem)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SerializeValue indicates an expected call of SerializeValue.
func (mr *MockValueSerializerMockRecorder) SerializeValue(data, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerializeValue", reflect.TypeOf((*MockValueSerializer)(nil).SerializeValue), data, value)
}
