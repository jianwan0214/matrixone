// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const SELECT = 57352
const STREAM = 57353
const INSERT = 57354
const UPDATE = 57355
const DELETE = 57356
const FROM = 57357
const WHERE = 57358
const GROUP = 57359
const HAVING = 57360
const ORDER = 57361
const BY = 57362
const LIMIT = 57363
const OFFSET = 57364
const FOR = 57365
const LOWER_THAN_SET = 57366
const SET = 57367
const ALL = 57368
const DISTINCT = 57369
const DISTINCTROW = 57370
const AS = 57371
const EXISTS = 57372
const ASC = 57373
const DESC = 57374
const INTO = 57375
const DUPLICATE = 57376
const DEFAULT = 57377
const LOCK = 57378
const KEYS = 57379
const VALUES = 57380
const NEXT = 57381
const VALUE = 57382
const SHARE = 57383
const MODE = 57384
const SQL_NO_CACHE = 57385
const SQL_CACHE = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const SUBQUERY_AS_EXPR = 57399
const LOWER_THAN_STRING = 57400
const ID = 57401
const AT_ID = 57402
const AT_AT_ID = 57403
const STRING = 57404
const VALUE_ARG = 57405
const LIST_ARG = 57406
const COMMENT = 57407
const COMMENT_KEYWORD = 57408
const INTEGRAL = 57409
const HEX = 57410
const BIT_LITERAL = 57411
const FLOAT = 57412
const HEXNUM = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const LOWER_THAN_CHARSET = 57417
const CHARSET = 57418
const UNIQUE = 57419
const KEY = 57420
const OR = 57421
const PIPE_CONCAT = 57422
const XOR = 57423
const AND = 57424
const NOT = 57425
const BETWEEN = 57426
const CASE = 57427
const WHEN = 57428
const THEN = 57429
const ELSE = 57430
const END = 57431
const LE = 57432
const GE = 57433
const NE = 57434
const NULL_SAFE_EQUAL = 57435
const IS = 57436
const LIKE = 57437
const REGEXP = 57438
const IN = 57439
const ASSIGNMENT = 57440
const SHIFT_LEFT = 57441
const SHIFT_RIGHT = 57442
const DIV = 57443
const MOD = 57444
const UNARY = 57445
const COLLATE = 57446
const BINARY = 57447
const UNDERSCORE_BINARY = 57448
const INTERVAL = 57449
const BEGIN = 57450
const START = 57451
const TRANSACTION = 57452
const COMMIT = 57453
const ROLLBACK = 57454
const WORK = 57455
const CONSISTENT = 57456
const SNAPSHOT = 57457
const CHAIN = 57458
const NO = 57459
const RELEASE = 57460
const PRIORITY = 57461
const QUICK = 57462
const BIT = 57463
const TINYINT = 57464
const SMALLINT = 57465
const MEDIUMINT = 57466
const INT = 57467
const INTEGER = 57468
const BIGINT = 57469
const INTNUM = 57470
const REAL = 57471
const DOUBLE = 57472
const FLOAT_TYPE = 57473
const DECIMAL = 57474
const NUMERIC = 57475
const DECIMAL_VALUE = 57476
const TIME = 57477
const TIMESTAMP = 57478
const DATETIME = 57479
const YEAR = 57480
const CHAR = 57481
const VARCHAR = 57482
const BOOL = 57483
const CHARACTER = 57484
const VARBINARY = 57485
const NCHAR = 57486
const TEXT = 57487
const TINYTEXT = 57488
const MEDIUMTEXT = 57489
const LONGTEXT = 57490
const BLOB = 57491
const TINYBLOB = 57492
const MEDIUMBLOB = 57493
const LONGBLOB = 57494
const JSON = 57495
const ENUM = 57496
const GEOMETRY = 57497
const POINT = 57498
const LINESTRING = 57499
const POLYGON = 57500
const GEOMETRYCOLLECTION = 57501
const MULTIPOINT = 57502
const MULTILINESTRING = 57503
const MULTIPOLYGON = 57504
const INT1 = 57505
const INT2 = 57506
const INT3 = 57507
const INT4 = 57508
const INT8 = 57509
const SQL_SMALL_RESULT = 57510
const SQL_BIG_RESULT = 57511
const SQL_BUFFER_RESULT = 57512
const LOW_PRIORITY = 57513
const HIGH_PRIORITY = 57514
const DELAYED = 57515
const CREATE = 57516
const ALTER = 57517
const DROP = 57518
const RENAME = 57519
const ANALYZE = 57520
const ADD = 57521
const SCHEMA = 57522
const TABLE = 57523
const INDEX = 57524
const VIEW = 57525
const TO = 57526
const IGNORE = 57527
const IF = 57528
const PRIMARY = 57529
const COLUMN = 57530
const CONSTRAINT = 57531
const SPATIAL = 57532
const FULLTEXT = 57533
const FOREIGN = 57534
const KEY_BLOCK_SIZE = 57535
const SHOW = 57536
const DESCRIBE = 57537
const EXPLAIN = 57538
const DATE = 57539
const ESCAPE = 57540
const REPAIR = 57541
const OPTIMIZE = 57542
const TRUNCATE = 57543
const MAXVALUE = 57544
const PARTITION = 57545
const REORGANIZE = 57546
const LESS = 57547
const THAN = 57548
const PROCEDURE = 57549
const TRIGGER = 57550
const STATUS = 57551
const VARIABLES = 57552
const ROLE = 57553
const PROXY = 57554
const AVG_ROW_LENGTH = 57555
const STORAGE = 57556
const DISK = 57557
const MEMORY = 57558
const CHECKSUM = 57559
const COMPRESSION = 57560
const DATA = 57561
const DIRECTORY = 57562
const DELAY_KEY_WRITE = 57563
const ENCRYPTION = 57564
const ENGINE = 57565
const MAX_ROWS = 57566
const MIN_ROWS = 57567
const PACK_KEYS = 57568
const ROW_FORMAT = 57569
const STATS_AUTO_RECALC = 57570
const STATS_PERSISTENT = 57571
const STATS_SAMPLE_PAGES = 57572
const DYNAMIC = 57573
const COMPRESSED = 57574
const REDUNDANT = 57575
const COMPACT = 57576
const FIXED = 57577
const COLUMN_FORMAT = 57578
const AUTO_RANDOM = 57579
const RESTRICT = 57580
const CASCADE = 57581
const ACTION = 57582
const PARTIAL = 57583
const SIMPLE = 57584
const CHECK = 57585
const ENFORCED = 57586
const RANGE = 57587
const LIST = 57588
const ALGORITHM = 57589
const LINEAR = 57590
const PARTITIONS = 57591
const SUBPARTITION = 57592
const SUBPARTITIONS = 57593
const TYPE = 57594
const ANY = 57595
const SOME = 57596
const EXTERNAL = 57597
const LOCALFILE = 57598
const URL = 57599
const S3OPTION = 57600
const PREPARE = 57601
const DEALLOCATE = 57602
const PROPERTIES = 57603
const PARSER = 57604
const VISIBLE = 57605
const INVISIBLE = 57606
const BTREE = 57607
const HASH = 57608
const RTREE = 57609
const BSI = 57610
const ZONEMAP = 57611
const LEADING = 57612
const BOTH = 57613
const TRAILING = 57614
const UNKNOWN = 57615
const EXPIRE = 57616
const ACCOUNT = 57617
const UNLOCK = 57618
const DAY = 57619
const NEVER = 57620
const SECOND = 57621
const ASCII = 57622
const COALESCE = 57623
const COLLATION = 57624
const HOUR = 57625
const MICROSECOND = 57626
const MINUTE = 57627
const MONTH = 57628
const QUARTER = 57629
const REPEAT = 57630
const REVERSE = 57631
const ROW_COUNT = 57632
const WEEK = 57633
const REVOKE = 57634
const FUNCTION = 57635
const PRIVILEGES = 57636
const TABLESPACE = 57637
const EXECUTE = 57638
const SUPER = 57639
const GRANT = 57640
const OPTION = 57641
const REFERENCES = 57642
const REPLICATION = 57643
const SLAVE = 57644
const CLIENT = 57645
const USAGE = 57646
const RELOAD = 57647
const FILE = 57648
const TEMPORARY = 57649
const ROUTINE = 57650
const EVENT = 57651
const SHUTDOWN = 57652
const NULLX = 57653
const AUTO_INCREMENT = 57654
const APPROXNUM = 57655
const SIGNED = 57656
const UNSIGNED = 57657
const ZEROFILL = 57658
const ADMIN_NAME = 57659
const RANDOM = 57660
const SUSPEND = 57661
const ATTRIBUTE = 57662
const HISTORY = 57663
const REUSE = 57664
const CURRENT = 57665
const OPTIONAL = 57666
const FAILED_LOGIN_ATTEMPTS = 57667
const PASSWORD_LOCK_TIME = 57668
const UNBOUNDED = 57669
const SECONDARY = 57670
const USER = 57671
const IDENTIFIED = 57672
const CIPHER = 57673
const ISSUER = 57674
const X509 = 57675
const SUBJECT = 57676
const SAN = 57677
const REQUIRE = 57678
const SSL = 57679
const NONE = 57680
const PASSWORD = 57681
const MAX_QUERIES_PER_HOUR = 57682
const MAX_UPDATES_PER_HOUR = 57683
const MAX_CONNECTIONS_PER_HOUR = 57684
const MAX_USER_CONNECTIONS = 57685
const FORMAT = 57686
const VERBOSE = 57687
const CONNECTION = 57688
const LOAD = 57689
const INFILE = 57690
const TERMINATED = 57691
const OPTIONALLY = 57692
const ENCLOSED = 57693
const ESCAPED = 57694
const STARTING = 57695
const LINES = 57696
const DATABASES = 57697
const TABLES = 57698
const EXTENDED = 57699
const FULL = 57700
const PROCESSLIST = 57701
const FIELDS = 57702
const COLUMNS = 57703
const OPEN = 57704
const ERRORS = 57705
const WARNINGS = 57706
const INDEXES = 57707
const SCHEMAS = 57708
const NAMES = 57709
const GLOBAL = 57710
const SESSION = 57711
const ISOLATION = 57712
const LEVEL = 57713
const READ = 57714
const WRITE = 57715
const ONLY = 57716
const REPEATABLE = 57717
const COMMITTED = 57718
const UNCOMMITTED = 57719
const SERIALIZABLE = 57720
const LOCAL = 57721
const CURRENT_TIMESTAMP = 57722
const DATABASE = 57723
const CURRENT_TIME = 57724
const LOCALTIME = 57725
const LOCALTIMESTAMP = 57726
const UTC_DATE = 57727
const UTC_TIME = 57728
const UTC_TIMESTAMP = 57729
const REPLACE = 57730
const CONVERT = 57731
const SEPARATOR = 57732
const CURRENT_DATE = 57733
const CURRENT_USER = 57734
const CURRENT_ROLE = 57735
const SECOND_MICROSECOND = 57736
const MINUTE_MICROSECOND = 57737
const MINUTE_SECOND = 57738
const HOUR_MICROSECOND = 57739
const HOUR_SECOND = 57740
const HOUR_MINUTE = 57741
const DAY_MICROSECOND = 57742
const DAY_SECOND = 57743
const DAY_MINUTE = 57744
const DAY_HOUR = 57745
const YEAR_MONTH = 57746
const SQL_TSI_HOUR = 57747
const SQL_TSI_DAY = 57748
const SQL_TSI_WEEK = 57749
const SQL_TSI_MONTH = 57750
const SQL_TSI_QUARTER = 57751
const SQL_TSI_YEAR = 57752
const SQL_TSI_SECOND = 57753
const SQL_TSI_MINUTE = 57754
const RECURSIVE = 57755
const CONFIG = 57756
const MATCH = 57757
const AGAINST = 57758
const BOOLEAN = 57759
const LANGUAGE = 57760
const WITH = 57761
const QUERY = 57762
const EXPANSION = 57763
const ADDDATE = 57764
const BIT_AND = 57765
const BIT_OR = 57766
const BIT_XOR = 57767
const CAST = 57768
const COUNT = 57769
const APPROX_COUNT_DISTINCT = 57770
const APPROX_PERCENTILE = 57771
const CURDATE = 57772
const CURTIME = 57773
const DATE_ADD = 57774
const DATE_SUB = 57775
const EXTRACT = 57776
const GROUP_CONCAT = 57777
const MAX = 57778
const MID = 57779
const MIN = 57780
const NOW = 57781
const POSITION = 57782
const SESSION_USER = 57783
const STD = 57784
const STDDEV = 57785
const STDDEV_POP = 57786
const STDDEV_SAMP = 57787
const SUBDATE = 57788
const SUBSTR = 57789
const SUBSTRING = 57790
const SUM = 57791
const SYSDATE = 57792
const SYSTEM_USER = 57793
const TRANSLATE = 57794
const TRIM = 57795
const VARIANCE = 57796
const VAR_POP = 57797
const VAR_SAMP = 57798
const AVG = 57799
const JSON_EXTRACT = 57800
const ROW = 57801
const OUTFILE = 57802
const HEADER = 57803
const MAX_FILE_SIZE = 57804
const FORCE_QUOTE = 57805
const UNUSED = 57806

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"S3OPTION",
	"PREPARE",
	"DEALLOCATE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"JSON_EXTRACT",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
	"'{'",
	"'}'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:7176

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 63,
	21, 427,
	-2, 408,
	-1, 68,
	199, 578,
	-2, 624,
	-1, 84,
	226, 288,
	227, 288,
	-2, 309,
	-1, 364,
	21, 428,
	-2, 391,
	-1, 439,
	94, 1305,
	105, 1305,
	124, 1305,
	-2, 1116,
	-1, 468,
	21, 428,
	-2, 391,
	-1, 626,
	58, 1456,
	-2, 1463,
	-1, 634,
	58, 1457,
	-2, 1471,
	-1, 636,
	58, 1453,
	-2, 1473,
	-1, 637,
	58, 1454,
	-2, 1474,
	-1, 642,
	58, 1455,
	-2, 1480,
	-1, 643,
	58, 1458,
	-2, 1481,
	-1, 644,
	58, 1459,
	-2, 1482,
	-1, 645,
	58, 879,
	-2, 1483,
	-1, 646,
	58, 880,
	-2, 1484,
	-1, 647,
	58, 881,
	-2, 1485,
	-1, 649,
	58, 1460,
	-2, 1487,
	-1, 650,
	58, 899,
	-2, 1488,
	-1, 651,
	58, 898,
	-2, 1489,
	-1, 654,
	58, 1461,
	-2, 1492,
	-1, 655,
	58, 1462,
	-2, 1493,
	-1, 661,
	58, 961,
	-2, 1305,
	-1, 662,
	58, 970,
	-2, 1330,
	-1, 663,
	58, 974,
	-2, 1369,
	-1, 664,
	58, 985,
	-2, 1429,
	-1, 665,
	58, 987,
	-2, 1439,
	-1, 666,
	58, 975,
	-2, 1444,
	-1, 667,
	58, 983,
	-2, 1448,
	-1, 668,
	58, 964,
	-2, 1449,
	-1, 826,
	1, 604,
	60, 604,
	482, 604,
	-2, 611,
	-1, 964,
	21, 427,
	-2, 807,
	-1, 1011,
	124, 1126,
	-2, 1124,
	-1, 1013,
	124, 526,
	-2, 1121,
	-1, 1014,
	124, 527,
	-2, 1122,
	-1, 1221,
	1, 605,
	60, 605,
	482, 605,
	-2, 611,
	-1, 1310,
	58, 1028,
	-2, 1446,
	-1, 1311,
	58, 1029,
	-2, 1447,
	-1, 1474,
	56, 348,
	59, 348,
	-2, 713,
	-1, 1826,
	79, 611,
	120, 611,
	156, 611,
	159, 611,
	-2, 661,
	-1, 1828,
	260, 774,
	-2, 755,
	-1, 1851,
	56, 348,
	59, 348,
	-2, 714,
	-1, 1945,
	79, 611,
	120, 611,
	156, 611,
	159, 611,
	-2, 662,
	-1, 1973,
	260, 774,
	-2, 756,
	-1, 2345,
	59, 636,
	60, 636,
	-2, 611,
	-1, 2349,
	59, 636,
	60, 636,
	-2, 611,
	-1, 2361,
	59, 640,
	60, 640,
	-2, 611,
	-1, 2364,
	59, 641,
	60, 641,
	-2, 611,
}

const yyPrivate = 57344

const yyLast = 21502

var yyAct = [...]int{
	810, 1313, 2351, 2349, 2348, 2356, 2327, 669, 801, 2006,
	2215, 1270, 2320, 2272, 2192, 1985, 2273, 2173, 1441, 1443,
	671, 2127, 2196, 2004, 1207, 895, 595, 1927, 101, 690,
	2034, 104, 365, 317, 323, 604, 323, 2005, 2180, 797,
	364, 702, 63, 1266, 321, 22, 1993, 860, 1844, 1636,
	1458, 1974, 327, 2022, 831, 1880, 1477, 804, 1992, 1670,
	1820, 1632, 880, 1873, 1621, 546, 535, 1891, 1895, 1498,
	1487, 393, 309, 625, 63, 100, 437, 1637, 1883, 1265,
	833, 1832, 1641, 854, 1614, 1710, 1700, 819, 993, 1188,
	1561, 1689, 438, 1718, 1651, 1489, 1228, 463, 548, 333,
	101, 1647, 1630, 1008, 1011, 1003, 1397, 994, 1383, 1301,
	1002, 1524, 873, 857, 62, 1497, 1455, 1252, 855, 670,
	445, 30, 3, 680, 1949, 440, 1222, 320, 15, 1227,
	840, 318, 6, 442, 812, 444, 820, 319, 5, 63,
	795, 1185, 22, 1312, 672, 618, 877, 465, 1327, 800,
	1213, 897, 841, 30, 310, 842, 787, 478, 1268, 313,
	900, 395, 429, 931, 816, 794, 587, 1292, 517, 392,
	571, 335, 1933, 1315, 12, 336, 2253, 1816, 7, 4,
	1445, 97, 2044, 1938, 1819, 1192, 1314, 807, 1199, 996,
	96, 605, 322, 617, 2242, 2001, 92, 95, 96, 2232,
	27, 86, 69, 96, 1437, 27, 86, 69, 443, 497,
	573, 1217, 1189, 533, 450, 449, 516, 400, 30, 565,
	462, 862, 863, 1447, 96, 15, 390, 308, 325, 6,
	96, 96, 411, 414, 2260, 5, 844, 96, 93, 27,
	86, 69, 803, 2258, 448, 752, 93, 430, 1457, 559,
	560, 93, 1587, 772, 330, 514, 510, 574, 749, 1808,
	788, 557, 792, 2038, 556, 559, 560, 2276, 2277, 1624,
	1612, 1625, 93, 1626, 406, 2047, 382, 1811, 751, 93,
	1615, 1616, 1617, 1618, 806, 93, 791, 1821, 1425, 472,
	481, 1456, 452, 2195, 1803, 1840, 783, 1680, 1195, 874,
	1862, 579, 1214, 2014, 2019, 1682, 415, 501, 446, 1990,
	580, 471, 1879, 1878, 1605, 505, 512, 513, 332, 511,
	470, 2113, 2105, 1671, 2011, 323, 1607, 101, 1434, 500,
	870, 2262, 2286, 1676, 324, 2241, 1201, 361, 2099, 2342,
	362, 467, 469, 506, 1677, 1678, 2357, 2291, 2257, 442,
	468, 408, 2213, 2214, 407, 2217, 63, 63, 444, 1679,
	416, 2217, 447, 2298, 2194, 366, 361, 1642, 1645, 362,
	2239, 1491, 790, 2062, 488, 805, 2093, 2337, 2061, 68,
	363, 94, 2223, 1496, 2275, 1460, 405, 2181, 2182, 2183,
	2185, 2184, 393, 384, 409, 1529, 1305, 1306, 583, 84,
	2264, 2265, 508, 381, 380, 2244, 2245, 490, 522, 1463,
	1464, 1465, 1466, 2358, 451, 536, 481, 555, 554, 566,
	558, 1674, 2352, 2328, 375, 2050, 464, 503, 509, 331,
	492, 443, 438, 438, 438, 30, 30, 599, 599, 504,
	507, 537, 538, 1562, 540, 534, 1806, 572, 1430, 1279,
	1193, 814, 539, 323, 621, 621, 483, 482, 441, 2323,
	789, 502, 1440, 541, 601, 326, 543, 754, 378, 1304,
	1305, 1306, 1875, 1874, 474, 475, 597, 597, 1517, 2158,
	1302, 1275, 421, 607, 577, 770, 1646, 309, 373, 1277,
	1276, 1639, 497, 865, 550, 1640, 1643, 599, 866, 599,
	471, 562, 563, 755, 489, 63, 1274, 2084, 750, 802,
	864, 2088, 387, 388, 389, 575, 576, 486, 63, 418,
	379, 1861, 419, 2252, 2131, 582, 1854, 63, 1660, 1627,
	779, 423, 422, 2263, 1645, 1526, 1478, 1432, 599, 2193,
	1431, 826, 374, 1424, 1419, 393, 1243, 1644, 832, 551,
	1205, 822, 101, 559, 560, 476, 1180, 519, 455, 460,
	461, 2243, 559, 560, 521, 912, 849, 402, 2324, 404,
	414, 599, 101, 758, 401, 399, 398, 410, 403, 1683,
	412, 413, 483, 482, 847, 438, 1190, 599, 1190, 1190,
	875, 1672, 2106, 1675, 383, 603, 1608, 30, 1932, 837,
	815, 593, 594, 1815, 889, 1191, 30, 1200, 827, 2015,
	1528, 2002, 599, 778, 894, 101, 70, 775, 545, 561,
	1438, 909, 564, 774, 70, 784, 394, 898, 1490, 70,
	581, 836, 781, 850, 496, 799, 761, 756, 821, 606,
	620, 620, 308, 845, 846, 616, 796, 899, 747, 491,
	70, 484, 1646, 838, 839, 466, 70, 70, 852, 869,
	777, 757, 896, 70, 776, 773, 888, 793, 949, 835,
	569, 570, 1664, 798, 441, 1604, 966, 1494, 1495, 590,
	591, 592, 1602, 871, 1303, 406, 406, 1187, 808, 2321,
	2322, 1493, 2159, 2161, 2162, 2163, 2160, 552, 765, 766,
	549, 610, 611, 612, 613, 614, 615, 809, 2089, 2090,
	813, 843, 893, 828, 829, 2318, 964, 457, 458, 459,
	2086, 1317, 1316, 876, 2085, 1603, 2056, 1469, 952, 953,
	954, 955, 956, 949, 851, 1390, 1459, 1186, 2227, 853,
	886, 887, 586, 2205, 588, 2132, 1817, 872, 1687, 1388,
	1389, 1387, 1000, 1000, 1005, 589, 1619, 883, 884, 885,
	1421, 796, 408, 408, 1281, 407, 407, 473, 1778, 1398,
	1013, 1567, 385, 890, 881, 891, 420, 892, 1398, 905,
	881, 881, 1453, 832, 769, 818, 553, 599, 2095, 443,
	1014, 2079, 768, 444, 2094, 967, 968, 969, 970, 906,
	907, 908, 905, 1836, 63, 971, 1831, 1322, 1780, 913,
	908, 905, 2347, 585, 1783, 101, 101, 939, 957, 958,
	950, 951, 952, 953, 954, 955, 956, 949, 101, 1229,
	906, 907, 908, 905, 989, 2169, 2336, 1182, 2333, 1757,
	1754, 1755, 1756, 2308, 317, 1788, 1470, 1787, 1786, 1784,
	1325, 1245, 1570, 898, 2292, 1569, 2167, 999, 2203, 417,
	1326, 965, 1210, 1212, 2202, 2175, 443, 424, 2153, 973,
	2168, 2165, 983, 899, 1184, 1225, 2335, 2155, 906, 907,
	908, 905, 2152, 30, 1208, 1209, 2151, 2148, 975, 599,
	2012, 2166, 1271, 950, 951, 952, 953, 954, 955, 956,
	949, 2142, 621, 1273, 101, 1859, 2164, 1785, 992, 2139,
	1767, 1297, 2154, 1299, 2138, 2045, 2027, 1012, 1234, 1235,
	1236, 1179, 1178, 1648, 1006, 2013, 1007, 2026, 1286, 2025,
	2021, 1323, 1324, 2020, 1924, 906, 907, 908, 905, 1237,
	1860, 1858, 1183, 916, 917, 918, 919, 920, 921, 922,
	914, 1223, 1681, 1599, 759, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1278, 2285, 361,
	1392, 1393, 362, 1239, 2268, 1241, 1272, 906, 907, 908,
	905, 1289, 2174, 1977, 1774, 2221, 1407, 1291, 2220, 1307,
	823, 824, 825, 1238, 2248, 1409, 1928, 2208, 1240, 989,
	843, 2201, 1246, 1242, 2156, 948, 947, 957, 958, 950,
	951, 952, 953, 954, 955, 956, 949, 1980, 2149, 2145,
	2144, 1233, 2143, 1975, 1789, 1790, 2107, 2081, 1988, 1989,
	1282, 1283, 1284, 960, 1976, 963, 947, 957, 958, 950,
	951, 952, 953, 954, 955, 956, 949, 1290, 2046, 961,
	962, 959, 2269, 948, 947, 957, 958, 950, 951, 952,
	953, 954, 955, 956, 949, 2042, 2039, 2023, 1981, 1941,
	881, 881, 881, 1413, 906, 907, 908, 905, 1939, 1936,
	1622, 1391, 2199, 1385, 1857, 1856, 1917, 2334, 620, 1572,
	1847, 1838, 1293, 1294, 1295, 1296, 1814, 1796, 1650, 1318,
	1319, 1609, 1321, 1520, 906, 907, 908, 905, 1357, 1358,
	1359, 1360, 1361, 1444, 1320, 1367, 1368, 1369, 1370, 2315,
	1401, 1403, 1404, 1916, 1400, 1204, 1412, 1362, 718, 717,
	1408, 1202, 1410, 948, 947, 957, 958, 950, 951, 952,
	953, 954, 955, 956, 949, 906, 907, 908, 905, 985,
	946, 945, 1987, 760, 1638, 1549, 906, 907, 908, 905,
	2361, 1399, 1203, 1402, 1411, 948, 947, 957, 958, 950,
	951, 952, 953, 954, 955, 956, 949, 2340, 1652, 1983,
	1576, 1426, 1536, 1532, 1575, 906, 907, 908, 905, 2125,
	599, 834, 599, 817, 599, 1532, 2366, 2247, 471, 2228,
	1548, 1982, 1984, 2360, 2359, 2120, 1450, 1439, 1197, 2343,
	1969, 906, 907, 908, 905, 2339, 2338, 2116, 599, 1197,
	2331, 2115, 906, 907, 908, 905, 1920, 1474, 1197, 2330,
	1918, 1435, 1915, 1480, 1262, 906, 907, 908, 905, 1224,
	2109, 2283, 2109, 2278, 1485, 2104, 1288, 2266, 2255, 2254,
	471, 101, 101, 101, 101, 2109, 2237, 2109, 2236, 1499,
	2028, 1907, 471, 101, 1514, 1990, 1872, 906, 907, 908,
	905, 1499, 63, 1951, 1472, 22, 1452, 1978, 1848, 1903,
	599, 1436, 906, 907, 908, 905, 2109, 2235, 101, 101,
	1902, 2109, 2234, 368, 369, 370, 371, 1901, 1826, 1271,
	1468, 906, 907, 908, 905, 1798, 367, 2226, 2225, 1795,
	1699, 1515, 906, 907, 908, 905, 2130, 2129, 1481, 906,
	907, 908, 905, 1537, 1665, 1429, 1427, 2124, 2123, 1579,
	1433, 906, 907, 908, 905, 1522, 1523, 1577, 1482, 796,
	1483, 1451, 2122, 2121, 2118, 2119, 1223, 609, 1467, 2118,
	2117, 30, 1659, 1479, 1461, 1476, 1473, 1777, 15, 1232,
	2114, 1771, 6, 1486, 2109, 2108, 1574, 1518, 5, 1500,
	1501, 1502, 1503, 1484, 1532, 1772, 1513, 1512, 1511, 906,
	907, 908, 905, 906, 907, 908, 905, 1573, 1556, 1571,
	1448, 1449, 834, 813, 1521, 1532, 1758, 1559, 1560, 1532,
	1540, 1532, 1539, 1955, 1232, 1428, 1423, 1422, 1417, 1416,
	1232, 1231, 1527, 1541, 1959, 1197, 1196, 1538, 1000, 1531,
	1591, 1000, 763, 762, 1594, 1516, 96, 1475, 964, 86,
	69, 1406, 1530, 1405, 1948, 1686, 1597, 608, 1950, 1952,
	1954, 101, 1956, 1957, 1958, 1960, 1961, 1962, 1964, 1965,
	1966, 1967, 1261, 785, 2204, 471, 1598, 495, 63, 1248,
	903, 1588, 1532, 101, 1635, 786, 494, 1770, 1217, 1216,
	495, 1476, 471, 1414, 93, 1769, 101, 1229, 1586, 1663,
	1827, 1635, 1970, 1217, 1593, 1799, 1262, 1581, 1610, 906,
	907, 908, 905, 1217, 1262, 497, 1557, 906, 907, 908,
	905, 443, 1533, 1566, 901, 1534, 1535, 1590, 1558, 497,
	1653, 1385, 1768, 1420, 1395, 1288, 1968, 1764, 1189, 1654,
	1655, 1656, 1583, 1589, 1206, 1582, 1606, 1703, 1595, 1596,
	1601, 1592, 1181, 1947, 906, 907, 908, 905, 544, 906,
	907, 908, 905, 584, 1543, 1544, 1545, 1546, 1547, 2362,
	1551, 2317, 96, 2311, 1552, 1553, 1554, 1555, 2299, 1661,
	1963, 2296, 2294, 1666, 1667, 2190, 2178, 1953, 2176, 2171,
	1658, 599, 2133, 1662, 1657, 1882, 2102, 599, 1685, 2101,
	1698, 2100, 1564, 1668, 1673, 1568, 1794, 2098, 1669, 1763,
	2097, 1684, 2092, 1697, 1694, 1762, 2077, 1791, 1580, 1761,
	93, 599, 881, 1793, 547, 1923, 1892, 1219, 881, 1760,
	597, 906, 907, 908, 905, 1884, 597, 906, 907, 908,
	905, 906, 907, 908, 905, 1896, 1899, 1889, 1703, 1804,
	101, 906, 907, 908, 905, 1888, 1868, 1776, 1842, 1830,
	487, 1837, 1708, 1386, 93, 1471, 1454, 1415, 1280, 1773,
	1230, 991, 990, 988, 987, 599, 599, 986, 984, 932,
	101, 1851, 981, 1782, 906, 907, 908, 905, 980, 1797,
	63, 978, 977, 1824, 976, 974, 1800, 1825, 1707, 944,
	943, 1843, 1775, 942, 941, 940, 938, 471, 1801, 937,
	1271, 1802, 936, 935, 597, 1845, 1499, 934, 1809, 933,
	906, 907, 908, 905, 1871, 930, 929, 928, 1834, 927,
	926, 925, 924, 1696, 1829, 2313, 923, 782, 1864, 1705,
	1853, 1828, 1841, 1833, 1835, 1833, 442, 753, 499, 1759,
	1690, 1691, 2304, 1919, 2302, 2274, 1765, 1766, 1849, 1693,
	1462, 1287, 1852, 1850, 498, 1695, 2346, 1508, 1506, 1855,
	1866, 1505, 1509, 1507, 1779, 1510, 1865, 1258, 1259, 1792,
	1578, 948, 947, 957, 958, 950, 951, 952, 953, 954,
	955, 956, 949, 1706, 1504, 1418, 1876, 1886, 1887, 948,
	947, 957, 958, 950, 951, 952, 953, 954, 955, 956,
	949, 1890, 1224, 1198, 1894, 906, 907, 908, 905, 1885,
	1208, 1209, 1629, 518, 1215, 1893, 493, 948, 947, 957,
	958, 950, 951, 952, 953, 954, 955, 956, 949, 50,
	2048, 29, 1628, 1264, 1897, 28, 1900, 830, 471, 1946,
	1317, 1316, 1994, 1996, 1934, 1994, 1994, 1635, 2031, 1908,
	1930, 1931, 1910, 471, 1912, 530, 531, 568, 1905, 567,
	305, 1942, 306, 1913, 1914, 1911, 307, 528, 529, 1177,
	1394, 2312, 1921, 1909, 526, 527, 524, 525, 1925, 832,
	520, 2136, 2134, 1940, 881, 1929, 1926, 1867, 1991, 1995,
	1869, 1935, 906, 907, 908, 905, 1823, 1822, 1870, 1971,
	1563, 1943, 1813, 1997, 1998, 1812, 368, 369, 370, 371,
	2016, 2003, 1810, 1999, 1702, 523, 2008, 1701, 1853, 367,
	367, 948, 947, 957, 958, 950, 951, 952, 953, 954,
	955, 956, 949, 2017, 2037, 1525, 834, 2306, 2305, 2305,
	2009, 2010, 1600, 1254, 1257, 1258, 1259, 1255, 1249, 1256,
	1260, 1542, 485, 2024, 2306, 867, 1263, 396, 2052, 35,
	1, 2041, 1247, 2036, 1904, 1194, 1839, 2040, 1254, 1257,
	1258, 1259, 1255, 1649, 1256, 1260, 542, 1906, 948, 947,
	957, 958, 950, 951, 952, 953, 954, 955, 956, 949,
	386, 1363, 599, 532, 767, 2080, 881, 454, 480, 764,
	479, 101, 477, 1396, 1328, 703, 995, 1001, 2053, 2054,
	1996, 2057, 2058, 2059, 2060, 2172, 2030, 2063, 2064, 2065,
	2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075,
	2076, 1845, 2126, 1991, 2000, 2078, 2055, 1922, 2033, 780,
	2082, 689, 1805, 1623, 1611, 1807, 1613, 1446, 2096, 1442,
	515, 1584, 2112, 1585, 715, 706, 2103, 979, 708, 748,
	442, 456, 2128, 705, 2137, 1863, 1492, 372, 453, 397,
	2018, 1818, 2110, 1877, 1898, 1881, 2355, 2345, 2326, 2310,
	2216, 2341, 2256, 2297, 2290, 2212, 2170, 2049, 337, 868,
	578, 427, 2191, 338, 2240, 2177, 376, 1218, 377, 1221,
	63, 1220, 1308, 2135, 915, 1384, 982, 1271, 471, 972,
	623, 471, 471, 471, 2029, 1565, 2140, 2141, 679, 2150,
	471, 673, 2146, 2147, 1488, 1986, 1519, 848, 34, 33,
	32, 2179, 904, 1009, 2187, 2188, 2189, 704, 103, 1244,
	1010, 2037, 2207, 1620, 2210, 2198, 2209, 2043, 2186, 2035,
	688, 599, 599, 687, 686, 685, 684, 2197, 2200, 1253,
	1251, 1250, 859, 858, 902, 2271, 2270, 2230, 2231, 1937,
	2036, 2206, 2211, 2091, 2157, 2087, 2083, 2218, 2219, 2222,
	1945, 1944, 101, 1972, 1973, 1979, 1717, 1713, 1715, 471,
	597, 597, 1716, 1714, 1781, 1709, 1633, 1634, 1631, 1692,
	1688, 471, 997, 1004, 2111, 811, 98, 2224, 856, 11,
	10, 771, 2233, 9, 14, 21, 20, 19, 58, 57,
	56, 55, 18, 8, 2238, 54, 53, 52, 17, 896,
	16, 47, 48, 45, 2246, 2128, 2249, 44, 43, 42,
	41, 40, 39, 2259, 2261, 46, 38, 37, 36, 67,
	66, 65, 64, 23, 2267, 24, 25, 26, 76, 75,
	77, 72, 74, 2287, 73, 71, 2289, 2279, 2280, 2281,
	2282, 31, 13, 2, 0, 0, 2293, 0, 2295, 0,
	0, 0, 2288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2300, 0, 0, 2303, 0, 2301,
	0, 0, 2284, 0, 0, 471, 0, 471, 2309, 2307,
	0, 0, 0, 2314, 802, 2316, 802, 2319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 471, 2325,
	0, 0, 0, 2329, 0, 0, 2332, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2344, 0, 0, 0,
	0, 0, 2354, 0, 2353, 0, 0, 0, 0, 0,
	0, 0, 0, 2229, 2365, 2364, 2363, 2354, 0, 0,
	0, 0, 0, 0, 1123, 1165, 0, 0, 1110, 0,
	1072, 1125, 1046, 1061, 1133, 1062, 1063, 1097, 1025, 1081,
	227, 1059, 2251, 1113, 1017, 1049, 1050, 1019, 1056, 1020,
	1047, 1074, 172, 1045, 1084, 197, 1131, 0, 0, 256,
	211, 0, 0, 1077, 1115, 1079, 1102, 1071, 1098, 1033,
	1091, 1126, 1060, 1095, 1127, 0, 0, 0, 0, 0,
	823, 824, 825, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 1094, 1120, 1058, 0, 157, 1124, 1078,
	1096, 0, 0, 1018, 1092, 0, 1023, 1026, 1132, 1118,
	1053, 1054, 0, 0, 0, 0, 0, 0, 0, 1075,
	1080, 1099, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1051, 0, 1088, 0, 0, 0, 1028, 1024,
	0, 1073, 0, 146, 261, 275, 155, 252, 288, 160,
	259, 151, 226, 248, 0, 1164, 148, 273, 258, 208,
	191, 192, 147, 0, 243, 170, 183, 167, 224, 0,
	1122, 300, 166, 291, 1027, 283, 150, 1159, 282, 223,
	270, 274, 209, 203, 149, 272, 207, 202, 195, 174,
	187, 235, 201, 236, 188, 213, 212, 214, 1143, 1144,
	1145, 1146, 1147, 1155, 1156, 0, 1160, 1161, 1162, 1032,
	0, 1052, 1100, 0, 1016, 1108, 1116, 1070, 285, 1119,
	1067, 1066, 1150, 0, 1149, 260, 1151, 1152, 196, 1114,
	1048, 1057, 301, 1055, 246, 229, 1121, 1087, 1163, 244,
	199, 271, 237, 276, 262, 284, 240, 238, 142, 263,
	169, 210, 152, 153, 165, 171, 173, 175, 176, 219,
	220, 232, 251, 264, 265, 266, 168, 161, 245, 162,
	185, 163, 143, 253, 164, 144, 233, 269, 1148, 181,
	241, 206, 145, 205, 234, 268, 267, 292, 298, 299,
	302, 0, 303, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1157, 0, 1158, 297, 179,
	1015, 280, 0, 225, 1111, 1021, 1031, 1029, 1064, 1089,
	1090, 221, 296, 1104, 1107, 1105, 1134, 249, 0, 0,
	0, 0, 0, 190, 231, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1022, 0, 257,
	278, 290, 1166, 1167, 1168, 1169, 0, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 281, 1065, 1039, 1076, 289, 1042,
	1040, 1103, 1041, 1093, 1136, 215, 216, 217, 218, 182,
	0, 159, 1085, 1069, 1137, 1138, 1139, 1140, 1141, 1142,
	1044, 1117, 178, 184, 0, 186, 158, 230, 180, 287,
	193, 1109, 222, 189, 254, 194, 200, 242, 286, 228,
	247, 156, 277, 255, 204, 1038, 1043, 1037, 1082, 1083,
	1128, 1129, 1130, 1101, 1030, 1112, 1034, 1036, 1035, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1106, 0,
	1086, 141, 0, 198, 1135, 239, 177, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 0, 681, 0, 0, 0, 172,
	0, 0, 197, 0, 0, 0, 256, 211, 0, 0,
	0, 0, 726, 732, 1153, 1154, 293, 294, 295, 279,
	0, 0, 0, 674, 0, 0, 0, 624, 718, 717,
	691, 700, 0, 0, 154, 692, 0, 699, 693, 697,
	696, 694, 695, 0, 661, 0, 0, 0, 0, 0,
	0, 622, 678, 0, 682, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 675, 676, 0, 0, 0,
	0, 712, 0, 677, 0, 0, 714, 0, 701, 0,
	146, 261, 275, 155, 252, 288, 160, 259, 151, 226,
	248, 0, 0, 148, 273, 258, 208, 191, 192, 147,
	0, 243, 170, 183, 167, 224, 698, 710, 667, 166,
	665, 709, 283, 150, 0, 282, 223, 270, 274, 209,
	203, 149, 272, 207, 202, 195, 174, 187, 235, 201,
	236, 188, 213, 212, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 285, 0, 0, 725, 0,
	0, 0, 260, 0, 0, 196, 0, 0, 0, 668,
	0, 246, 229, 735, 0, 0, 244, 199, 271, 237,
	276, 262, 284, 240, 238, 142, 263, 169, 210, 152,
	153, 165, 171, 173, 175, 176, 219, 220, 232, 251,
	264, 265, 266, 168, 161, 245, 162, 185, 163, 143,
	253, 164, 144, 233, 269, 0, 181, 241, 206, 145,
	205, 234, 268, 267, 292, 298, 299, 302, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1365, 1364, 1366, 297, 179, 0, 280, 723,
	225, 734, 719, 720, 721, 724, 727, 728, 663, 666,
	729, 731, 733, 736, 249, 0, 0, 0, 0, 0,
	190, 231, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 278, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 664, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 713, 215, 216, 217, 218, 662, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	184, 0, 186, 158, 230, 180, 287, 193, 0, 222,
	189, 254, 194, 200, 242, 286, 228, 247, 156, 277,
	255, 204, 742, 722, 741, 743, 744, 740, 745, 746,
	730, 683, 0, 738, 737, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	198, 0, 239, 177, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 120,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	716, 0, 0, 293, 294, 295, 279, 96, 0, 711,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 0, 681, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 726, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 674, 0, 0, 0, 624,
	718, 717, 691, 700, 0, 0, 154, 692, 0, 699,
	693, 697, 696, 694, 695, 0, 661, 0, 0, 0,
	0, 0, 0, 622, 678, 0, 682, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 675, 676, 0,
	0, 0, 0, 712, 0, 677, 0, 0, 714, 0,
	701, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 698, 710,
	667, 166, 665, 709, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 707, 0, 0, 285, 0, 0,
	725, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 668, 0, 246, 229, 735, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 302,
	0, 303, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 179, 0,
	280, 723, 225, 734, 719, 720, 721, 724, 727, 728,
	663, 666, 729, 731, 733, 736, 249, 0, 0, 0,
	0, 0, 190, 231, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 278,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 664, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 713, 215, 216, 217, 218, 662, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 184, 0, 186, 158, 230, 180, 287, 193,
	0, 222, 189, 254, 194, 200, 242, 286, 228, 247,
	156, 277, 255, 204, 742, 722, 741, 743, 744, 740,
	745, 746, 730, 683, 0, 738, 737, 739, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 198, 70, 239, 177, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 120, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 716, 711, 0, 293, 294, 295, 279, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	0, 681, 0, 0, 0, 172, 882, 0, 197, 0,
	0, 0, 256, 211, 0, 0, 0, 0, 726, 732,
	0, 0, 0, 0, 0, 0, 878, 0, 0, 674,
	0, 0, 0, 624, 718, 717, 691, 700, 0, 0,
	154, 692, 0, 699, 693, 697, 696, 694, 695, 0,
	661, 0, 0, 0, 0, 0, 0, 622, 678, 0,
	682, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 675, 676, 0, 0, 0, 0, 712, 0, 677,
	0, 0, 879, 0, 701, 0, 146, 261, 275, 155,
	252, 288, 160, 259, 151, 226, 248, 0, 0, 148,
	273, 258, 208, 191, 192, 147, 0, 243, 170, 183,
	167, 224, 698, 710, 667, 166, 665, 709, 283, 150,
	0, 282, 223, 270, 274, 209, 203, 149, 272, 207,
	202, 195, 174, 187, 235, 201, 236, 188, 213, 212,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 707, 0,
	0, 285, 0, 0, 725, 0, 0, 0, 260, 0,
	0, 196, 0, 0, 0, 668, 0, 246, 229, 735,
	0, 0, 244, 199, 271, 237, 276, 262, 284, 240,
	238, 142, 263, 169, 210, 152, 153, 165, 171, 173,
	175, 176, 219, 220, 232, 251, 264, 265, 266, 168,
	161, 245, 162, 185, 163, 143, 253, 164, 144, 233,
	269, 0, 181, 241, 206, 145, 205, 234, 268, 267,
	292, 298, 299, 302, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 179, 0, 280, 723, 225, 734, 719, 720,
	721, 724, 727, 728, 663, 666, 729, 731, 733, 736,
	249, 0, 0, 0, 0, 0, 190, 231, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 278, 290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 664, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 713, 215, 216,
	217, 218, 662, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 742, 722,
	741, 743, 744, 740, 745, 746, 730, 683, 0, 738,
	737, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 198, 0, 239, 177,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 120, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 716, 711, 0, 293,
	294, 295, 279, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 0, 681, 0, 0, 0, 172,
	2250, 0, 197, 0, 0, 0, 256, 211, 0, 0,
	0, 0, 726, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 0, 0, 0, 624, 718, 717,
	691, 700, 0, 0, 154, 692, 0, 699, 693, 697,
	696, 694, 695, 0, 661, 0, 0, 0, 0, 0,
	0, 622, 678, 0, 682, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 675, 676, 0, 0, 0,
	0, 712, 0, 677, 0, 0, 714, 0, 701, 0,
	146, 261, 275, 155, 252, 288, 160, 259, 151, 226,
	248, 0, 0, 148, 273, 258, 208, 191, 192, 147,
	0, 243, 170, 183, 167, 224, 698, 710, 667, 166,
	665, 709, 283, 150, 0, 282, 223, 270, 274, 209,
	203, 149, 272, 207, 202, 195, 174, 187, 235, 201,
	236, 188, 213, 212, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 285, 0, 0, 725, 0,
	0, 0, 260, 0, 0, 196, 0, 0, 0, 668,
	0, 246, 229, 735, 0, 0, 244, 199, 271, 237,
	276, 262, 284, 240, 238, 142, 263, 169, 210, 152,
	153, 165, 171, 173, 175, 176, 219, 220, 232, 251,
	264, 265, 266, 168, 161, 245, 162, 185, 163, 143,
	253, 164, 144, 233, 269, 0, 181, 241, 206, 145,
	205, 234, 268, 267, 292, 298, 299, 302, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 179, 0, 280, 723,
	225, 734, 719, 720, 721, 724, 727, 728, 663, 666,
	729, 731, 733, 736, 249, 0, 0, 0, 0, 0,
	190, 231, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 278, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 664, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 713, 215, 216, 217, 218, 662, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	184, 0, 186, 158, 230, 180, 287, 193, 0, 222,
	189, 254, 194, 200, 242, 286, 228, 247, 156, 277,
	255, 204, 742, 722, 741, 743, 744, 740, 745, 746,
	730, 683, 0, 738, 737, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	198, 0, 239, 177, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 120,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	716, 711, 0, 293, 294, 295, 279, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 681,
	0, 0, 0, 172, 882, 0, 197, 0, 0, 0,
	256, 211, 0, 0, 0, 0, 726, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 674, 0, 0,
	0, 624, 718, 717, 691, 700, 0, 0, 154, 692,
	0, 699, 693, 697, 696, 694, 695, 0, 661, 0,
	0, 0, 0, 0, 0, 622, 678, 0, 682, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 675,
	676, 0, 0, 0, 0, 712, 0, 677, 0, 0,
	714, 0, 701, 0, 146, 261, 275, 155, 252, 288,
	160, 259, 151, 226, 248, 0, 0, 148, 273, 258,
	208, 191, 192, 147, 0, 243, 170, 183, 167, 224,
	698, 710, 667, 166, 665, 709, 283, 150, 0, 282,
	223, 270, 274, 209, 203, 149, 272, 207, 202, 195,
	174, 187, 235, 201, 236, 188, 213, 212, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 285,
	0, 0, 725, 0, 0, 0, 260, 0, 0, 196,
	0, 0, 0, 668, 0, 246, 229, 735, 0, 0,
	244, 199, 271, 237, 276, 262, 284, 240, 238, 142,
	263, 169, 210, 152, 153, 165, 171, 173, 175, 176,
	219, 220, 232, 251, 264, 265, 266, 168, 161, 245,
	162, 185, 163, 143, 253, 164, 144, 233, 269, 0,
	181, 241, 206, 145, 205, 234, 268, 267, 292, 298,
	299, 302, 0, 303, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	179, 0, 280, 723, 225, 734, 719, 720, 721, 724,
	727, 728, 663, 666, 729, 731, 733, 736, 249, 0,
	0, 0, 0, 0, 190, 231, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 278, 290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 289,
	0, 0, 0, 0, 0, 713, 215, 216, 217, 218,
	662, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 184, 0, 186, 158, 230, 180,
	287, 193, 0, 222, 189, 254, 194, 200, 242, 286,
	228, 247, 156, 277, 255, 204, 742, 722, 741, 743,
	744, 740, 745, 746, 730, 683, 0, 738, 737, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 198, 0, 239, 177, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 120, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 716, 0, 0, 293, 294, 295,
	279, 711, 0, 0, 1550, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 681,
	0, 0, 0, 172, 0, 0, 197, 0, 0, 0,
	256, 211, 0, 0, 0, 0, 726, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 674, 0, 0,
	0, 624, 718, 717, 691, 700, 0, 0, 154, 692,
	0, 699, 693, 697, 696, 694, 695, 0, 661, 0,
	0, 0, 0, 0, 0, 622, 678, 0, 682, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 675,
	676, 0, 0, 0, 0, 712, 0, 677, 0, 0,
	714, 0, 701, 0, 146, 261, 275, 155, 252, 288,
	160, 259, 151, 226, 248, 0, 0, 148, 273, 258,
	208, 191, 192, 147, 0, 243, 170, 183, 167, 224,
	698, 710, 667, 166, 665, 709, 283, 150, 0, 282,
	223, 270, 274, 209, 203, 149, 272, 207, 202, 195,
	174, 187, 235, 201, 236, 188, 213, 212, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 285,
	0, 0, 725, 0, 0, 0, 260, 0, 0, 196,
	0, 0, 0, 668, 0, 246, 229, 735, 0, 0,
	244, 199, 271, 237, 276, 262, 284, 240, 238, 142,
	263, 169, 210, 152, 153, 165, 171, 173, 175, 176,
	219, 220, 232, 251, 264, 265, 266, 168, 161, 245,
	162, 185, 163, 143, 253, 164, 144, 233, 269, 0,
	181, 241, 206, 145, 205, 234, 268, 267, 292, 298,
	299, 302, 0, 303, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	179, 0, 280, 723, 225, 734, 719, 720, 721, 724,
	727, 728, 663, 666, 729, 731, 733, 736, 249, 0,
	0, 0, 0, 0, 190, 231, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 278, 290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 289,
	0, 0, 0, 0, 0, 713, 215, 216, 217, 218,
	662, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 184, 0, 186, 158, 230, 180,
	287, 193, 0, 222, 189, 254, 194, 200, 242, 286,
	228, 247, 156, 277, 255, 204, 742, 722, 741, 743,
	744, 740, 745, 746, 730, 683, 0, 738, 737, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 198, 0, 239, 177, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 120, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 716, 711, 0, 293, 294, 295,
	279, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 0, 681, 0, 0, 0, 172, 0, 0,
	197, 0, 0, 0, 256, 211, 0, 0, 0, 0,
	726, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 674, 0, 0, 0, 624, 718, 717, 691, 700,
	0, 0, 154, 692, 0, 699, 693, 697, 696, 694,
	695, 0, 661, 0, 0, 0, 0, 0, 0, 622,
	678, 0, 682, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 675, 676, 619, 0, 0, 0, 712,
	0, 677, 0, 0, 714, 0, 701, 0, 146, 261,
	275, 155, 252, 288, 160, 259, 151, 226, 248, 0,
	0, 148, 273, 258, 208, 191, 192, 147, 0, 243,
	170, 183, 167, 224, 698, 710, 667, 166, 665, 709,
	283, 150, 0, 282, 223, 270, 274, 209, 203, 149,
	272, 207, 202, 195, 174, 187, 235, 201, 236, 188,
	213, 212, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	707, 0, 0, 285, 0, 0, 725, 0, 0, 0,
	260, 0, 0, 196, 0, 0, 0, 668, 0, 246,
	229, 735, 0, 0, 244, 199, 271, 237, 276, 262,
	284, 240, 238, 142, 263, 169, 210, 152, 153, 165,
	171, 173, 175, 176, 219, 220, 232, 251, 264, 265,
	266, 168, 161, 245, 162, 185, 163, 143, 253, 164,
	144, 233, 269, 0, 181, 241, 206, 145, 205, 234,
	268, 267, 292, 298, 299, 302, 0, 303, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 723, 225, 734,
	719, 720, 721, 724, 727, 728, 663, 666, 729, 731,
	733, 736, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 664,
	0, 0, 0, 289, 0, 0, 0, 0, 0, 713,
	215, 216, 217, 218, 662, 0, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 184, 0,
	186, 158, 230, 180, 287, 193, 0, 222, 189, 254,
	194, 200, 242, 286, 228, 247, 156, 277, 255, 204,
	742, 722, 741, 743, 744, 740, 745, 746, 730, 683,
	0, 738, 737, 739, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 198, 0,
	239, 177, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 120, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 716, 711,
	0, 293, 294, 295, 279, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 0, 681, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 726, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 674, 0, 0, 0, 624,
	718, 717, 691, 700, 0, 0, 154, 692, 0, 699,
	693, 697, 696, 694, 695, 0, 661, 0, 0, 0,
	0, 0, 0, 622, 678, 0, 682, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 675, 676, 0,
	0, 0, 0, 712, 0, 677, 0, 0, 714, 0,
	701, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 698, 710,
	667, 166, 665, 709, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 707, 0, 0, 285, 0, 0,
	725, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 668, 0, 246, 229, 735, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 302,
	0, 303, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 179, 0,
	280, 723, 225, 734, 719, 720, 721, 724, 727, 728,
	663, 666, 729, 731, 733, 736, 249, 0, 0, 0,
	0, 0, 190, 231, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 278,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 664, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 713, 215, 216, 217, 218, 662, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 184, 0, 186, 158, 230, 180, 287, 193,
	0, 222, 189, 254, 194, 200, 242, 286, 228, 247,
	156, 277, 255, 204, 742, 722, 741, 743, 744, 740,
	745, 746, 730, 683, 0, 738, 737, 739, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 198, 0, 239, 177, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 120, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 716, 711, 0, 293, 294, 295, 279, 0,
	0, 0, 0, 227, 0, 0, 0, 1309, 0, 0,
	0, 681, 0, 0, 0, 172, 0, 0, 197, 0,
	0, 0, 256, 211, 0, 0, 0, 0, 726, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 674,
	0, 0, 0, 624, 718, 717, 691, 700, 0, 0,
	154, 692, 0, 699, 693, 697, 696, 694, 695, 0,
	661, 0, 0, 0, 0, 0, 0, 0, 678, 0,
	682, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 675, 676, 0, 0, 0, 0, 712, 0, 677,
	0, 0, 714, 0, 701, 0, 146, 261, 275, 155,
	252, 288, 160, 259, 151, 226, 248, 0, 0, 148,
	273, 258, 208, 191, 192, 147, 0, 243, 170, 183,
	167, 224, 698, 710, 667, 166, 665, 709, 283, 150,
	0, 282, 223, 270, 274, 209, 203, 149, 272, 207,
	202, 195, 174, 187, 235, 201, 236, 188, 213, 212,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 707, 0,
	0, 285, 0, 0, 725, 0, 0, 0, 260, 0,
	0, 196, 0, 0, 0, 668, 0, 246, 229, 735,
	0, 0, 244, 199, 271, 237, 276, 262, 284, 240,
	238, 142, 263, 169, 210, 152, 153, 165, 171, 173,
	175, 176, 219, 220, 232, 251, 264, 265, 266, 168,
	161, 245, 162, 185, 163, 143, 253, 164, 144, 233,
	269, 0, 181, 241, 206, 145, 205, 234, 268, 267,
	292, 1310, 1311, 302, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 179, 0, 280, 723, 225, 734, 719, 720,
	721, 724, 727, 728, 663, 666, 729, 731, 733, 736,
	249, 0, 0, 0, 0, 0, 190, 231, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 278, 290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 664, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 713, 215, 216,
	217, 218, 662, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 742, 722,
	741, 743, 744, 740, 745, 746, 730, 683, 0, 738,
	737, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 198, 0, 239, 177,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 120, 641, 642, 643, 644,
	645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
	655, 656, 657, 658, 659, 660, 716, 711, 0, 293,
	294, 295, 279, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 0, 681, 0, 0, 0, 172,
	0, 0, 197, 0, 0, 0, 256, 211, 0, 0,
	0, 0, 726, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 0, 0, 0, 624, 718, 717,
	691, 700, 0, 0, 154, 692, 0, 699, 693, 697,
	696, 694, 695, 0, 661, 0, 0, 0, 0, 0,
	0, 0, 678, 0, 682, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 675, 676, 0, 0, 0,
	0, 712, 0, 677, 0, 0, 714, 0, 701, 0,
	146, 261, 275, 155, 252, 288, 160, 259, 151, 226,
	248, 0, 0, 148, 273, 258, 208, 191, 192, 147,
	0, 243, 170, 183, 167, 224, 698, 710, 667, 166,
	665, 709, 283, 150, 0, 282, 223, 270, 274, 209,
	203, 149, 272, 207, 202, 195, 174, 187, 235, 201,
	236, 188, 213, 212, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 707, 0, 0, 285, 0, 0, 725, 0,
	0, 0, 260, 0, 0, 196, 0, 0, 0, 668,
	0, 246, 229, 735, 0, 0, 244, 199, 271, 237,
	276, 262, 284, 240, 238, 142, 263, 169, 210, 152,
	153, 165, 171, 173, 175, 176, 219, 220, 232, 251,
	264, 265, 266, 168, 161, 245, 162, 185, 163, 143,
	253, 164, 144, 233, 269, 0, 181, 241, 206, 145,
	205, 234, 268, 267, 292, 298, 299, 302, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 179, 0, 280, 723,
	225, 734, 719, 720, 721, 724, 727, 728, 663, 666,
	729, 731, 733, 736, 249, 0, 0, 0, 0, 0,
	190, 231, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 278, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 664, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 713, 215, 216, 217, 218, 662, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	184, 0, 186, 158, 230, 180, 287, 193, 0, 222,
	189, 254, 194, 200, 242, 286, 228, 247, 156, 277,
	255, 204, 742, 722, 741, 743, 744, 740, 745, 746,
	730, 683, 0, 738, 737, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	198, 0, 239, 177, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 120,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	716, 711, 0, 293, 294, 295, 279, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 0, 681,
	0, 0, 0, 172, 0, 0, 197, 0, 0, 0,
	256, 211, 0, 0, 0, 0, 726, 732, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 624, 718, 717, 691, 700, 0, 0, 154, 692,
	0, 699, 693, 697, 696, 694, 695, 0, 661, 0,
	0, 0, 0, 0, 0, 622, 678, 0, 682, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 675,
	676, 0, 0, 0, 0, 712, 0, 677, 0, 0,
	714, 0, 701, 0, 146, 261, 275, 155, 252, 288,
	160, 259, 151, 226, 248, 0, 0, 148, 273, 258,
	208, 191, 192, 147, 0, 243, 170, 183, 167, 224,
	698, 710, 667, 166, 665, 709, 283, 150, 0, 282,
	223, 270, 274, 209, 203, 149, 272, 207, 202, 195,
	174, 187, 235, 201, 236, 188, 213, 212, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 285,
	0, 0, 725, 0, 0, 0, 260, 0, 0, 196,
	0, 0, 0, 668, 0, 246, 229, 735, 0, 0,
	244, 199, 271, 237, 276, 262, 284, 240, 238, 142,
	263, 169, 210, 152, 153, 165, 171, 173, 175, 176,
	219, 220, 232, 251, 264, 265, 266, 168, 161, 245,
	162, 185, 163, 143, 253, 164, 144, 233, 269, 0,
	181, 241, 206, 145, 205, 234, 268, 267, 292, 298,
	299, 302, 0, 303, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	179, 0, 280, 723, 225, 734, 719, 720, 721, 724,
	727, 728, 663, 666, 729, 731, 733, 736, 249, 0,
	0, 0, 0, 0, 190, 231, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 278, 290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 664, 0, 0, 0, 289,
	0, 0, 0, 0, 0, 713, 215, 216, 217, 218,
	662, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 184, 0, 186, 158, 230, 180,
	287, 193, 0, 222, 189, 254, 194, 200, 242, 286,
	228, 247, 156, 277, 255, 204, 742, 722, 741, 743,
	744, 740, 745, 746, 730, 683, 0, 738, 737, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 198, 0, 239, 177, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 120, 641, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 716, 0, 0, 293, 294, 295,
	279, 96, 0, 27, 86, 69, 0, 0, 0, 0,
	0, 0, 0, 227, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 0, 0, 197, 0,
	0, 0, 256, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 102, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 348, 0, 347, 351,
	343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 358, 0, 0, 0, 146, 261, 275, 155,
	252, 288, 160, 259, 151, 226, 248, 0, 0, 148,
	273, 258, 208, 191, 192, 147, 0, 243, 170, 183,
	167, 224, 0, 0, 300, 166, 291, 0, 283, 150,
	0, 282, 223, 270, 274, 209, 203, 149, 272, 207,
	202, 195, 174, 187, 235, 201, 236, 188, 213, 212,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 196, 0, 0, 0, 301, 0, 246, 229, 0,
	0, 0, 244, 199, 271, 237, 276, 262, 284, 240,
	238, 142, 263, 169, 210, 152, 153, 165, 171, 173,
	175, 176, 219, 220, 232, 251, 264, 265, 266, 168,
	161, 245, 162, 185, 163, 143, 253, 164, 144, 233,
	269, 0, 181, 241, 206, 145, 205, 234, 268, 267,
	292, 298, 299, 302, 0, 303, 304, 341, 340, 344,
	1348, 0, 0, 0, 0, 346, 0, 0, 0, 0,
	0, 297, 179, 0, 280, 0, 225, 350, 0, 0,
	0, 0, 0, 0, 221, 296, 0, 0, 0, 0,
	249, 342, 0, 0, 0, 0, 190, 231, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 278, 290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 312, 314, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 0, 345,
	349, 352, 0, 353, 354, 0, 0, 355, 356, 357,
	0, 0, 359, 360, 0, 0, 0, 0, 0, 1344,
	0, 1341, 0, 0, 0, 1343, 1340, 1342, 1346, 1347,
	0, 0, 0, 1345, 141, 0, 198, 70, 239, 177,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 227, 0, 0, 293,
	294, 295, 279, 0, 0, 0, 0, 0, 172, 0,
	0, 197, 0, 0, 0, 256, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 1642, 1645, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1351, 1352, 1353,
	1354, 1355, 1356, 1349, 1350, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	261, 275, 155, 252, 288, 160, 259, 151, 226, 248,
	0, 0, 148, 273, 258, 208, 191, 192, 147, 0,
	243, 170, 183, 167, 224, 0, 0, 300, 166, 291,
	0, 283, 150, 0, 282, 223, 270, 274, 209, 203,
	149, 272, 207, 202, 195, 174, 187, 235, 201, 236,
	188, 213, 212, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1646, 285, 0, 0, 0, 1639, 0,
	1638, 260, 1640, 1643, 196, 0, 0, 0, 301, 0,
	246, 229, 0, 0, 0, 244, 199, 271, 237, 276,
	262, 284, 240, 238, 142, 263, 169, 210, 152, 153,
	165, 171, 173, 175, 176, 219, 220, 232, 251, 264,
	265, 266, 168, 161, 245, 162, 185, 163, 143, 253,
	164, 144, 233, 269, 1644, 181, 241, 206, 145, 205,
	234, 268, 267, 292, 298, 299, 302, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 297, 179, 0, 280, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 221, 296, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 0, 190,
	231, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 278, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 910, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 911, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 906,
	907, 908, 905, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 302,
	0, 303, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 179, 0,
	280, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	221, 296, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 0, 190, 231, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 278,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 182, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 184, 0, 186, 158, 230, 180, 287, 193,
	0, 222, 189, 254, 194, 200, 242, 286, 228, 247,
	156, 277, 255, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 198, 0, 239, 177, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 227, 0, 0, 293, 294, 295, 279, 0,
	0, 0, 0, 0, 172, 426, 0, 197, 0, 0,
	0, 256, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 434, 435, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 261, 275, 155, 252,
	288, 160, 259, 151, 226, 248, 0, 0, 148, 273,
	258, 208, 191, 192, 147, 0, 243, 170, 183, 167,
	224, 0, 0, 300, 166, 291, 408, 283, 150, 407,
	282, 223, 270, 274, 209, 203, 149, 272, 207, 202,
	195, 174, 187, 235, 201, 236, 188, 213, 212, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 0, 260, 0, 0,
	196, 0, 0, 0, 301, 0, 246, 229, 0, 0,
	0, 244, 199, 271, 237, 276, 262, 284, 425, 238,
	142, 263, 169, 210, 152, 153, 165, 171, 173, 175,
	176, 219, 220, 232, 251, 264, 265, 266, 168, 161,
	245, 162, 185, 163, 143, 253, 164, 144, 233, 269,
	0, 181, 241, 206, 145, 205, 234, 268, 267, 292,
	298, 299, 302, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 179, 0, 280, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 221, 296, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 190, 231, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 278, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 428, 215, 216, 217,
	218, 182, 0, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 184, 0, 186, 158, 230,
	180, 287, 193, 0, 436, 431, 432, 194, 200, 242,
	286, 228, 247, 156, 277, 255, 433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 198, 0, 239, 177, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 96, 0, 0, 293, 294,
	295, 279, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 197, 0, 0, 0, 256, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 998, 0, 102, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 261, 275, 155, 252, 288, 160, 259, 151, 226,
	248, 0, 0, 148, 273, 258, 208, 191, 192, 147,
	0, 243, 170, 183, 167, 224, 0, 0, 300, 166,
	291, 0, 283, 150, 0, 282, 223, 270, 274, 209,
	203, 149, 272, 207, 202, 195, 174, 187, 235, 201,
	236, 188, 213, 212, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 196, 0, 0, 0, 301,
	0, 246, 229, 0, 0, 0, 244, 199, 271, 237,
	276, 262, 284, 240, 238, 142, 263, 169, 210, 152,
	153, 165, 171, 173, 175, 176, 219, 220, 232, 251,
	264, 265, 266, 168, 161, 245, 162, 185, 163, 143,
	253, 164, 144, 233, 269, 0, 181, 241, 206, 145,
	205, 234, 268, 267, 292, 298, 299, 302, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 179, 0, 280, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 221, 296,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	190, 231, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 278, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 182, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	184, 0, 186, 158, 230, 180, 287, 193, 0, 222,
	189, 254, 194, 200, 242, 286, 228, 247, 156, 277,
	255, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	198, 70, 239, 177, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	227, 0, 0, 293, 294, 295, 279, 0, 0, 0,
	0, 0, 172, 0, 0, 197, 0, 0, 0, 256,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	102, 434, 435, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 261, 275, 155, 252, 288, 160,
	259, 151, 226, 248, 0, 0, 148, 273, 258, 208,
	191, 192, 147, 0, 243, 170, 183, 167, 224, 0,
	0, 300, 166, 291, 408, 283, 150, 407, 282, 223,
	270, 274, 209, 203, 149, 272, 207, 202, 195, 174,
	187, 235, 201, 236, 188, 213, 212, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 196, 0,
	0, 0, 301, 0, 246, 229, 0, 0, 0, 244,
	199, 271, 237, 276, 262, 284, 240, 238, 142, 263,
	169, 210, 152, 153, 165, 171, 173, 175, 176, 219,
	220, 232, 251, 264, 265, 266, 168, 161, 245, 162,
	185, 163, 143, 253, 164, 144, 233, 269, 0, 181,
	241, 206, 145, 205, 234, 268, 267, 292, 298, 299,
	302, 0, 303, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 179,
	0, 280, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 221, 296, 0, 0, 0, 0, 249, 0, 0,
	0, 0, 0, 190, 231, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	278, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 182,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 184, 0, 186, 158, 230, 180, 287,
	193, 0, 436, 431, 432, 194, 200, 242, 286, 228,
	247, 156, 277, 255, 433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 198, 0, 239, 177, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 227, 0, 0, 293, 294, 295, 279,
	0, 0, 0, 0, 0, 172, 602, 0, 197, 0,
	0, 0, 256, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 600, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 0, 0, 0, 146, 261, 275, 155,
	252, 288, 160, 259, 151, 226, 248, 0, 0, 148,
	273, 258, 208, 191, 192, 147, 0, 243, 170, 183,
	167, 224, 0, 0, 300, 166, 291, 0, 283, 150,
	0, 282, 223, 270, 274, 209, 203, 149, 272, 207,
	202, 195, 174, 187, 235, 201, 236, 188, 213, 212,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 196, 0, 0, 0, 301, 0, 246, 229, 0,
	0, 0, 244, 199, 271, 237, 276, 262, 284, 240,
	238, 142, 263, 169, 210, 152, 153, 165, 171, 173,
	175, 176, 219, 220, 232, 251, 264, 265, 266, 168,
	161, 245, 162, 185, 163, 143, 253, 164, 144, 233,
	269, 0, 181, 241, 206, 145, 205, 234, 268, 267,
	292, 298, 299, 302, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 179, 0, 280, 0, 225, 0, 0, 0,
	0, 0, 0, 0, 221, 296, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 0, 190, 231, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 278, 290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 182, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 198, 0, 239, 177,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 227, 0, 0, 293,
	294, 295, 279, 0, 0, 0, 0, 0, 172, 596,
	0, 197, 0, 0, 0, 256, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 600,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 0, 0, 0, 146,
	261, 275, 155, 252, 288, 160, 259, 151, 226, 248,
	0, 0, 148, 273, 258, 208, 191, 192, 147, 0,
	243, 170, 183, 167, 224, 0, 0, 300, 166, 291,
	0, 283, 150, 0, 282, 223, 270, 274, 209, 203,
	149, 272, 207, 202, 195, 174, 187, 235, 201, 236,
	188, 213, 212, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 196, 0, 0, 0, 301, 0,
	246, 229, 0, 0, 0, 244, 199, 271, 237, 276,
	262, 284, 240, 238, 142, 263, 169, 210, 152, 153,
	165, 171, 173, 175, 176, 219, 220, 232, 251, 264,
	265, 266, 168, 161, 245, 162, 185, 163, 143, 253,
	164, 144, 233, 269, 0, 181, 241, 206, 145, 205,
	234, 268, 267, 292, 298, 299, 302, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 297, 179, 0, 280, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 221, 296, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 0, 190,
	231, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 278, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 600, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 302,
	0, 303, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 179, 0,
	280, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	221, 296, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 0, 190, 231, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 278,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 182, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 184, 0, 186, 158, 230, 180, 287, 193,
	0, 222, 189, 254, 194, 200, 242, 286, 228, 247,
	156, 277, 255, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 198, 0, 239, 177, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 227, 0, 0, 293, 294, 295, 279, 0,
	0, 0, 0, 0, 172, 0, 0, 197, 0, 0,
	0, 256, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 600, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1846, 0, 0, 0, 146, 261, 275, 155, 252,
	288, 160, 259, 151, 226, 248, 0, 0, 148, 273,
	258, 208, 191, 192, 147, 0, 243, 170, 183, 167,
	224, 0, 0, 300, 166, 291, 0, 283, 150, 0,
	282, 223, 270, 274, 209, 203, 149, 272, 207, 202,
	195, 174, 187, 235, 201, 236, 188, 213, 212, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 0, 260, 0, 0,
	196, 0, 0, 0, 301, 0, 246, 229, 0, 0,
	0, 244, 199, 271, 237, 276, 262, 284, 240, 238,
	142, 263, 169, 210, 152, 153, 165, 171, 173, 175,
	176, 219, 220, 232, 251, 264, 265, 266, 168, 161,
	245, 162, 185, 163, 143, 253, 164, 144, 233, 269,
	0, 181, 241, 206, 145, 205, 234, 268, 267, 292,
	298, 299, 302, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 179, 0, 280, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 221, 296, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 190, 231, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 278, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 182, 0, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 184, 0, 186, 158, 230,
	180, 287, 193, 0, 222, 189, 254, 194, 200, 242,
	286, 228, 247, 156, 277, 255, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 198, 0, 239, 177, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 227, 0, 0, 293, 294,
	295, 279, 0, 0, 0, 0, 0, 172, 0, 0,
	197, 0, 0, 0, 256, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2032, 0, 102, 718, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 261,
	275, 155, 252, 288, 160, 259, 151, 226, 248, 0,
	0, 148, 273, 258, 208, 191, 192, 147, 0, 243,
	170, 183, 167, 224, 0, 0, 300, 166, 291, 0,
	283, 150, 0, 282, 223, 270, 274, 209, 203, 149,
	272, 207, 202, 195, 174, 187, 235, 201, 236, 188,
	213, 212, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 0, 0, 0, 0, 0, 0,
	260, 0, 0, 196, 0, 0, 0, 301, 0, 246,
	229, 0, 0, 0, 244, 199, 271, 237, 276, 262,
	284, 240, 238, 142, 263, 169, 210, 152, 153, 165,
	171, 173, 175, 176, 219, 220, 232, 251, 264, 265,
	266, 168, 161, 245, 162, 185, 163, 143, 253, 164,
	144, 233, 269, 0, 181, 241, 206, 145, 205, 234,
	268, 267, 292, 298, 299, 302, 0, 303, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 0, 289, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 182, 0, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 184, 0,
	186, 158, 230, 180, 287, 193, 0, 222, 189, 254,
	194, 200, 242, 286, 228, 247, 156, 277, 255, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 198, 0,
	239, 177, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 227, 0,
	0, 293, 294, 295, 279, 0, 0, 0, 0, 0,
	172, 1285, 0, 197, 0, 0, 0, 256, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 600, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 261, 275, 155, 252, 288, 160, 259, 151,
	226, 248, 0, 0, 148, 273, 258, 208, 191, 192,
	147, 0, 243, 170, 183, 167, 224, 0, 0, 300,
	166, 291, 0, 283, 150, 0, 282, 223, 270, 274,
	209, 203, 149, 272, 207, 202, 195, 174, 187, 235,
	201, 236, 188, 213, 212, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 0, 0, 0,
	0, 0, 0, 260, 0, 0, 196, 0, 0, 0,
	301, 0, 246, 229, 0, 0, 0, 244, 199, 271,
	237, 276, 262, 284, 240, 238, 142, 263, 169, 210,
	152, 153, 165, 171, 173, 175, 176, 219, 220, 232,
	251, 264, 265, 266, 168, 161, 245, 162, 185, 163,
	143, 253, 164, 144, 233, 269, 0, 181, 241, 206,
	145, 205, 234, 268, 267, 292, 298, 299, 302, 0,
	303, 304, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 297, 179, 0, 280,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 221,
	296, 0, 0, 0, 0, 249, 0, 0, 0, 0,
	0, 190, 231, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 278, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 0, 0, 0, 289, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 182, 0, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 184, 0, 186, 158, 230, 180, 287, 193, 0,
	222, 189, 254, 194, 200, 242, 286, 228, 247, 156,
	277, 255, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 198, 0, 239, 177, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 227, 0, 0, 293, 294, 295, 279, 0, 0,
	0, 0, 0, 172, 0, 0, 197, 0, 0, 0,
	256, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2007, 0, 0,
	0, 102, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 261, 275, 155, 252, 288,
	160, 259, 151, 226, 248, 0, 0, 148, 273, 258,
	208, 191, 192, 147, 0, 243, 170, 183, 167, 224,
	0, 0, 300, 166, 291, 0, 283, 150, 0, 282,
	223, 270, 274, 209, 203, 149, 272, 207, 202, 195,
	174, 187, 235, 201, 236, 188, 213, 212, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 260, 0, 0, 196,
	0, 0, 0, 301, 0, 246, 229, 0, 0, 0,
	244, 199, 271, 237, 276, 262, 284, 240, 238, 142,
	263, 169, 210, 152, 153, 165, 171, 173, 175, 176,
	219, 220, 232, 251, 264, 265, 266, 168, 161, 245,
	162, 185, 163, 143, 253, 164, 144, 233, 269, 0,
	181, 241, 206, 145, 205, 234, 268, 267, 292, 298,
	299, 302, 0, 303, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	179, 0, 280, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 221, 296, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 0, 190, 231, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 278, 290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 0, 0, 0, 289,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	182, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 184, 0, 186, 158, 230, 180,
	287, 193, 0, 222, 189, 254, 194, 200, 242, 286,
	228, 247, 156, 277, 255, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 198, 0, 239, 177, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 227, 0, 0, 293, 294, 295,
	279, 0, 0, 0, 0, 0, 172, 0, 0, 197,
	0, 0, 0, 256, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 718, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 261, 275,
	155, 252, 288, 160, 259, 151, 226, 248, 0, 0,
	148, 273, 258, 208, 191, 192, 147, 0, 243, 170,
	183, 167, 224, 0, 0, 300, 166, 291, 0, 283,
	150, 0, 282, 223, 270, 274, 209, 203, 149, 272,
	207, 202, 195, 174, 187, 235, 201, 236, 188, 213,
	212, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 260,
	0, 0, 196, 0, 0, 0, 301, 0, 246, 229,
	0, 0, 0, 244, 199, 271, 237, 276, 262, 284,
	240, 238, 142, 263, 169, 210, 152, 153, 165, 171,
	173, 175, 176, 219, 220, 232, 251, 264, 265, 266,
	168, 161, 245, 162, 185, 163, 143, 253, 164, 144,
	233, 269, 0, 181, 241, 206, 145, 205, 234, 268,
	267, 292, 298, 299, 302, 0, 303, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 297, 179, 0, 280, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 221, 296, 0, 0, 0,
	0, 249, 0, 0, 0, 0, 0, 190, 231, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 278, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 182, 0, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 184, 0, 186,
	158, 230, 180, 287, 193, 0, 222, 189, 254, 194,
	200, 242, 286, 228, 247, 156, 277, 255, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 198, 0, 239,
	177, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 227, 0, 0,
	293, 294, 295, 279, 0, 0, 0, 0, 0, 172,
	0, 0, 197, 0, 0, 0, 256, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1664, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 261, 275, 155, 252, 288, 160, 259, 151, 226,
	248, 0, 0, 148, 273, 258, 208, 191, 192, 147,
	0, 243, 170, 183, 167, 224, 0, 0, 300, 166,
	291, 0, 283, 150, 0, 282, 223, 270, 274, 209,
	203, 149, 272, 207, 202, 195, 174, 187, 235, 201,
	236, 188, 213, 212, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 196, 0, 0, 0, 301,
	0, 246, 229, 0, 0, 0, 244, 199, 271, 237,
	276, 262, 284, 240, 238, 142, 263, 169, 210, 152,
	153, 165, 171, 173, 175, 176, 219, 220, 232, 251,
	264, 265, 266, 168, 161, 245, 162, 185, 163, 143,
	253, 164, 144, 233, 269, 0, 181, 241, 206, 145,
	205, 234, 268, 267, 292, 298, 299, 302, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 179, 0, 280, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 221, 296,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	190, 231, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 278, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 182, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	184, 0, 186, 158, 230, 180, 287, 193, 0, 222,
	189, 254, 194, 200, 242, 286, 228, 247, 156, 277,
	255, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	198, 0, 239, 177, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	227, 0, 0, 293, 294, 295, 279, 0, 0, 0,
	0, 0, 172, 0, 0, 197, 0, 0, 0, 256,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 0, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 261, 275, 155, 252, 288, 160,
	259, 151, 226, 248, 0, 0, 148, 273, 258, 208,
	191, 192, 147, 0, 243, 170, 183, 167, 224, 0,
	0, 300, 166, 291, 0, 283, 150, 0, 282, 223,
	270, 274, 209, 203, 149, 272, 207, 202, 195, 174,
	187, 235, 201, 236, 188, 213, 212, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 196, 0,
	0, 0, 301, 0, 246, 229, 0, 0, 0, 244,
	199, 271, 237, 276, 262, 284, 240, 238, 142, 263,
	169, 210, 152, 153, 165, 171, 173, 175, 176, 219,
	220, 232, 251, 264, 265, 266, 168, 161, 245, 162,
	185, 163, 143, 253, 164, 144, 233, 269, 0, 181,
	241, 206, 145, 205, 234, 268, 267, 292, 298, 299,
	302, 0, 303, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 179,
	0, 280, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 221, 296, 0, 0, 0, 0, 249, 0, 0,
	0, 0, 0, 190, 231, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	278, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 182,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 184, 0, 186, 158, 230, 180, 287,
	193, 0, 222, 189, 254, 194, 200, 242, 286, 228,
	247, 156, 277, 255, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 198, 0, 239, 177, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 227, 0, 0, 293, 294, 295, 279,
	0, 0, 0, 0, 0, 172, 0, 0, 197, 0,
	0, 0, 256, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 102, 0, 0, 600, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 146, 261, 275, 155,
	252, 288, 160, 259, 151, 226, 248, 0, 0, 148,
	273, 258, 208, 191, 192, 147, 0, 243, 170, 183,
	167, 224, 0, 0, 300, 166, 291, 0, 283, 150,
	0, 282, 223, 270, 274, 209, 203, 149, 272, 207,
	202, 195, 174, 187, 235, 201, 236, 188, 213, 212,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 0, 0, 0, 0, 0, 0, 260, 0,
	0, 196, 0, 0, 0, 301, 0, 246, 229, 0,
	0, 0, 244, 199, 271, 237, 276, 262, 284, 240,
	238, 142, 263, 169, 210, 152, 153, 165, 171, 173,
	175, 176, 219, 220, 232, 251, 264, 265, 266, 168,
	161, 245, 162, 185, 163, 143, 253, 164, 144, 233,
	269, 0, 181, 241, 206, 145, 205, 234, 268, 267,
	292, 298, 299, 302, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 179, 0, 280, 0, 225, 0, 0, 0,
	0, 0, 0, 0, 221, 296, 0, 0, 0, 0,
	249, 0, 0, 0, 0, 0, 190, 231, 0, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 278, 290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 0, 0,
	0, 289, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 182, 0, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 184, 0, 186, 158,
	230, 180, 287, 193, 0, 222, 189, 254, 194, 200,
	242, 286, 228, 247, 156, 277, 255, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 198, 0, 239, 177,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 138, 139, 140, 227, 0, 0, 293,
	294, 295, 279, 0, 0, 0, 0, 0, 172, 0,
	0, 197, 0, 0, 0, 256, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1704, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 146,
	261, 275, 155, 252, 288, 160, 259, 151, 226, 248,
	0, 0, 148, 273, 258, 208, 191, 192, 147, 0,
	243, 170, 183, 167, 224, 0, 0, 300, 166, 291,
	0, 283, 150, 0, 282, 223, 270, 274, 209, 203,
	149, 272, 207, 202, 195, 174, 187, 235, 201, 236,
	188, 213, 212, 214, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 196, 0, 0, 0, 301, 0,
	246, 229, 0, 0, 0, 244, 199, 271, 237, 276,
	262, 284, 240, 238, 142, 263, 169, 210, 152, 153,
	165, 171, 173, 175, 176, 219, 220, 232, 251, 264,
	265, 266, 168, 161, 245, 162, 185, 163, 143, 253,
	164, 144, 233, 269, 0, 181, 241, 206, 145, 205,
	234, 268, 267, 292, 298, 299, 302, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 297, 179, 0, 280, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 221, 296, 0,
	0, 0, 0, 249, 0, 0, 0, 0, 0, 190,
	231, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 278, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 182, 0, 159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 184,
	0, 186, 158, 230, 180, 287, 193, 0, 222, 189,
	254, 194, 200, 242, 286, 228, 247, 156, 277, 255,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 198,
	0, 239, 177, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 227,
	0, 0, 293, 294, 295, 279, 0, 0, 0, 0,
	0, 172, 0, 0, 197, 0, 0, 0, 256, 211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 261, 275, 155, 252, 288, 160, 259,
	151, 226, 248, 0, 0, 148, 273, 258, 208, 191,
	192, 147, 0, 243, 170, 183, 167, 224, 0, 0,
	300, 166, 291, 0, 283, 150, 0, 282, 223, 270,
	274, 209, 203, 149, 272, 207, 202, 195, 174, 187,
	235, 201, 236, 188, 213, 212, 214, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 0, 0,
	0, 0, 0, 0, 260, 0, 0, 196, 0, 0,
	0, 301, 0, 246, 229, 0, 0, 0, 244, 199,
	271, 237, 276, 262, 284, 240, 238, 142, 263, 169,
	210, 152, 153, 165, 171, 173, 175, 176, 219, 220,
	232, 251, 264, 265, 266, 168, 161, 245, 162, 185,
	163, 143, 253, 164, 144, 233, 269, 0, 181, 241,
	206, 145, 205, 234, 268, 267, 292, 298, 299, 302,
	0, 303, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 179, 0,
	280, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	221, 296, 0, 0, 0, 0, 249, 0, 0, 0,
	0, 0, 190, 231, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 278,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 281, 0, 0, 0, 289, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 182, 0,
	159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 184, 0, 186, 158, 230, 180, 287, 193,
	0, 222, 189, 254, 194, 200, 242, 286, 228, 247,
	156, 277, 255, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 198, 0, 239, 177, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 227, 0, 0, 293, 294, 295, 279, 0,
	0, 0, 0, 0, 172, 0, 0, 197, 0, 0,
	0, 256, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 1298, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 261, 275, 155, 252,
	288, 160, 259, 151, 226, 248, 0, 0, 148, 273,
	258, 208, 191, 192, 147, 0, 243, 170, 183, 167,
	224, 0, 0, 300, 166, 291, 0, 283, 150, 0,
	282, 223, 270, 274, 209, 203, 149, 272, 207, 202,
	195, 174, 187, 235, 201, 236, 188, 213, 212, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 0, 260, 0, 0,
	196, 0, 0, 0, 301, 0, 246, 229, 0, 0,
	0, 244, 199, 271, 237, 276, 262, 284, 240, 238,
	142, 263, 169, 210, 152, 153, 165, 171, 173, 175,
	176, 219, 220, 232, 251, 264, 265, 266, 168, 161,
	245, 162, 185, 163, 143, 253, 164, 144, 233, 269,
	0, 181, 241, 206, 145, 205, 234, 268, 267, 292,
	298, 299, 302, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 179, 0, 280, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 221, 296, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 190, 231, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 278, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 182, 0, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 184, 0, 186, 158, 230,
	180, 287, 193, 0, 222, 189, 254, 194, 200, 242,
	286, 228, 247, 156, 277, 255, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 198, 0, 239, 177, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 1226, 0, 0, 293, 294,
	295, 279, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 0, 0, 197, 0, 0,
	0, 256, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 102, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 261, 275, 155, 252,
	288, 160, 259, 151, 226, 248, 0, 0, 148, 273,
	258, 208, 191, 192, 147, 0, 243, 170, 183, 167,
	224, 0, 0, 300, 166, 291, 0, 283, 150, 0,
	282, 223, 270, 274, 209, 203, 149, 272, 207, 202,
	195, 174, 187, 235, 201, 236, 188, 213, 212, 214,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 0, 0, 0, 0, 0, 0, 260, 0, 0,
	196, 0, 0, 0, 301, 0, 246, 229, 0, 0,
	0, 244, 199, 271, 237, 276, 262, 284, 240, 238,
	142, 263, 169, 210, 152, 153, 165, 171, 173, 175,
	176, 219, 220, 232, 251, 264, 265, 266, 168, 161,
	245, 162, 185, 163, 143, 253, 164, 144, 233, 269,
	0, 181, 241, 206, 145, 205, 234, 268, 267, 292,
	298, 299, 302, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 179, 0, 280, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 221, 296, 0, 0, 0, 0, 249,
	0, 0, 0, 0, 0, 190, 231, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 278, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 0, 0, 0,
	289, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 182, 0, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 184, 0, 186, 158, 230,
	180, 287, 193, 0, 222, 189, 254, 194, 200, 242,
	286, 228, 247, 156, 277, 255, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 198, 0, 239, 177, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 227, 0, 0, 293, 294,
	295, 279, 0, 0, 0, 0, 0, 172, 0, 0,
	197, 0, 0, 0, 256, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 102, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 157, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 146, 261,
	275, 155, 252, 288, 160, 259, 151, 226, 248, 0,
	0, 148, 273, 258, 208, 191, 192, 147, 0, 243,
	170, 183, 167, 224, 0, 0, 300, 166, 291, 0,
	283, 150, 0, 282, 223, 270, 274, 209, 203, 149,
	272, 207, 202, 195, 174, 187, 235, 201, 236, 188,
	213, 212, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 0, 0, 1211, 0, 0, 0,
	260, 0, 0, 196, 0, 0, 0, 301, 0, 246,
	229, 0, 0, 0, 244, 199, 271, 237, 276, 262,
	284, 240, 238, 142, 263, 169, 210, 152, 153, 165,
	171, 173, 175, 176, 219, 220, 232, 251, 264, 265,
	266, 168, 161, 245, 162, 185, 163, 143, 253, 164,
	144, 233, 269, 0, 181, 241, 206, 145, 205, 234,
	268, 267, 292, 298, 299, 302, 0, 303, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 179, 0, 280, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 221, 296, 0, 0,
	0, 0, 249, 0, 0, 0, 0, 0, 190, 231,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 278, 290, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 281,
	0, 0, 0, 289, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 182, 0, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 184, 0,
	186, 158, 230, 180, 287, 193, 0, 222, 189, 254,
	194, 200, 242, 286, 228, 247, 156, 277, 255, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 198, 0,
	239, 177, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 138, 139, 140, 227, 0,
	0, 293, 294, 295, 279, 0, 0, 0, 0, 0,
	172, 0, 0, 197, 0, 0, 0, 256, 211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 102, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 157, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 146, 261, 275, 155, 252, 288, 160, 259, 151,
	226, 248, 0, 0, 148, 273, 258, 208, 191, 192,
	147, 0, 243, 170, 183, 167, 224, 0, 0, 300,
	166, 291, 0, 283, 150, 0, 282, 223, 270, 274,
	209, 203, 149, 272, 207, 202, 195, 174, 187, 235,
	201, 236, 188, 213, 212, 214, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 0, 0, 0,
	0, 0, 0, 260, 0, 0, 196, 0, 0, 0,
	301, 0, 246, 229, 0, 0, 0, 244, 199, 271,
	237, 276, 262, 284, 240, 238, 142, 263, 169, 210,
	152, 153, 165, 171, 173, 175, 176, 219, 220, 232,
	251, 264, 265, 266, 168, 161, 245, 162, 185, 163,
	143, 253, 164, 144, 233, 269, 0, 181, 241, 206,
	145, 205, 234, 268, 267, 292, 298, 299, 302, 0,
	303, 304, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 297, 179, 0, 280,
	0, 225, 0, 0, 0, 0, 0, 0, 0, 221,
	296, 0, 0, 0, 0, 249, 0, 0, 0, 0,
	0, 190, 231, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 278, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 0, 0, 0, 289, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 182, 0, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	178, 184, 0, 186, 158, 230, 180, 287, 193, 0,
	222, 189, 254, 194, 200, 242, 286, 228, 247, 156,
	277, 255, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 0, 0, 141,
	0, 198, 0, 239, 177, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 227, 0, 0, 293, 294, 295, 279, 0, 0,
	0, 0, 0, 172, 0, 0, 197, 0, 0, 0,
	256, 211, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 261, 275, 155, 252, 288,
	160, 259, 151, 226, 248, 0, 0, 148, 273, 258,
	208, 191, 192, 147, 0, 243, 170, 183, 167, 224,
	0, 0, 300, 166, 291, 0, 283, 150, 0, 282,
	223, 270, 274, 209, 203, 149, 272, 207, 202, 195,
	174, 187, 235, 201, 236, 188, 213, 212, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	0, 0, 0, 0, 0, 0, 260, 0, 0, 196,
	0, 0, 0, 301, 0, 246, 229, 0, 0, 0,
	244, 199, 271, 237, 276, 262, 284, 328, 238, 142,
	263, 169, 210, 152, 153, 165, 171, 173, 175, 176,
	219, 220, 232, 251, 264, 265, 266, 168, 161, 245,
	162, 185, 163, 143, 253, 164, 144, 233, 269, 0,
	181, 241, 206, 145, 205, 234, 268, 267, 292, 298,
	299, 302, 0, 303, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	179, 0, 280, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 221, 296, 0, 0, 0, 0, 249, 0,
	0, 0, 0, 0, 190, 231, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 278, 290, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 329, 281, 0, 0, 0, 289,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	182, 0, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 184, 0, 186, 158, 230, 180,
	287, 193, 0, 222, 189, 254, 194, 200, 242, 286,
	228, 247, 156, 277, 255, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 198, 0, 239, 177, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 227, 0, 0, 293, 294, 295,
	279, 0, 0, 0, 0, 99, 172, 0, 0, 197,
	0, 0, 0, 256, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 261, 275,
	155, 252, 288, 160, 259, 151, 226, 248, 0, 0,
	148, 273, 258, 208, 191, 192, 147, 0, 243, 170,
	183, 167, 224, 0, 0, 300, 166, 291, 0, 283,
	150, 0, 282, 223, 270, 274, 209, 203, 149, 272,
	207, 202, 195, 174, 187, 235, 201, 236, 188, 213,
	212, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 260,
	0, 0, 196, 0, 0, 0, 301, 0, 246, 229,
	0, 0, 0, 244, 199, 271, 237, 276, 262, 284,
	240, 238, 142, 263, 169, 210, 152, 153, 165, 171,
	173, 175, 176, 219, 220, 232, 251, 264, 265, 266,
	168, 161, 245, 162, 185, 163, 143, 253, 164, 144,
	233, 269, 0, 181, 241, 206, 145, 205, 234, 268,
	267, 292, 298, 299, 302, 0, 303, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 297, 179, 0, 280, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 221, 296, 0, 0, 0,
	0, 249, 0, 0, 0, 0, 0, 190, 231, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 278, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 0,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 182, 0, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 184, 0, 186,
	158, 230, 180, 287, 193, 0, 222, 189, 254, 194,
	200, 242, 286, 228, 247, 156, 277, 255, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 198, 0, 239,
	177, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 138, 139, 140, 227, 0, 0,
	293, 294, 295, 279, 0, 0, 0, 0, 0, 172,
	0, 0, 197, 0, 0, 0, 256, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 261, 275, 155, 252, 288, 160, 259, 151, 226,
	248, 0, 0, 148, 273, 258, 208, 191, 192, 147,
	0, 243, 170, 183, 167, 224, 0, 0, 300, 166,
	291, 0, 283, 150, 0, 282, 223, 270, 274, 209,
	203, 149, 272, 207, 202, 195, 174, 187, 235, 201,
	236, 188, 213, 212, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 196, 0, 0, 0, 301,
	0, 246, 229, 0, 0, 0, 244, 199, 271, 237,
	276, 262, 284, 240, 238, 142, 263, 169, 210, 152,
	153, 165, 171, 173, 175, 176, 219, 220, 232, 251,
	264, 265, 266, 168, 161, 245, 162, 185, 163, 143,
	253, 164, 144, 233, 269, 0, 181, 241, 206, 145,
	205, 234, 268, 267, 292, 298, 299, 302, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 179, 0, 280, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 221, 296,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	190, 231, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 278, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 182, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	184, 0, 186, 158, 230, 180, 287, 193, 0, 222,
	189, 254, 194, 200, 242, 286, 228, 247, 156, 277,
	255, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	198, 0, 239, 177, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
	227, 0, 0, 293, 294, 295, 279, 1267, 0, 0,
	0, 0, 172, 0, 0, 197, 0, 0, 0, 256,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	823, 824, 825, 1269, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 261, 275, 155, 252, 288, 160,
	259, 151, 226, 248, 0, 0, 148, 273, 258, 208,
	191, 192, 147, 0, 243, 170, 183, 167, 224, 0,
	0, 300, 166, 291, 0, 283, 150, 0, 282, 223,
	270, 274, 209, 203, 149, 272, 207, 202, 195, 174,
	187, 235, 201, 236, 188, 213, 212, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 285, 0,
	0, 0, 0, 0, 0, 260, 0, 0, 196, 0,
	0, 0, 301, 0, 246, 229, 0, 0, 0, 244,
	199, 271, 237, 276, 262, 284, 240, 238, 142, 263,
	169, 210, 152, 153, 165, 171, 173, 175, 176, 219,
	220, 232, 251, 264, 265, 266, 168, 161, 245, 162,
	185, 163, 143, 253, 164, 144, 233, 269, 0, 181,
	241, 206, 145, 205, 234, 268, 267, 292, 298, 299,
	302, 0, 303, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 179,
	0, 280, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 221, 296, 0, 0, 0, 0, 249, 0, 0,
	0, 0, 0, 190, 231, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	278, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 182,
	0, 159, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 184, 0, 186, 158, 230, 180, 287,
	193, 0, 222, 189, 254, 194, 200, 242, 286, 228,
	247, 156, 277, 255, 204, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 172,
	0, 0, 197, 0, 0, 0, 256, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 198, 0, 239, 177, 823, 824, 825,
	1269, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 294, 295, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	146, 261, 275, 155, 252, 288, 160, 259, 151, 226,
	248, 0, 0, 148, 273, 258, 208, 191, 192, 147,
	0, 243, 170, 183, 167, 224, 0, 0, 300, 166,
	291, 0, 283, 150, 0, 282, 223, 270, 274, 209,
	203, 149, 272, 207, 202, 195, 174, 187, 235, 201,
	236, 188, 213, 212, 214, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 0, 0, 0, 0,
	0, 0, 260, 0, 0, 196, 0, 0, 0, 301,
	0, 246, 229, 0, 0, 0, 244, 199, 271, 237,
	276, 262, 284, 240, 238, 142, 263, 169, 210, 152,
	153, 165, 171, 173, 175, 176, 219, 220, 232, 251,
	264, 265, 266, 168, 161, 245, 162, 185, 163, 143,
	253, 164, 144, 233, 269, 0, 181, 241, 206, 145,
	205, 234, 268, 267, 292, 298, 299, 302, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 179, 0, 280, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 221, 296,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	190, 231, 0, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 278, 290, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 289, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 182, 0, 159, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	184, 0, 186, 158, 230, 180, 287, 193, 0, 222,
	189, 254, 194, 200, 242, 286, 228, 247, 156, 277,
	255, 204, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 197,
	0, 0, 0, 256, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	198, 0, 239, 177, 823, 824, 825, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 295, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 261, 275,
	155, 252, 288, 160, 259, 151, 226, 248, 0, 0,
	148, 273, 258, 208, 191, 192, 147, 0, 243, 170,
	183, 167, 224, 0, 0, 300, 166, 291, 0, 283,
	150, 0, 282, 223, 270, 274, 209, 203, 149, 272,
	207, 202, 195, 174, 187, 235, 201, 236, 188, 213,
	212, 214, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 0, 0, 0, 0, 0, 0, 260,
	0, 0, 196, 0, 0, 0, 301, 0, 246, 229,
	0, 0, 0, 244, 199, 271, 237, 276, 262, 284,
	240, 238, 142, 263, 169, 210, 152, 153, 165, 171,
	173, 175, 176, 219, 220, 232, 251, 264, 265, 266,
	168, 161, 245, 162, 185, 163, 143, 253, 164, 144,
	233, 269, 0, 181, 241, 206, 145, 205, 234, 268,
	267, 292, 298, 299, 302, 0, 303, 304, 906, 907,
	908, 905, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 297, 179, 0, 280, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 221, 296, 0, 0, 0,
	0, 249, 0, 0, 0, 0, 0, 190, 231, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 1733,
	0, 0, 0, 257, 278, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 0,
	0, 1348, 289, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 182, 0, 159, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 184, 0, 186,
	158, 230, 180, 287, 193, 0, 222, 189, 254, 194,
	200, 242, 286, 228, 247, 156, 277, 255, 204, 0,
	0, 0, 0, 0, 0, 0, 1733, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1721, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 198, 0, 239,
	177, 0, 1740, 1744, 1746, 1748, 1750, 1751, 1753, 0,
	1757, 1754, 1755, 1756, 0, 0, 1735, 1736, 1737, 1738,
	1719, 1720, 1741, 0, 1722, 0, 1723, 1724, 1725, 1726,
	1727, 1728, 1729, 1730, 1731, 1732, 1739, 0, 0, 0,
	293, 294, 295, 279, 1743, 1745, 1747, 1749, 1752, 0,
	1344, 0, 1341, 0, 0, 0, 1343, 1340, 1342, 1346,
	1347, 0, 1721, 0, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1734, 1740,
	1744, 1746, 1748, 1750, 1751, 1753, 0, 1757, 1754, 1755,
	1756, 0, 0, 1735, 1736, 1737, 1738, 1719, 1720, 1741,
	0, 1722, 0, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1739, 96, 0, 27, 86, 69, 0,
	0, 1743, 1745, 1747, 1749, 1752, 0, 0, 0, 91,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1734, 0, 51, 1969, 0,
	0, 0, 93, 0, 0, 0, 0, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1351, 1352,
	1353, 1354, 1355, 1356, 1349, 1350, 0, 1224, 348, 0,
	347, 351, 343, 0, 0, 1711, 1712, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 1969, 0, 0,
	2350, 0, 0, 0, 358, 0, 0, 0, 0, 0,
	0, 1951, 0, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 90, 0, 0, 1224, 0, 0, 0,
	361, 0, 0, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2051, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1951, 0, 0, 0, 348, 0, 347, 351, 343, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 0, 0, 68, 85, 94, 1742, 49,
	358, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 79, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 361, 0, 0, 362,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1959, 0, 0, 0, 0, 0, 0, 341,
	340, 344, 0, 0, 0, 1742, 0, 346, 0, 0,
	81, 82, 1948, 0, 0, 0, 1950, 1952, 1954, 350,
	1956, 1957, 1958, 1960, 1961, 1962, 1964, 1965, 1966, 1967,
	1955, 0, 0, 342, 0, 0, 0, 334, 0, 0,
	0, 1959, 0, 59, 0, 0, 0, 83, 0, 60,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1970, 1948, 0, 0, 0, 1950, 1952, 1954, 0, 1956,
	1957, 1958, 1960, 1961, 1962, 1964, 1965, 1966, 1967, 0,
	0, 0, 0, 0, 0, 341, 340, 344, 0, 0,
	0, 0, 0, 346, 1968, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 350, 0, 0, 0, 1970,
	0, 1947, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 345, 349, 352, 0, 353, 354, 0, 0, 355,
	356, 357, 0, 0, 359, 360, 0, 0, 1963, 0,
	0, 0, 0, 1968, 0, 1953, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1947, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1963, 0, 0,
	0, 0, 0, 0, 1953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 345, 349, 352,
	0, 353, 354, 0, 0, 355, 356, 357, 0, 0,
	359, 360,
}

var yyPact = [...]int{
	21014, -1000, -301, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 18812, -1000, -1000,
	1416, -1000, 7921, 19265, 58, 19265, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 267,
	-1000, 18359, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 226,
	21088, 144, -1000, 1890, -1000, -1000, -1000, -1000, 196, 324,
	17906, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 195, 14, 324, 389, 395, 397,
	397, 9280, 1890, 180, 16, -1000, 532, 21014, 206, 19265,
	-1000, 531, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1890, 1890,
	19265, -74, 673, -1000, 227, 193, 221, 527, -1000, -1000,
	-1000, -1000, 1927, -1000, 19265, 1584, 19265, -1000, 907, 179,
	21174, 1776, 1411, 433, 1689, -1000, -1000, 1670, -1000, 18,
	-18, 115, -1000, -1000, 174, -1000, -1000, -1000, -1000, -1000,
	56, -1000, 3, -1000, -3, -1000, -1000, -1000, -118, -1000,
	-1000, -1000, -1000, -180, 1770, 1849, 1542, 1885, 1840, 1838,
	1831, 1819, 15, 212, 212, 212, 253, 212, 265, -1000,
	-1000, -1000, -1000, -1000, -1000, 329, -1000, -1000, -1000, -1000,
	1479, 19265, -1000, 1546, 598, 598, 682, 191, -1000, -1000,
	-112, -142, 598, 598, -142, 21, -1000, 1824, 1822, -1000,
	-1000, -1000, -1000, -1000, -1000, 226, 226, 245, -1000, -179,
	-1000, 382, -1000, 349, -1000, 275, 170, 1484, 719, -1000,
	650, 19265, 19265, 19265, 650, 650, 11104, 10651, 471, -1000,
	1849, 1542, -1000, 1377, 1287, 1542, 226, 226, 226, 226,
	226, 226, 19265, 5593, 5593, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 220, 1669, -1000, 19265, 1849, 1770, 1849,
	-1000, 449, 884, 1088, -1000, -1000, 227, 1363, -1000, 622,
	-1000, -1000, -1000, -1000, 19265, 188, -1000, 1065, 1659, -1000,
	270, 1398, 1450, -1000, 62, 8006, 15181, 907, 15181, 19265,
	-1000, -1000, -1000, -1000, -131, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10, -1000, -1000, -290, 1770,
	6057, -1000, -1000, 6057, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 251, 212, -1000, 1131, 699, 15181, 907, 928,
	19265, 212, 245, -1000, 19265, 1479, 1798, 19265, 1910, 6985,
	1910, 19265, -1000, -1000, 598, 598, -1000, 682, 682, -1000,
	-1000, -137, 1910, 1910, -128, 19265, 212, -1000, -1000, 1131,
	15181, 14728, -1000, -169, 379, 359, 365, -1000, -1000, 1938,
	-1000, -1000, 1436, 304, 10198, 234, 15181, 3731, -1000, -1000,
	650, 650, 650, 3731, 3731, 546, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 19265, 1770, -1000, -1000, -1000, -1000, -1000,
	1131, 15181, 907, 19265, 19265, 20472, -1000, 1445, -1000, -1000,
	8827, 441, 6057, 849, 1658, -1000, -1000, 1654, 1653, 1652,
	1651, 1649, 1648, 1647, -1000, 1601, -1000, -1000, 1641, 1639,
	1635, 1634, -1000, -1000, -1000, -1000, -1000, -1000, 1631, -1000,
	-1000, -1000, 1628, 1601, -1000, -1000, 1627, 1626, 1625, 1622,
	1621, -1000, -1000, -1000, -1000, -1000, -1000, 1086, 1085, 947,
	-1000, -1000, -1000, -1000, 3267, 6985, 6985, 6985, 6985, -1000,
	-1000, 1586, 6057, 1617, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7449, -1000, 1616, 1614, 1613, 1610, 1604, 1601, 1600,
	1084, 1599, 1596, 1595, 6985, 1594, 1593, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1445, -1000, -287,
	-1000, 9745, 19265, 19265, -1000, 1770, -1000, 1770, 2368, -1000,
	1836, -1000, 227, 95, -1000, -1000, -1000, -1000, -1000, -1000,
	432, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1473, -1000, 19265, -1000, -1000, 62, 15181, 625, -1000, -1000,
	-1000, -1000, -1000, -1000, 153, -1000, -1000, 122, -1000, 249,
	-49, 1356, -1000, -1000, 1760, 123, 61, 1066, -1000, 1103,
	426, 1465, -1000, 853, 17453, 19265, -32, -1000, 1774, 1434,
	-1000, 1436, 1551, -1000, -1000, -1000, 1757, 19265, 17000, -1000,
	1592, 1351, -1000, -1000, 6057, -1000, -1000, 1910, 1910, 1910,
	598, 20472, 682, 19265, 682, -1000, -1000, 682, -1000, 422,
	19265, -32, 1424, 1913, 1427, -1000, -1000, -1000, -1000, 1794,
	19718, 180, -1000, -1000, 374, 346, 355, 907, 248, -1000,
	-1000, 1436, -1000, -1000, -1000, 1590, 670, -1000, -1000, 6985,
	-1000, 748, -1000, 3731, 3731, 3731, -1000, -1000, 12916, -1000,
	-1000, -1000, 1459, 1436, 1686, 1456, -1000, -1000, -1000, -1000,
	1910, 5593, -1000, 14728, -1000, 6057, 6057, 6057, 6057, -1000,
	16540, -1000, 16087, -1000, 394, 6521, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 6057, 1804, 1804, 1804, 6057, 695, 6057,
	6057, -1000, 790, 8045, 1804, 1804, 1804, 1804, 1804, -1000,
	2795, 1804, 1804, 1804, 1804, -1000, -1000, 6985, 6985, 6985,
	6985, 6985, 6985, 6985, 6985, 6985, 6985, 6985, 6985, 1585,
	647, 6985, 6985, 6985, 1287, 1800, 1455, -1000, -1000, -1000,
	-1000, -1000, 688, 748, 6057, 20666, 6057, 6057, 6057, -1000,
	1373, 1371, -1000, -1000, 6057, -1000, 6057, 6985, 6057, -1000,
	1804, 1061, 1910, 1414, -1000, 1589, -1000, 1349, 1737, -1000,
	420, 1454, -1000, 666, 1347, -1000, -1000, -1000, -1000, 419,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -75, -1000, -1000,
	19265, 1065, 1345, 625, 1409, 247, 416, 413, -1000, 15181,
	13, 15181, -1000, 15181, -1000, 184, -1000, 19265, 264, -128,
	1048, -304, -154, 6057, 6057, 19265, 6057, -1000, -1000, -1000,
	1546, 696, 1588, -88, 642, -1000, 157, 15181, 1685, 127,
	-1000, 1757, -1000, 607, -1000, 1587, 19265, 1412, -1000, 412,
	21014, -1000, 19265, 748, -1000, -1000, -1000, 1910, -1000, 598,
	-1000, 598, 682, 19265, -1000, -1000, -88, 335, 155, 19265,
	14728, 14728, 14728, 14728, -1000, 1729, 1706, -1000, 1703, 1702,
	1710, 19265, 14728, 19265, -1000, -1000, -1000, 20095, -1000, -1000,
	-1000, -1000, 1365, 1890, -1000, -1000, -1000, 343, 1436, 15181,
	1038, 234, -1000, -1000, -1000, -1000, -1000, 19265, 19265, 1908,
	-1000, 1435, 1888, -1000, 726, 726, 694, -1000, -1000, 411,
	-1000, -1000, 320, -1000, -1000, -1000, -1000, -1000, 1586, -1000,
	-1000, -1000, 1359, 1403, 748, 6057, -1000, -1000, 6057, 6057,
	1153, 6057, 1357, 1342, 1340, -1000, 1353, 1926, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6057, 6057, 6057,
	6057, 6057, 1140, 5129, -1000, -1000, -1000, 6057, 6057, 6057,
	6057, 710, 929, -1000, 616, 616, 551, 551, 551, 551,
	551, 783, 783, -1000, -1000, -1000, 3267, 1585, 6985, 6985,
	6985, 228, 1862, 1805, -1000, 6057, 679, -1000, 6057, 796,
	-1000, 1329, 1074, 1327, 1306, -1000, -1000, 1124, 1277, 1701,
	1269, 6057, 1428, 1908, -287, 4659, 214, 19265, -287, 19265,
	19265, 4659, -1000, 19265, 2368, 883, -1000, -1000, -1000, 1917,
	907, 570, 613, -1000, -2, -1000, 152, 261, 1036, -1000,
	19265, -1000, -101, -86, 662, 1015, -102, -95, 748, 748,
	405, -1000, 1793, 1772, 8374, 854, -1000, -1000, 1033, -1000,
	1116, -1000, 19265, -1000, -1000, -1000, -1000, -1000, 642, 642,
	642, 8374, 206, 1296, 404, 14728, 19265, -1000, 14275, 1264,
	-1000, -1000, 1910, 1910, 598, -1000, 854, 254, 335, -1000,
	-1000, -1000, 298, 6, 882, 235, 1116, 1376, -1000, 654,
	1675, 1684, 1675, -1000, -1000, -1000, -1000, 1700, -1000, 1668,
	-1000, -1000, 1376, -1000, 1546, -1000, -1000, -1000, 1409, 1250,
	-1000, -1000, -1000, -1000, 1889, 1884, 15634, -1000, -1000, -1000,
	-1000, -1000, 6057, 1713, 1618, 1582, 20774, 1336, -1000, -1000,
	-1000, -1000, 6057, 1549, 1539, 1535, 1529, 1457, -1000, 6057,
	6057, 895, 1452, 1415, 1407, 1301, 1315, -1000, 228, 1862,
	899, -1000, 6985, 6985, 1297, 675, -1000, 6057, 717, 693,
	11557, -1000, 6057, -1000, -1000, -1000, 11557, -1000, 6985, -1000,
	1249, 1032, 1889, -1000, 1245, 1426, -1000, -287, -1000, -1000,
	1414, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15181, 150, -1000, -1000, -1000, -1000, -1000, -1000, -62, -1000,
	-128, 244, -111, -86, -1000, 1882, -91, 1875, 1872, 1031,
	118, -1000, 652, -294, -79, 1867, 1866, 19265, 180, 19265,
	1238, 1421, -1000, -1000, -1000, 20851, 287, -1000, 19265, 725,
	453, 212, 453, 722, 1583, -1000, -1000, -1000, 1026, -52,
	-1000, 335, -1000, 1580, 11557, 12010, 1025, 1218, 19718, 14728,
	14275, 1175, -1000, 402, -1000, -1000, -1000, -1000, 1910, -1000,
	-1000, 1020, 1019, -1000, 871, -1000, -1000, 870, 398, -40,
	-1000, -1000, -1000, -1000, -1000, 1891, 19265, 4659, -1000, -1000,
	6057, 1578, -1000, 6057, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6057, 6057, -1000, -1000, 748, -1000, -1000, -1000, 1206,
	-1000, 330, 330, -19, -1000, -1000, -1000, 1517, -1000, 1557,
	1557, 1517, 1517, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1577, 1569, -1000, 1517, 1548, 1548, 1517, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1567, 1567, 1568, 1567, -1000, 1237,
	-1000, -1000, -1000, -1000, -1000, 1230, 1219, 6057, -1000, -1000,
	-1000, -1000, -1000, -1000, 6985, -1000, -1000, -1000, -1000, 748,
	6057, 1201, -1000, 1517, 1557, -1000, 1517, 1548, 1517, 330,
	330, 1172, 1063, 1170, 1673, -1000, 1166, -1000, -1000, 4659,
	1414, 1409, -1000, -1000, -1000, 1547, 864, -79, 1856, -1000,
	931, 1855, 931, 931, 113, -128, 1015, 1014, -296, 1013,
	-1000, 1853, 1004, 931, -1000, 1546, 1204, 8374, 948, -1000,
	-1000, 19265, 19265, -1000, 19265, 19265, 212, 6057, -1000, -1000,
	175, 254, 13369, -1000, -1000, -1000, -1000, -1000, 10, 1910,
	1175, 402, -1000, -1000, 560, -1000, -1000, -1000, 30, -1000,
	-1000, 855, 268, -1000, 1849, -1000, -1000, 748, 19265, 748,
	748, 1403, -1000, -1000, -1000, -1000, -1000, -29, -1000, -1000,
	-1000, -1000, 863, -1000, 860, -1000, -1000, -1000, 1002, 1002,
	-1000, -1000, 859, -1000, -1000, -1000, 857, -1000, -1000, 846,
	-1000, -1000, -1000, -1000, 1200, -1000, 748, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6057, -1000, -1000,
	-1000, -1000, 1813, 12463, -108, -1000, 1001, -1000, -1000, 931,
	-1000, -1000, -128, 1000, -1000, -1000, -1000, -298, 845, -1000,
	983, -93, -1000, 1791, 205, 21111, -1000, 642, 642, 606,
	642, 642, 642, 642, 141, 136, 642, 642, 642, 642,
	642, 642, 642, 642, 642, 642, 642, 642, 642, 642,
	1538, -1000, -1000, 948, -1000, -1000, 716, 6985, -1000, -1000,
	962, 12010, 472, 476, 1534, -1000, 116, 713, 707, -1000,
	19265, -1000, 1532, 1531, 69, 1523, -1000, 1521, 1518, 19265,
	1185, 257, 961, -1000, 1305, -1000, 1517, 6057, -1000, 1891,
	-1000, -1000, -1000, 27, -1000, -1000, -1000, 1300, -1000, -1000,
	1161, 1157, 1290, -1000, 1285, 1145, 1283, 1268, -1000, 1129,
	-1000, 19265, -1000, 1257, -1000, -1000, -1000, 400, -1000, -1000,
	-1000, -1000, 651, -1000, 1514, -1000, -1000, 1852, 180, -1000,
	1851, 1204, -1000, 844, 839, 642, 642, 831, 957, 955,
	954, 642, 642, 817, 953, 20095, 816, 812, 798, 842,
	939, 444, 836, 821, 800, 19265, 1511, 917, -1000, -1000,
	1862, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 795, 1510, -1000, -1000, 1508, 13369, 105, 105,
	13369, 13369, 13369, 1507, 278, -1000, -63, -1000, -1000, 13369,
	1769, 1022, 1849, -1000, -1000, -1000, -1000, -1000, 936, -1000,
	-1000, -1000, 794, -1000, 788, -1000, 1395, -1000, 649, -1000,
	13822, 19265, 932, 19265, 931, -1000, 90, -1000, -1000, -1000,
	11557, 11557, -1000, -1000, -1000, -1000, 923, 920, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	151, 19265, 1248, -1000, 644, 1139, 6057, -233, 13369, 1232,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1227, 1198, 1196,
	13369, -1000, -1000, -1000, 109, -1000, 125, -1000, -1000, 1769,
	-1000, -1000, 1137, 934, 19265, 4195, -1000, 399, -309, 1189,
	-1000, -1000, 82, 185, 176, -1000, 250, -1000, -1000, -1000,
	-1000, -1000, -1000, 168, 1187, -1000, 917, 909, -1000, 992,
	1680, -1000, 9, 1183, -1000, -1000, -1000, -1000, 1181, -1000,
	-1000, 642, 903, 53, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 748, 19265, -128, -1000, 19265, 80, 784, 6985, 1504,
	6985, 1503, 99, 1500, -1000, -1000, -1000, -1000, -1000, 278,
	-1000, -1000, 1679, 1677, 1914, -1000, -1000, -1000, -1000, 125,
	125, 125, 125, -8, 773, -1000, 928, -1000, -1000, -1000,
	1495, 1841, -1000, 1655, 19265, 1059, 19265, 1493, 621, 6985,
	-1000, -1000, 1931, -1000, 1915, 434, 434, -1000, -1000, -1000,
	-1000, 203, 96, -1000, 1169, -1000, 1160, 19265, 768, 1027,
	-1000, -1000, -1000, 801, 120, -1000, 1156, -1000, 1115, 71,
	-1000, -1000, 1149, -1000, -1000, -1000, -1000, -1000, -1000, 203,
	1708, -1000, 742, -1000, -1000, 21062, 200, -1000, -1000, 21062,
	79, -1000, 190, -1000, -1000, 1144, -1000, 1098, 1491, -1000,
	79, 1204, 6057, -1000, 1204, 1136, -1000,
}

var yyPgo = [...]int{
	0, 122, 2263, 179, 137, 131, 178, 2262, 1825, 1821,
	2261, 2255, 2254, 2252, 2251, 2250, 2249, 2248, 2247, 2246,
	2245, 2243, 2242, 2241, 2240, 2239, 174, 2238, 2237, 2236,
	2235, 2232, 2231, 2230, 2229, 2228, 2227, 2223, 2222, 2221,
	127, 2220, 1819, 2218, 2217, 2216, 2215, 2213, 159, 2212,
	2211, 2210, 2209, 2208, 2207, 2206, 2205, 2204, 2203, 2201,
	2200, 2199, 168, 57, 18, 44, 114, 196, 41, 197,
	193, 145, 83, 129, 167, 118, 2198, 2196, 113, 24,
	134, 2195, 40, 32, 35, 191, 105, 54, 65, 97,
	2193, 2192, 91, 2190, 2189, 102, 2188, 61, 2187, 77,
	47, 96, 25, 2186, 2185, 2184, 85, 2183, 2182, 2178,
	2177, 93, 2176, 63, 51, 2175, 2174, 2173, 2171, 2170,
	26, 2169, 48, 2166, 2165, 2164, 2163, 2159, 2158, 2157,
	12, 13, 16, 2156, 2155, 15, 2, 2154, 160, 80,
	86, 111, 2153, 365, 2152, 2151, 2150, 117, 2149, 173,
	2146, 2145, 2144, 2143, 2140, 9, 2139, 53, 2137, 2136,
	64, 2133, 2130, 76, 2129, 2128, 2127, 104, 31, 50,
	103, 2123, 2122, 79, 158, 11, 39, 0, 151, 43,
	2120, 2119, 2118, 192, 154, 155, 2117, 98, 217, 130,
	2116, 2115, 49, 95, 70, 2114, 2111, 109, 73, 7,
	2108, 119, 2105, 186, 90, 2100, 108, 2099, 143, 1,
	107, 2096, 163, 2095, 2094, 2092, 126, 2091, 2089, 66,
	124, 2088, 2087, 2086, 23, 2085, 37, 22, 2084, 99,
	175, 2083, 149, 136, 140, 87, 165, 69, 115, 776,
	112, 89, 14, 2082, 162, 2081, 247, 166, 146, 2080,
	2079, 171, 318, 156, 2078, 141, 8, 2077, 2075, 10,
	2074, 19, 2073, 2072, 2071, 2070, 6, 2069, 2068, 2067,
	3, 5, 2066, 4, 123, 55, 78, 2065, 67, 68,
	2064, 2063, 2061, 2060, 2059, 254, 2058, 2057, 2056, 2055,
	2053, 2051, 2049, 88, 2048, 2047, 2045, 2044, 62, 2043,
	2041, 2040, 2039, 84, 2037, 2036, 27, 2035, 60, 2034,
	2033, 2032, 29, 144, 2031, 2029, 30, 2028, 2027, 20,
	21, 2022, 2006, 58, 46, 38, 81, 82, 2005, 17,
	1997, 110, 1996, 1995, 148, 1994, 106, 1993, 120, 169,
	226, 1992, 157, 1990, 1989, 1988, 1987, 1984, 1983, 1981,
	772, 1980, 1966, 170, 56, 164, 1963, 94, 150, 1956,
	116, 101, 59, 1955, 1952, 1950, 1949, 1947, 152, 1946,
}

//line mysql_sql.y:7176
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.LoadParameter {
	v, _ := st.union.(*tree.LoadParameter)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 365, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 56, 322, 322, 321, 321, 320,
	320, 319, 319, 319, 318, 318, 318, 317, 317, 316,
	316, 315, 315, 313, 313, 314, 312, 311, 311, 309,
	309, 307, 307, 308, 308, 302, 302, 305, 305, 303,
	303, 303, 303, 306, 301, 301, 55, 55, 55, 241,
	241, 54, 54, 255, 255, 255, 255, 255, 253, 253,
	253, 253, 253, 253, 252, 252, 251, 251, 256, 256,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 49, 49, 49, 49, 52, 53, 249,
	249, 249, 249, 249, 250, 250, 250, 50, 51, 51,
	240, 240, 245, 245, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 248, 248, 248, 247,
	247, 246, 246, 43, 43, 43, 46, 45, 239, 239,
	239, 239, 239, 239, 239, 239, 44, 44, 44, 44,
	44, 44, 41, 41, 41, 41, 41, 40, 40, 42,
	42, 238, 238, 237, 59, 59, 59, 59, 59, 59,
	59, 58, 58, 61, 61, 60, 48, 48, 48, 48,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 345,
	345, 345, 347, 347, 181, 182, 366, 180, 180, 180,
	341, 341, 342, 343, 344, 344, 344, 57, 7, 7,
	38, 39, 364, 364, 285, 285, 194, 194, 195, 195,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 288, 289, 190, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	30, 30, 37, 367, 367, 367, 35, 36, 284, 284,
	284, 34, 33, 32, 31, 31, 29, 29, 28, 28,
	187, 187, 189, 189, 185, 368, 368, 261, 261, 188,
	188, 27, 27, 186, 186, 164, 184, 184, 184, 6,
	10, 10, 10, 10, 10, 10, 10, 15, 17, 236,
	236, 234, 16, 13, 12, 11, 14, 5, 5, 5,
	5, 8, 8, 9, 73, 73, 101, 101, 354, 354,
	350, 350, 351, 351, 351, 352, 352, 353, 353, 4,
	292, 292, 292, 292, 292, 292, 330, 330, 330, 331,
	91, 91, 86, 86, 293, 293, 210, 332, 332, 300,
	300, 299, 299, 298, 298, 89, 89, 90, 90, 77,
	77, 62, 62, 304, 304, 304, 304, 310, 310, 282,
	282, 127, 127, 158, 158, 159, 159, 65, 65, 66,
	66, 66, 66, 66, 66, 338, 338, 340, 340, 339,
	88, 88, 84, 84, 85, 85, 85, 83, 83, 82,
	81, 81, 80, 79, 79, 79, 68, 68, 67, 67,
	67, 67, 67, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 69, 69, 346, 346, 346,
	286, 286, 286, 291, 291, 140, 140, 141, 141, 139,
	139, 70, 70, 71, 71, 71, 71, 138, 138, 137,
	72, 72, 78, 74, 74, 76, 76, 76, 76, 148,
	148, 147, 147, 147, 147, 94, 94, 146, 145, 145,
	145, 93, 93, 92, 92, 87, 87, 75, 75, 144,
	369, 369, 142, 173, 173, 173, 179, 179, 172, 172,
	172, 172, 172, 183, 178, 178, 174, 174, 175, 175,
	175, 3, 3, 3, 3, 21, 21, 21, 21, 25,
	25, 348, 348, 18, 355, 358, 356, 359, 359, 359,
	360, 360, 360, 361, 361, 19, 357, 362, 362, 362,
	235, 235, 233, 232, 232, 232, 363, 363, 363, 363,
	176, 176, 20, 229, 229, 230, 231, 231, 223, 223,
	223, 223, 24, 227, 227, 228, 228, 228, 228, 228,
	224, 224, 226, 226, 222, 222, 222, 222, 222, 23,
	221, 221, 219, 219, 217, 217, 218, 218, 216, 216,
	216, 220, 220, 22, 22, 63, 63, 63, 63, 64,
	161, 161, 160, 160, 287, 287, 257, 257, 260, 260,
	267, 267, 268, 268, 266, 266, 273, 273, 272, 272,
	271, 271, 270, 270, 269, 269, 264, 264, 263, 263,
	258, 258, 258, 258, 258, 259, 259, 262, 262, 265,
	265, 118, 118, 119, 119, 119, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 328, 328, 329, 121, 121,
	121, 125, 125, 125, 125, 125, 125, 120, 120, 122,
	122, 102, 102, 100, 100, 95, 95, 96, 96, 97,
	97, 98, 98, 99, 99, 99, 99, 99, 99, 243,
	243, 326, 326, 327, 327, 323, 323, 323, 325, 325,
	325, 325, 325, 324, 324, 103, 156, 156, 156, 177,
	177, 177, 155, 155, 155, 117, 117, 116, 116, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 242, 242, 191, 191, 192, 192, 135, 133,
	133, 134, 134, 134, 134, 131, 132, 130, 130, 130,
	130, 130, 129, 129, 128, 128, 128, 225, 225, 126,
	126, 124, 124, 124, 123, 123, 123, 274, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 202, 202, 207, 207, 337, 337, 336, 104,
	104, 104, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 113, 113, 113, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 297,
	297, 297, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 154, 349, 349, 349, 333, 333,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 152,
	152, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 211, 211, 212, 212, 294, 294,
	294, 294, 294, 294, 295, 295, 296, 296, 296, 296,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 200, 149,
	149, 149, 213, 208, 208, 209, 209, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 205, 205, 205,
	205, 205, 197, 197, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 204, 204, 206, 206, 215, 215, 215,
	214, 214, 214, 214, 214, 214, 214, 115, 115, 115,
	115, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 106, 106, 106, 106, 110, 110, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 111, 111, 111, 111, 109, 109, 109, 109, 109,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 108, 157, 157, 275, 275,
	278, 278, 276, 276, 277, 279, 279, 279, 280, 280,
	280, 281, 281, 281, 283, 283, 163, 163, 163, 169,
	169, 162, 162, 170, 170, 171, 171, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 8, 0, 2, 1, 3, 3,
	3, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 0,
	3, 0, 3, 0, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 8, 5, 7, 0,
	3, 8, 5, 1, 3, 3, 3, 1, 0, 1,
	1, 1, 1, 1, 1, 3, 1, 4, 1, 3,
	1, 2, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 2,
	1, 1, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 3, 6, 3,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 3, 3,
	2, 4, 4, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 2, 2, 0, 4,
	2, 4, 1, 5, 3, 2, 1, 2, 2, 4,
	4, 5, 2, 1, 3, 4, 4, 1, 2, 9,
	7, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 2, 4, 3, 1, 1, 1, 1,
	2, 3, 4, 7, 2, 3, 3, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 1, 1,
	7, 7, 0, 3, 0, 2, 0, 1, 1, 2,
	1, 1, 1, 4, 2, 2, 3, 3, 4, 5,
	3, 4, 4, 2, 2, 2, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 5, 1, 1, 1, 5, 5, 0, 1,
	1, 2, 2, 3, 6, 7, 4, 4, 7, 8,
	0, 2, 0, 2, 2, 1, 1, 1, 1, 0,
	1, 4, 5, 1, 3, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 1,
	3, 1, 4, 6, 4, 4, 3, 1, 1, 2,
	2, 11, 8, 9, 1, 3, 2, 4, 0, 2,
	0, 1, 1, 1, 1, 0, 1, 0, 1, 4,
	2, 1, 5, 4, 4, 2, 0, 1, 3, 3,
	1, 3, 1, 3, 1, 3, 4, 0, 1, 0,
	1, 1, 3, 1, 1, 0, 4, 1, 3, 2,
	1, 0, 8, 0, 4, 7, 4, 0, 2, 0,
	2, 0, 2, 0, 4, 1, 3, 1, 1, 4,
	3, 4, 5, 4, 5, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 2, 0, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 7, 7, 1, 1, 1,
	0, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	2, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 3, 1, 1, 1, 4, 4, 4, 3, 2,
	2, 2, 3, 2, 3, 0, 2, 1, 1, 2,
	2, 0, 1, 2, 4, 1, 3, 1, 4, 3,
	0, 1, 2, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	11, 0, 1, 7, 1, 4, 1, 3, 4, 3,
	0, 1, 1, 0, 2, 9, 1, 0, 2, 2,
	1, 3, 2, 1, 3, 2, 0, 3, 4, 3,
	1, 1, 4, 1, 3, 1, 1, 1, 0, 1,
	1, 1, 11, 0, 2, 3, 2, 3, 1, 1,
	1, 3, 3, 4, 0, 2, 2, 2, 2, 5,
	1, 1, 0, 3, 0, 1, 1, 2, 4, 4,
	4, 0, 1, 10, 9, 3, 7, 11, 6, 5,
	1, 3, 0, 3, 0, 1, 0, 6, 0, 4,
	0, 3, 1, 3, 4, 5, 0, 3, 1, 3,
	2, 3, 1, 2, 0, 6, 0, 2, 0, 2,
	4, 5, 4, 5, 1, 6, 5, 0, 3, 0,
	1, 0, 1, 1, 3, 2, 3, 3, 4, 4,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 5, 4, 1, 3, 3, 0, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 0, 1, 1, 3, 1,
	1, 2, 1, 7, 7, 7, 7, 8, 5, 0,
	1, 0, 1, 1, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 5, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 2, 2, 1,
	5, 6, 1, 2, 0, 1, 1, 2, 5, 0,
	1, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 3, 5, 2, 2, 2, 2,
	1, 1, 2, 5, 6, 6, 6, 1, 1, 1,
	1, 1, 0, 2, 0, 1, 1, 2, 4, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 2, 2,
	2, 0, 1, 1, 5, 4, 4, 5, 5, 5,
	5, 4, 5, 5, 5, 5, 5, 5, 5, 1,
	1, 1, 4, 4, 6, 8, 6, 4, 5, 5,
	4, 6, 6, 7, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 2, 3, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 2, 0, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 3, 3, 3,
	3, 2, 3, 4, 3, 4, 1, 3, 4, 3,
	4, 1, 1, 1, 3, 4, 4, 5, 3, 4,
	5, 6, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 1, 1, 3, 0, 1,
	0, 3, 0, 3, 3, 0, 3, 5, 0, 3,
	5, 0, 1, 1, 0, 1, 1, 2, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -365, -2, -1, -3, -4, -5, -6, -47, -58,
	-60, -61, -26, -7, -57, -40, -41, -43, -49, -54,
	-55, -56, -65, -21, -20, -19, -18, 12, -8, -9,
	-338, -10, -180, -181, -182, -366, -27, -28, -29, -31,
	-32, -33, -34, -35, -36, -37, -30, -39, -38, 195,
	-42, 53, -44, -45, -46, -50, -51, -52, -53, 309,
	315, 364, -66, -68, -22, -23, -24, -25, 191, 14,
	436, -11, -14, -12, -13, -16, -17, -15, 213, 212,
	32, 276, 277, 313, 211, 192, 13, 125, 126, 128,
	129, 25, -67, 58, 193, -69, 10, 482, -77, 33,
	-100, -177, 62, -165, -168, 439, 440, 441, 442, 443,
	444, 445, 446, 447, 448, 449, 450, 451, 452, 453,
	454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
	464, 465, 466, 467, 468, 469, 470, 471, 472, 473,
	474, 433, 230, 254, 257, 264, 125, 144, 138, 166,
	158, 133, 234, 235, 69, 128, 393, 79, 378, 363,
	131, 249, 251, 253, 256, 236, 154, 149, 248, 232,
	147, 237, 34, 238, 171, 239, 240, 438, 374, 291,
	380, 261, 361, 148, 375, 252, 377, 172, 176, 385,
	315, 142, 143, 382, 387, 170, 210, 37, 435, 222,
	388, 174, 169, 165, 396, 265, 263, 168, 141, 164,
	233, 42, 178, 177, 179, 357, 358, 359, 360, 241,
	242, 303, 384, 161, 150, 295, 134, 22, 391, 217,
	379, 316, 243, 258, 266, 173, 175, 224, 229, 437,
	228, 262, 389, 146, 221, 250, 216, 392, 135, 309,
	318, 244, 129, 255, 386, 395, 41, 331, 140, 132,
	207, 126, 226, 231, 245, 246, 247, 268, 267, 259,
	162, 223, 167, 139, 163, 127, 225, 394, 332, 481,
	293, 346, 160, 157, 227, 200, 390, 381, 130, 350,
	333, 155, 269, 478, 479, 480, 304, 290, 270, 271,
	153, 214, 272, 274, 275, -42, -9, -8, -67, -68,
	-184, 23, 361, -48, 362, 195, 58, -177, -5, -4,
	-40, -65, -183, -177, 276, -183, 198, -177, 228, 345,
	-285, 203, -252, -229, 229, -251, -230, -254, -231, 26,
	192, 191, 225, 14, 193, 313, 199, 12, 10, 314,
	211, 13, 315, 317, 318, 321, 322, 323, 36, 326,
	327, 62, 65, 236, -82, -83, -143, 19, 6, 7,
	8, 9, -287, 292, 346, 228, -223, -221, 272, 324,
	208, 207, 80, 398, 197, -350, -351, 188, 189, 190,
	-340, 430, -339, -177, 431, -163, -367, -284, 381, 380,
	-188, 379, 372, 383, 374, 191, 79, 159, 156, 199,
	382, 37, 385, 386, 375, 292, 346, -350, 130, 127,
	-239, 85, 135, 134, -239, 228, 35, -245, 356, -244,
	-246, 385, 386, 396, 63, 64, 384, -163, -177, 79,
	-83, -143, -82, -66, -68, -338, 292, 346, 228, 199,
	198, 398, 276, -286, -346, 26, -291, 185, 186, 187,
	27, 28, -1, -89, 220, -100, 124, -83, -82, -83,
	-155, -177, 363, 94, -48, -48, 362, -341, -342, -343,
	-345, 195, 362, 361, 124, 15, -183, 56, -100, -230,
	228, -252, -229, 30, 55, 59, 201, 59, 55, 58,
	311, 325, 346, 312, 324, 200, 228, 325, 228, 372,
	200, 316, 319, 320, 373, -301, 396, -62, 33, -85,
	21, -69, -68, 20, 26, 27, 26, 27, 26, 27,
	26, 27, -348, 198, 430, -219, 203, -219, -219, 199,
	-219, 198, -352, 137, 59, -340, -88, 58, -187, 102,
	-187, -368, 15, 104, 227, 226, 376, 373, -261, 377,
	378, -188, -187, -187, -188, 198, 398, 25, 25, -285,
	-285, -353, 202, 389, 436, 133, 134, 135, -249, 26,
	35, 355, -229, 228, 59, 94, 23, -247, 94, 105,
	-246, -246, -246, -247, -247, -120, 35, -176, 121, -177,
	65, -120, 35, 124, -84, -85, -69, -68, 60, 60,
	-285, -285, -285, -285, -285, -285, -183, -70, -71, 112,
	-203, -177, 86, -205, 62, -198, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 448, 449, 450, 451, 452,
	453, 455, 456, 457, 458, 459, 460, 461, 462, 463,
	464, 465, 466, 467, 468, 469, 470, 471, 472, 473,
	474, 79, 361, 303, 346, 155, 304, 153, 214, -199,
	-201, -319, -313, -196, 58, 110, 111, 118, 87, -200,
	-274, 30, 89, 406, -150, -151, -152, -153, -154, -314,
	-312, 65, 70, 73, 76, 77, 75, 74, 151, 72,
	66, 123, -68, -333, -166, -290, -296, 197, -294, 156,
	152, 12, 116, 356, 121, -297, 475, 64, 63, 297,
	298, 299, 398, 294, 300, 203, 47, 301, 302, 305,
	405, 306, 48, 307, 296, 218, 308, 409, 408, 410,
	402, 399, 397, 400, 401, 403, 404, -70, -292, 38,
	-65, 58, 25, 58, -177, -84, -62, -85, 124, 70,
	65, -48, 60, 59, -344, 76, 77, -347, 170, 162,
	-177, -59, 65, -3, -4, -5, -6, -26, -40, -65,
	-315, -313, 58, 26, 355, 55, 15, -253, 198, 398,
	310, 224, 200, -251, -236, -234, -232, -176, -230, -233,
	-232, -256, -155, 373, -63, 365, 274, 477, -62, -203,
	-177, -81, -80, -203, 200, -219, -355, 62, 86, -235,
	-233, -229, -175, 62, 63, 64, -177, -219, -353, -339,
	29, -87, -177, -139, 16, -201, -139, -100, -187, -187,
	-189, -368, -185, -368, 373, -139, -139, -261, -186, -177,
	-219, -355, -235, -74, -72, -75, -76, -78, -142, -144,
	-100, 58, 390, 391, 131, 134, 133, 7, -250, 355,
	26, -229, -244, -240, 65, 356, -233, -248, 55, 121,
	-298, -203, 35, -247, -247, -247, -248, -248, 120, -177,
	-62, -355, -236, -229, -177, -102, -100, -178, -175, -168,
	-138, 59, -137, 15, -172, 85, 82, 83, 84, -177,
	29, 65, 124, -203, 101, -214, 94, 95, 96, 97,
	98, 99, 100, 58, 58, 58, 58, 58, 58, 58,
	58, -212, 58, 58, 58, 58, 58, 58, 58, -212,
	58, 58, 58, 58, 58, 65, 65, 107, 106, 117,
	110, 111, 112, 113, 114, 115, 116, 108, 109, 104,
	86, 102, 103, 88, -68, -203, -209, -201, -201, -201,
	-201, -274, -207, -203, 58, -203, 58, 58, 58, -295,
	58, 58, -211, -212, 58, 65, 58, 58, 58, -201,
	58, 58, -138, -293, -210, -332, 476, -91, 60, -86,
	-177, -330, -331, -86, -90, -177, -62, -62, -170, -171,
	-162, -167, -174, -175, -168, 292, 196, 26, 85, 29,
	31, 297, 329, 88, 121, 20, 89, 156, 120, 299,
	406, 298, 191, 51, 408, 410, 409, 399, 397, 348,
	352, 354, 351, 398, 372, 35, 14, 32, 212, 27,
	28, 114, 193, 92, 93, 215, 30, 213, 77, 23,
	54, 15, 17, 18, 300, 347, 203, 202, 104, 365,
	199, 49, 12, 123, 33, 101, 349, 45, 81, 47,
	102, 21, 400, 401, 36, 364, 432, 219, 116, 301,
	302, 52, 86, 355, 75, 55, 82, 19, 50, 103,
	194, 405, 48, 353, 305, 307, 430, 306, 197, 383,
	10, 296, 407, 25, 211, 46, 198, 373, 91, 201,
	76, 218, 152, 6, 80, 13, 53, 56, 402, 403,
	404, 38, 90, 16, 308, 436, 356, 366, 367, 368,
	369, 370, 371, 180, 181, 182, 183, 184, 260, 206,
	204, 208, 209, 476, 477, 185, 186, 287, 289, 159,
	188, 189, 190, 220, 137, 7, 334, 335, 336, 337,
	339, 340, 341, 342, 343, 344, 345, 23, -48, -342,
	124, 59, -87, -253, -235, -255, 112, 62, -241, 59,
	436, 483, 63, 201, -363, 347, 60, 59, 33, 65,
	484, 275, 65, 59, 22, 124, 59, -79, 31, 32,
	-100, 203, -100, -358, 334, 30, 35, 59, -222, 56,
	-217, -218, -216, -220, 35, -100, 15, -73, -101, -177,
	58, 60, 59, -203, -139, -139, -139, -187, -178, -189,
	-184, -189, -185, 124, -164, -177, -358, -364, 35, 25,
	-145, -146, -147, -148, 45, 49, 51, 46, 47, 48,
	52, 25, 59, -369, 29, -173, -179, 29, -174, 65,
	-175, -168, -66, -68, 132, 135, 135, 134, -229, 201,
	58, 94, -248, -248, -248, 35, -176, 55, 59, -139,
	-71, -72, -74, -203, -203, -203, -203, -177, 65, -177,
	112, -197, 86, 290, 75, 76, 77, -198, -215, 26,
	270, 271, -208, -209, -203, -149, 27, 26, -149, -149,
	-203, -149, 112, -209, -209, 60, 70, -334, -335, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	301, 296, 302, 300, 294, 308, 303, 304, 155, 428,
	429, 422, 423, 424, 425, 426, 427, -149, -149, -149,
	-149, -149, -203, -349, 288, 287, 289, -149, -149, -149,
	-149, -199, -199, -199, -199, -199, -199, -199, -199, -199,
	-199, -199, -199, -206, -213, -274, 58, 104, 102, 103,
	88, -201, -199, -199, 60, 59, -337, -336, 90, -203,
	-334, -208, -203, -208, -208, 60, 60, -209, -208, -199,
	-208, -149, 65, -139, 59, 58, 60, 59, 38, 124,
	59, 94, 60, 59, 124, 363, -177, -313, 60, -255,
	201, 124, 124, -234, 315, -176, -235, 20, 436, -155,
	198, -64, -302, -261, 65, 484, -304, 377, -203, -203,
	-177, -80, -88, 86, 58, -360, 379, 336, -169, 94,
	228, -233, 55, 282, 283, 284, 285, -216, -163, 120,
	239, 58, -100, -73, -177, 15, 59, -354, 124, -1,
	-177, -139, -187, -187, -189, -177, -360, -194, -195, -193,
	293, 36, -288, 356, 342, 343, 228, -238, -237, -155,
	-75, -75, -75, -75, 45, 45, 45, 50, 45, 50,
	45, -147, -238, -78, -177, -179, 60, 135, -235, -190,
	65, -240, -100, -100, -141, 17, 124, -197, 290, 75,
	-274, 60, 59, -203, -203, -203, 29, -209, 60, 60,
	60, 60, 15, -203, -203, -203, -203, -203, 60, 15,
	15, -203, -203, -203, -203, -203, -209, -206, -201, -199,
	-199, -204, 215, 85, -203, -202, -336, 92, -203, 59,
	56, 60, 15, 60, 60, 60, 56, 60, 59, 60,
	-203, 59, -141, -210, -300, -299, -298, 38, -65, -86,
	-293, -177, -331, -298, -177, -170, -167, -175, -168, 70,
	15, -229, 112, 112, 62, 316, -241, 65, 335, 65,
	-100, -309, 371, -305, -303, 366, 367, 368, 369, 94,
	-161, -160, 65, -310, 371, 366, 368, 124, 29, 30,
	-95, -96, -97, -103, -98, -155, -192, -99, 206, 204,
	208, -327, 80, 209, 260, 81, 199, -361, 69, -356,
	65, -357, 62, -100, -169, -169, -169, -95, -89, 56,
	124, -72, -101, -177, 112, 60, -139, -139, -187, -361,
	-362, 69, 337, -193, 123, 295, 35, 338, 339, 353,
	291, 70, 70, 344, -357, -139, 59, 94, -93, -92,
	55, 56, -94, 55, -92, 45, 45, -139, -88, 60,
	-140, 18, 20, -177, 112, -203, 60, 60, 60, -104,
	-106, 331, 332, -110, -107, -109, -108, -112, -111, 156,
	157, 121, 160, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 25, 214, 152, 153, 154, 155, 172,
	138, 158, 434, 180, 139, 181, 140, 182, 141, 183,
	142, 143, 184, 144, 147, 148, 149, 146, 60, -203,
	60, 60, 60, 60, 60, -203, -203, 15, 60, 60,
	60, 60, 60, -204, 85, -201, -198, 60, 93, -203,
	91, -105, -111, 121, 156, 214, 155, 154, 152, 331,
	332, -120, -203, -120, -199, 60, 65, -140, 60, 59,
	-293, -235, -241, 356, -64, -311, 202, -307, 370, -303,
	20, 368, 20, 20, 65, 485, 59, 94, -282, 478,
	-308, 366, 20, 20, -65, -100, 60, 59, -106, -99,
	-177, 81, -326, -327, -219, -326, 81, 58, 65, -359,
	347, -194, 58, -120, -122, -176, 121, 65, 60, -173,
	-72, -177, -139, -354, 124, -139, 65, 65, 70, 35,
	70, 123, 340, -289, -83, -237, -298, -203, 58, -203,
	-203, -209, 60, -113, 143, 142, -113, -281, 332, 331,
	-275, -277, 58, -276, 58, -276, -275, -275, 58, 58,
	-275, -278, 58, -278, -275, -279, 58, -279, -280, 58,
	-279, 60, 60, 60, -203, -198, -203, 60, -275, -276,
	-275, -278, -275, -113, -113, 60, 60, 23, 60, 60,
	60, -298, -318, 58, 70, -308, 20, -306, 65, 20,
	-306, -306, 485, 59, -64, -160, 65, -127, 479, 65,
	20, 65, -306, -88, -118, -119, -136, 329, 230, -220,
	234, 69, 235, 363, 236, 199, 238, 239, 240, 210,
	241, 242, 243, 356, 244, 245, 246, 247, 312, 6,
	278, -97, -117, -116, -114, 75, 86, 35, 329, -115,
	69, 120, 253, 231, 254, -135, -191, 204, 80, 81,
	317, -192, -323, -324, -177, -324, -177, -323, -323, -219,
	-203, 20, 436, -362, -224, -226, -155, 58, -63, -139,
	-139, 294, 35, 70, 35, 341, -84, -87, -283, 333,
	70, 70, -157, 65, -157, 70, 70, 70, 60, -203,
	-322, 25, 60, -317, -316, -156, -312, -177, 371, 65,
	-306, -64, 65, -158, 480, 70, 65, 368, 29, -257,
	220, 59, -136, -169, -169, -163, 120, -169, -169, -169,
	-169, 237, 237, -169, -169, -169, -169, -169, -169, -169,
	-169, -169, -169, -169, -169, -169, -169, 58, -114, 75,
	-199, 65, -122, -123, 35, 252, 248, -124, 35, 232,
	233, -126, 58, 260, 81, 81, -100, 58, 56, 269,
	58, 58, 58, -324, 60, 65, 335, 65, 60, 59,
	-275, -203, -83, 294, 60, 60, 60, 60, 59, 60,
	60, 60, 59, 60, 59, 60, -321, -320, -319, 60,
	59, 124, 94, 58, 20, -65, 20, -136, 70, 70,
	-169, -169, 70, 65, 65, 65, -169, -169, 70, 65,
	-179, 70, 70, 70, 70, 35, 65, -125, 35, 248,
	252, 249, 250, 251, 70, 35, 70, 35, 70, 35,
	-177, 58, -328, -329, 65, 70, 58, -225, 58, -224,
	-325, 282, 283, 284, 286, 285, -325, -224, -224, -224,
	58, -243, -242, 261, 86, 356, -227, -226, -79, 60,
	-84, 65, 70, 70, 59, 94, -316, -177, 65, -159,
	-177, -306, -258, 262, 263, -259, -265, 265, -120, -120,
	65, 65, -121, 231, -102, 60, 59, 94, 60, -203,
	-129, -128, 432, -224, 60, 60, 60, 60, -224, 261,
	-228, 210, 69, 436, 280, 281, -79, 60, 60, -320,
	35, -203, 124, 485, 60, 59, -263, 266, 58, -261,
	58, -261, 81, 283, 232, 233, 60, -329, 65, 60,
	-133, -134, -131, -132, 55, 375, 258, 259, 60, -227,
	-227, -227, -227, 60, -169, 65, 279, -177, -64, -177,
	-260, 267, 70, -199, 58, -199, 58, -262, 264, 58,
	-242, -132, 55, -131, 55, 14, 13, -135, 70, -175,
	-267, 58, 20, 60, -256, 60, -256, 58, 94, -199,
	-130, 255, 256, 25, 134, -130, -268, -266, 220, -259,
	60, 60, -256, 70, 60, 75, 35, 257, 60, 59,
	62, -264, 268, 60, -266, -269, 38, 70, -273, -270,
	58, -136, 222, -273, -136, -272, -271, 267, 223, 60,
	59, 62, 58, -271, -270, -209, 60,
}

var yyDef = [...]int{
	23, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 531, 532, 533, 534, 0, 337, 338,
	0, 319, 0, 0, 0, 0, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 238, 239, 0,
	187, 183, 163, 164, 165, 123, 124, 125, 126, 244,
	0, 0, 407, -2, 535, 536, 537, 538, -2, 350,
	0, 320, 321, 322, 323, 324, 325, 326, 227, 228,
	229, 224, 225, 226, -2, 0, 350, 176, 0, 168,
	168, 0, 427, 0, 0, 438, 460, 23, 385, 0,
	390, 713, 749, 750, 751, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,
	1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 188, 339, 340, 427, 427,
	210, 0, 1330, 214, 0, 0, 0, 316, 206, 207,
	208, 209, 0, 523, 0, 203, 0, 182, 1388, 0,
	0, 0, 0, 0, 0, 84, 573, 86, 575, 90,
	92, 93, 96, 97, 98, 99, 100, 101, 102, 103,
	0, 105, 0, 107, 0, 110, 111, 112, 0, 121,
	122, 576, 577, 64, -2, 0, 0, 0, 443, 446,
	449, 452, 541, 602, 602, 602, 0, 602, 0, 625,
	579, 580, 581, 600, 601, 355, 351, 352, 353, 354,
	415, 0, 417, 420, 300, 300, 0, 0, 291, 292,
	0, 309, 300, 300, 309, 0, 1116, 0, 0, 283,
	284, 285, 289, 290, 310, 244, 244, 357, 177, 178,
	167, 0, 172, 0, 166, 1388, 0, 137, 0, 142,
	0, 1337, 1402, 1352, 0, 0, 1370, 0, 161, -2,
	422, 0, 428, 0, 427, 0, 244, 244, 244, 244,
	244, 244, 0, 0, 0, 461, 462, 457, 458, 459,
	463, 464, 3, 0, 0, 389, 0, 422, -2, 0,
	211, 752, 0, 0, 215, 216, 0, 0, 230, 0,
	233, 219, 220, 221, 0, 0, 205, 0, 0, 184,
	0, 0, 0, 245, 78, 0, 0, 0, 0, 0,
	91, 120, 94, 95, 0, 115, 117, 119, 118, 104,
	116, 106, 108, 109, 114, 0, 65, 410, 0, 391,
	0, 440, 442, 0, 444, 445, 447, 448, 450, 451,
	453, 454, 0, 602, 542, 0, 0, 0, 0, 0,
	0, 602, 357, 356, 0, 416, 0, 0, 469, 0,
	469, 0, 305, 306, 300, 300, 293, 302, 0, 307,
	308, 0, 469, 469, 0, 0, 602, 1117, 1118, 0,
	0, 0, 358, 0, 0, 170, 0, 175, 127, 132,
	130, 131, 133, 0, 0, 0, 0, 0, 159, 160,
	0, 0, 0, 0, 0, 150, 153, 707, 708, 570,
	571, 154, 155, 0, 391, 423, 439, 441, 436, 437,
	0, 0, 0, 0, 0, 0, 336, 477, 471, 473,
	518, 31, 0, 1006, 749, 1011, -2, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, -2, 1472, -2, -2, 1475, 1476,
	1477, 1479, -2, -2, -2, -2, -2, -2, 1486, -2,
	-2, -2, 1490, 1491, -2, -2, 1494, 1495, 1496, 1497,
	1498, -2, -2, -2, -2, -2, -2, -2, -2, 1022,
	820, 821, 822, 823, 0, 0, 0, 0, 0, 830,
	831, 0, 844, 0, 837, 838, 839, 840, 841, 43,
	44, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 969, 807, 0, 0, 0, 954, 0, 944, 0,
	982, 0, 0, 0, 0, 0, 0, 45, 46, 960,
	962, 963, 965, 966, 967, 968, 971, 972, 973, 976,
	977, 978, 979, 980, 981, 984, 986, 956, 957, 958,
	959, 948, 949, 950, 951, 952, 953, 477, 359, 377,
	361, 0, 366, 0, 714, 391, 413, 391, 0, 212,
	0, 217, 0, 0, 232, 234, 235, 236, 222, 223,
	317, 201, 202, 194, 195, 196, 197, 198, 199, 200,
	204, 41, 0, 185, 186, 78, 0, 0, 79, 80,
	81, 82, 83, 85, 69, 329, 331, 563, 574, 0,
	566, 0, 88, 113, 0, 0, 0, 0, 411, 424,
	31, 429, 430, 433, 0, 0, 0, 544, 0, 0,
	560, 572, 594, 528, 529, 530, -2, 0, 0, 418,
	0, 0, 505, 280, 0, 301, 281, 469, 469, 469,
	300, 0, 302, 0, 302, 296, 297, 0, 311, 313,
	0, 0, 242, 482, 0, 483, 484, 480, 507, 510,
	513, 0, 179, 180, 0, 0, 174, 0, 0, 134,
	135, 136, 143, 138, 140, 0, 0, 144, 156, 157,
	158, 383, 384, 0, 0, 0, 148, 149, 0, 162,
	409, 327, 328, 332, 0, 334, 711, 335, 524, 525,
	469, 0, 478, 0, 474, 0, 0, 0, 0, 519,
	0, 521, 0, 1001, 0, 0, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 993, 989, 989, 989, 0, 989, 0,
	0, 929, 0, 0, 989, 989, 989, 989, 989, 930,
	0, 989, 989, 989, 989, 943, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 995, 0, 826, 827, 828,
	829, 832, 0, 845, 0, 0, 993, 993, 993, 932,
	0, 0, 934, 945, 0, 938, 993, 0, 993, 942,
	989, 0, 469, 360, 374, 0, 378, 0, 0, 370,
	372, 365, 367, 0, 0, 387, 412, 414, 753, 0,
	1123, -2, 1125, -2, -2, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 0, 218, 231,
	0, 0, 0, 0, 72, 0, 73, 77, 67, 0,
	0, 0, 565, 0, 562, 0, 87, 0, 0, 55,
	0, 0, 393, 0, 0, 0, 0, 432, 434, 435,
	420, 0, 0, 550, 1119, 603, 0, 0, 0, 0,
	599, -2, 606, 0, 612, 0, 0, 0, 344, 348,
	23, 421, 0, 470, 282, 286, 287, 469, 303, 300,
	304, 300, 302, 0, 312, 315, 550, 246, 0, 0,
	0, 0, 0, 0, 498, 0, 0, 497, 0, 0,
	0, 0, 0, 0, 511, 512, 514, 0, 516, 517,
	526, 527, 0, 427, 181, 169, 171, 0, 129, 0,
	0, 0, 145, 146, 147, 151, 152, 0, 0, 467,
	472, 479, 482, 997, 998, 999, 1000, 520, 522, 32,
	475, 1002, 0, 1004, 1007, 1012, 1013, 1009, 0, 1027,
	-2, -2, 0, 994, 995, 0, 990, 991, 0, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 0, 0, 0,
	0, 0, 0, 0, 895, 896, 897, 0, 0, 0,
	0, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 1014, 1025, 1026, 0, 0, 0, 0,
	0, 1023, 1018, 0, 824, 0, 842, 846, 0, 0,
	988, 0, 995, 0, 0, 955, 933, 0, 0, 0,
	0, 0, 0, 467, 377, 379, 0, 0, 377, 0,
	0, 0, 386, 0, 0, 0, 318, 42, 237, 0,
	0, 0, 0, 330, 0, 564, 69, 0, 0, 89,
	0, 615, 49, 0, 0, 622, 397, 0, 425, 426,
	32, 431, 0, 0, 715, 553, 551, 552, 0, 1120,
	0, 561, 0, 595, 596, 597, 598, 607, 1119, 1119,
	1119, 715, 385, 0, -2, 0, 0, 346, 0, 0,
	506, 294, 469, 469, 300, 314, 553, 557, 247, 248,
	250, 251, 252, 0, 0, 0, 0, 469, 191, 0,
	501, 495, 0, 488, 499, 500, 491, 0, 493, 0,
	489, 490, 469, 481, 420, 515, 509, 173, 128, 0,
	268, 139, 333, 712, 465, 0, 0, 1003, 1005, 1008,
	1010, 882, 0, 0, 0, 0, 0, 0, 871, 865,
	866, 947, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 1015, 1023, 1019,
	0, 1016, 0, 0, 996, 0, 847, 0, 0, 0,
	0, 883, 0, 887, 931, 935, 0, 939, 0, 941,
	0, 0, 465, 375, 0, 380, 381, 377, 364, 371,
	363, 373, 368, 369, 388, 754, 1124, 1121, 1122, 213,
	0, 69, 74, 75, 76, 70, 68, 567, 0, 569,
	55, 47, 51, 56, 57, 0, 0, 0, 0, 0,
	0, 620, 0, 399, 53, 0, 0, 0, 0, 0,
	0, 716, 717, 719, 720, 0, 0, 722, 776, 0,
	731, 602, 731, 0, 0, 733, 734, 543, 0, 0,
	546, 246, 556, 0, 0, 0, 0, 0, 513, 0,
	0, 469, 345, 348, 349, 419, 298, 295, 469, 240,
	241, 0, 0, 249, 0, 254, 255, 0, 0, 0,
	267, 263, 264, 265, 243, 427, 0, 0, 485, 502,
	0, 0, 486, 0, 487, 492, 494, 190, 508, 141,
	455, 0, 0, 33, 476, 996, 867, 868, 869, 0,
	849, 861, 861, 1111, 1052, 1053, 1054, 1098, 1056, 1102,
	1102, 1098, 1098, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 0, 0, 1075, 1098, 1100, 1100, 1098, 1095,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1105, 1105, 1108, 1105, 870, 0,
	889, 872, 873, 876, 874, 0, 0, 0, 888, 877,
	878, 864, 992, 1017, 0, 1024, 1020, 825, 833, 843,
	0, 0, 852, 1098, 1102, 855, 1098, 1100, 1098, 861,
	861, 0, 0, 0, 0, 875, 0, 456, 376, 0,
	362, 71, 66, 568, 24, 34, 0, 53, 0, 58,
	0, 0, 0, 0, 0, 55, 622, 0, 401, 0,
	398, 0, 0, 0, 539, 420, -2, 0, -2, 721,
	777, 743, 743, 732, 743, 743, 602, 0, 554, 545,
	0, 557, 0, 608, 609, 709, 710, 610, 0, 469,
	469, -2, 342, 347, 0, 299, 558, 559, 0, 256,
	257, 0, 260, 266, 422, 192, 193, 503, 0, 496,
	466, 468, 834, 850, 862, 863, 851, 1114, 1112, 1113,
	1055, 1099, 0, 1080, 0, 1081, 1082, 1083, 0, 0,
	1076, 1077, 0, 1078, 1079, 1071, 0, 1072, 1073, 0,
	1074, 886, 891, 892, 0, 1021, 848, 835, 853, 854,
	856, 857, 858, 859, 860, 836, 884, 0, 936, 940,
	894, 382, 25, 0, 0, 50, 0, 59, 63, 0,
	61, 62, 55, 0, 618, 621, 623, 403, 0, 400,
	0, 394, 396, 0, 626, -2, 663, 1119, 1119, 0,
	1119, 1119, 1119, 1119, 0, 0, 1119, 1119, 1119, 1119,
	1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
	0, 718, 745, -2, 757, 759, 0, 0, 762, 763,
	0, 0, 0, 0, 799, 769, 0, 0, 1039, 1040,
	0, 775, 0, 735, 744, 0, 744, 0, 0, 743,
	0, 0, 0, 555, 0, 590, 1098, 0, 614, 427,
	343, 253, 258, 0, 261, 262, 189, 0, 1051, 1115,
	0, 0, 0, 1096, 0, 0, 0, 0, 893, 0,
	619, 0, 35, 0, 37, 39, 40, 746, 48, 52,
	60, 616, 0, 392, 0, 402, 54, 0, 0, 613,
	0, 611, 665, 0, 0, 1119, 1119, 0, 0, 0,
	0, 1119, 1119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 758, 760,
	761, 764, 765, 766, 804, 805, 806, 767, 801, 802,
	803, 768, 0, 0, 1037, 1038, 797, 0, 0, 0,
	0, 0, 0, 0, 729, 547, 0, 549, 583, 0,
	433, 0, 422, 259, 504, 1104, 1103, 1093, 0, 1094,
	1101, 1106, 0, 1109, 0, 885, 26, 27, 0, 36,
	0, 0, 0, 0, 0, 540, 659, 664, 666, 667,
	0, 0, 670, 671, 672, 673, 0, 0, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 701, 702,
	703, 704, 705, 706, 686, 687, 688, 689, 690, 691,
	698, 0, 0, 695, 0, 0, 0, 792, 0, 0,
	736, 738, 739, 740, 741, 742, 737, 0, 0, 0,
	0, 728, 730, 772, 0, 548, 582, 591, 592, 433,
	341, 1097, 0, 0, 0, 0, 38, 747, 0, 0,
	405, 395, 648, 0, 0, 654, 0, 660, 668, 669,
	674, 675, 692, 0, 0, 694, 0, 0, 800, 0,
	779, 793, 0, 0, 583, 583, 583, 583, 0, 773,
	584, 1119, 0, 0, 588, 589, 593, 1107, 1110, 28,
	29, 30, 0, 55, 404, 0, 628, 0, 0, 0,
	0, 0, 657, 0, 699, 700, 693, 696, 697, 770,
	778, 780, 781, 782, 0, 794, 795, 796, 798, 723,
	724, 725, 726, 0, 0, 586, 0, 748, 617, 406,
	630, 0, 649, 0, 0, 0, 0, 0, 0, 0,
	771, 783, 0, 784, 0, 0, 0, 727, 585, 587,
	627, 0, 659, 650, 0, 652, 0, 0, 0, 0,
	785, 787, 788, 0, 0, 786, 0, 632, 0, 646,
	651, 653, 0, 658, 656, 789, 791, 790, 631, 0,
	644, 629, 0, 655, 633, -2, 0, 647, 634, -2,
	0, 642, 0, 635, 643, 0, 638, 0, 0, 637,
	0, -2, 0, 639, -2, 0, 645,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 3, 3, 115, 107, 3,
	58, 60, 112, 110, 59, 111, 124, 113, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 482,
	95, 94, 96, 3, 483, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 117, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 484, 106, 485, 118,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 86, 88, 89, 90, 91, 92, 93, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 108, 109, 114,
	116, 119, 120, 121, 122, 123, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:540
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:546
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:572
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:576
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:582
		{
			yyLOCAL = &tree.Load{
				Local:     yyDollar[3].boolValUnion(),
				LoadParam: yyDollar[4].loadParamUnion(),
				Table:     yyDollar[7].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).LoadParam.Tail = yyDollar[8].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:592
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:596
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:602
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:606
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:612
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:619
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:628
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:632
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:636
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:641
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:645
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:649
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:655
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:664
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:675
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:679
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:685
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:689
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:695
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:699
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:705
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:729
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:748
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:752
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:757
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:761
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:769
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:773
		{
			yyVAL.str = yyDollar[3].str
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:778
		{
			yyVAL.str = "\n"
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:782
		{
			yyVAL.str = yyDollar[3].str
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:787
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:791
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:815
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:819
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:825
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:831
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:849
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:866
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:889
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:893
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:899
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:912
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:923
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:936
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:940
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:950
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Users:      yyDollar[8].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:963
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:976
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:982
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:988
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:995
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1003
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1011
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1015
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1019
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1023
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1027
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1031
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1037
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1041
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1047
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1063
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1067
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1073
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1077
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1081
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1085
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1089
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1093
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1097
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1101
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1105
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1109
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1113
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1117
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1121
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1125
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1129
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1133
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1137
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1141
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1145
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1149
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1153
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1157
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1161
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1165
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1169
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1173
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1177
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1181
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1185
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1189
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1193
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1197
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1201
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1219
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1227
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1231
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1235
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1239
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1243
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1249
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1253
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1257
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1263
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1269
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1273
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1280
		{
			yyVAL.str = yyDollar[3].str
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1286
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1290
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1296
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1304
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1313
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1321
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1329
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1352
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1375
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1382
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1389
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1397
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1404
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1411
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1420
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1424
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1428
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1434
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1438
		{
			yyVAL.str = yyDollar[1].str
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1445
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1456
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1462
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1467
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1471
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1475
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1479
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1483
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1487
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1491
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1495
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1501
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1505
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1509
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1513
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1518
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1523
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1529
		{
			yyLOCAL = &tree.Use{
				SecondaryRole: false,
				Name:          yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1536
		{
			yyLOCAL = &tree.Use{
				SecondaryRole: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1542
		{
			yyLOCAL = &tree.Use{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1549
		{
			yyLOCAL = &tree.Use{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1556
		{
			yyLOCAL = &tree.Use{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1566
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1573
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1584
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: yyDollar[4].tableExprsUnion(),
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1595
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1599
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1605
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1617
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1623
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1627
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1633
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1637
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1643
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1652
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1658
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1662
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1666
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1670
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1674
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1678
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1686
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1694
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1704
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1736
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1740
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1746
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1752
		{
			yyVAL.str = yyDollar[1].str
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1757
		{
			yyVAL.str = "true"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1758
		{
			yyVAL.str = "false"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1759
		{
			yyVAL.str = yyDollar[1].str
		}
	case 237:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1764
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1775
		{
			yyLOCAL = &tree.AlterAccount{
				IfExists:     yyDollar[3].boolValUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1787
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:           yyDollar[3].boolValUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpts:           yyDollar[6].userMiscOptionsUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:1798
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:1802
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1807
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1811
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1816
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1820
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1826
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1830
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1836
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1840
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1844
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1848
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1852
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1856
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1860
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryDefault{}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1864
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryCount{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1868
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalDefault{}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1872
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalCount{Value: yyDollar[4].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1876
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentNone{}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1880
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentDefault{}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1884
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentOptional{}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1888
		{
			yyLOCAL = &tree.UserMiscOptionFailedLoginAttempts{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeCount{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1896
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeUnbounded{}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1902
		{
			yyVAL.item = nil
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1907
		{
			yyVAL.item = nil
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1929
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1933
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1939
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1953
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1963
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1972
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1976
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1980
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1986
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1992
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1998
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2004
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2014
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2026
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2030
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2036
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2048
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:2061
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:2065
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2070
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2074
		{
			yyVAL.str = yyDollar[2].str
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2080
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2093
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2097
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2103
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2107
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2113
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2117
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2126
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2130
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2134
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2152
		{
			yyLOCAL = &tree.DropAccount{
				IfExists: yyDollar[3].boolValUnion(),
				Name:     yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2161
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:2170
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:2174
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:2180
		{
			yyLOCAL = &tree.User{
				Username: yyDollar[1].usernameRecordUnion().Username,
				Hostname: yyDollar[1].usernameRecordUnion().Hostname,
			}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2189
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2198
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2208
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2214
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2220
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2228
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2233
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2240
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2256
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: yyDollar[7].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2269
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: yyDollar[8].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2280
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2284
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2290
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2295
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2302
		{
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2304
		{
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2307
		{
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2316
		{
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2320
		{
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2325
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2334
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2341
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2347
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2355
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2362
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2369
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2388
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2392
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2396
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2402
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2411
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2415
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2421
		{
			yyVAL.str = yyDollar[1].str
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2425
		{
			yyVAL.str = yyDollar[3].str
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2431
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2435
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2441
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2446
		{
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2450
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2457
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2461
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2468
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2473
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2477
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2483
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2487
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2493
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2497
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2502
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2506
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2519
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2526
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2533
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2551
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2570
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2576
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2583
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2587
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2600
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2604
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2609
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2613
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2620
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2625
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2632
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2638
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2642
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2646
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2650
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2654
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2658
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2664
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2671
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2680
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2684
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2690
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2698
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2702
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2707
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2711
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2717
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2721
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2725
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2730
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2734
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2740
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2746
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2750
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2756
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2761
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2765
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2769
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2776
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2780
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2786
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2790
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2800
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2810
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2820
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2832
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2840
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2848
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2857
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2865
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2873
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2881
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2889
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2897
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2905
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2913
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2921
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2931
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2942
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2960
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2964
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2968
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2977
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2981
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2986
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2990
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2995
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2999
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:3005
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:3009
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:3015
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:3019
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:3023
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:3027
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:3032
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:3040
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:3046
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:3054
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:3058
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3071
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3080
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3090
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3099
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3109
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3113
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3123
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3127
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3131
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3135
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3141
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3145
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3151
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3157
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3161
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3165
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3171
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3175
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3181
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3185
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3191
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3195
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3201
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3205
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:3218
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3223
		{
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3224
		{
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:3228
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3240
		{
			yyVAL.str = ""
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3244
		{
			yyVAL.str = yyDollar[1].str
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3248
		{
			yyVAL.str = yyDollar[2].str
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3257
		{
			yyVAL.str = ""
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3261
		{
			yyVAL.str = yyDollar[1].str
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3265
		{
			yyVAL.str = yyDollar[2].str
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3269
		{
			yyVAL.str = yyDollar[1].str
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3273
		{
			yyVAL.str = yyDollar[2].str
		}
	case 539:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3307
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3317
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3328
		{
		}
	case 543:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3333
		{
			yyLOCAL = &tree.CreateAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3345
		{
			yyVAL.str = yyDollar[1].str
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:3351
		{
			yyLOCAL = tree.AccountAuthOption{
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3361
		{
			yyVAL.str = yyDollar[1].str
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:3367
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:3374
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:3380
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:3388
		{
			yyLOCAL = tree.AccountStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:3394
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusOpen,
			}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:3401
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusSuspend,
			}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:3409
		{
			yyLOCAL = tree.AccountComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:3415
		{
			yyLOCAL = tree.AccountComment{
				Exist:   true,
				Comment: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3424
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               tree.Role{UserName: yyDollar[7].str},
				MiscOpts:           yyDollar[8].userMiscOptionsUnion(),
				CommentOrAttribute: yyDollar[9].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3436
		{
			yyVAL.str = yyDollar[1].str
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:3441
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:3447
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: true,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:3455
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: false,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3562
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3566
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3572
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3582
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3586
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3590
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:3595
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:3599
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:3606
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:3612
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3625
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3634
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3638
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3644
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3661
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3665
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3669
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3673
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3679
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3698
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3702
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3724
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3728
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3732
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3736
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3740
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3746
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3750
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3756
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3761
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3766
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3770
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3774
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3778
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3782
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3788
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3802
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3806
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3811
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3815
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3821
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3825
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3831
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3835
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3839
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3844
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3848
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3854
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3865
		{
			yyLOCAL = &tree.CreateTable{
				Table: *yyDollar[5].tableNameUnion(),
				Defs:  yyDollar[7].tableDefsUnion(),
				Param: yyDollar[9].loadParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.LoadParameter
//line mysql_sql.y:3875
		{
			yyLOCAL = &tree.LoadParameter{
				Filepath:     yyDollar[2].str,
				LoadType:     tree.LOCAL,
				CompressType: tree.AUTO,
				Tail:         yyDollar[3].tailParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.LoadParameter
//line mysql_sql.y:3884
		{
			if strings.ToLower(yyDollar[3].str) != "filepath" {
				yylex.Error(fmt.Sprintf("can not recognize the '%s'", yyDollar[3].str))
				return 1
			}
			yyLOCAL = &tree.LoadParameter{
				Filepath:     yyDollar[5].str,
				LoadType:     tree.LOCAL,
				CompressType: tree.AUTO,
				Tail:         yyDollar[7].tailParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL *tree.LoadParameter
//line mysql_sql.y:3897
		{
			if strings.ToLower(yyDollar[3].str) != "filepath" || strings.ToLower(yyDollar[7].str) != "compression" {
				yylex.Error(fmt.Sprintf("can not recognize the '%s' or '%s' ", yyDollar[3].str, yyDollar[7].str))
				return 1
			}
			yyLOCAL = &tree.LoadParameter{
				Filepath:     yyDollar[5].str,
				LoadType:     tree.LOCAL,
				CompressType: yyDollar[9].str,
				Tail:         yyDollar[11].tailParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.LoadParameter
//line mysql_sql.y:3910
		{
			yyLOCAL = &tree.LoadParameter{
				LoadType: tree.S3,
				S3option: yyDollar[4].strsUnion(),
				Tail:     yyDollar[6].tailParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:3920
		{
			yyLOCAL = &tree.TailParameter{
				Fields:       yyDollar[1].fieldsUnion(),
				Lines:        yyDollar[2].linesUnion(),
				IgnoredLines: uint64(yyDollar[3].int64ValUnion()),
				ColumnList:   yyDollar[4].loadColumnsUnion(),
				Assignments:  yyDollar[5].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3932
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3936
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
			fmt.Println("wangjian test1 is", yyLOCAL)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3942
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3946
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3952
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3956
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3961
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3965
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3975
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3979
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3988
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3992
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3998
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:4002
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:4008
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:4017
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:4027
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:4031
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:4037
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:4041
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:4047
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:4054
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:4063
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:4067
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:4072
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:4076
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4081
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4085
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4095
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4099
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:4110
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:4118
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:4126
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:4134
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:4145
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:4155
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4165
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4169
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4174
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4178
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:4183
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:4187
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:4193
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:4197
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:4201
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4207
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4211
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4215
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4219
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4223
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4227
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4231
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4235
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4239
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4243
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4247
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4251
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4255
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4259
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4263
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4267
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4271
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4275
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4279
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4283
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4287
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4291
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4295
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4299
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4303
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4307
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4311
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4315
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:4319
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:4326
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:4330
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:4336
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4341
		{
			yyVAL.str = ""
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4345
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4349
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4355
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4359
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4363
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4367
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4371
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4375
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4389
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4393
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4402
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4407
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4413
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4420
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4424
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4430
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4434
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4440
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4450
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4456
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4465
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4474
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4497
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4506
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4516
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4524
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4530
		{
			yyVAL.str = ""
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4534
		{
			yyVAL.str = yyDollar[1].str
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4544
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4550
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4556
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4570
		{
			yyVAL.str = ""
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4577
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4583
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4587
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4591
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4602
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4606
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4610
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4619
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4625
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4629
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4635
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4639
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4643
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4647
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4651
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4655
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4659
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4663
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4667
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4671
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4675
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4679
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4683
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4693
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4697
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4702
		{
			yyVAL.str = ""
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4706
		{
			yyVAL.str = yyDollar[1].str
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4712
		{
			yyVAL.str = ""
		}
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4716
		{
			yyVAL.str = yyDollar[2].str
		}
	case 778:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4722
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4733
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4743
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4750
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4757
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4764
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4773
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4779
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4785
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4789
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4793
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4797
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4801
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4806
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4813
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4817
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4821
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4826
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4830
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4835
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4839
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4855
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4861
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4865
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4869
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4873
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4877
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4881
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4885
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4889
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4893
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4897
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4901
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4905
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4909
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4915
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4919
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4923
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4927
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4931
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4935
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4939
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4943
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4947
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4951
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4955
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4959
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4964
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4972
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4976
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4980
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4989
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4993
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4997
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5001
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5005
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5010
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5014
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5019
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5023
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:5029
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:5033
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:5039
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5049
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5066
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5083
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5096
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5109
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5121
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5135
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5150
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5165
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5182
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5197
		{
		}
	case 864:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5203
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5212
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5220
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5228
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5237
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5246
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5255
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5264
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5273
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5282
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5291
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5300
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5309
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5318
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5327
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5343
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5351
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5359
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5367
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5375
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5384
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5392
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5401
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5410
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5418
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5426
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5435
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5445
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			a1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			a2 := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{a1, a2},
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5466
		{
			yyVAL.str = yyDollar[1].str
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5502
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5514
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5528
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5536
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5543
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5550
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5562
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5570
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5581
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5590
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5599
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5607
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5617
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5625
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5633
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5643
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5647
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5653
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5657
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5676
		{
		}
	case 955:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5678
		{
		}
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5718
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5728
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5732
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5736
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5742
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5747
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5751
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5757
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5761
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5768
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5772
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5776
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5784
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5788
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5792
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5796
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5800
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5805
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5810
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5816
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5820
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5824
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5828
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5835
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5839
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5845
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5849
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5853
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5857
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5861
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5865
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5869
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5873
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5879
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5883
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5889
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5893
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5900
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5904
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5908
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5914
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5918
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5922
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5926
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5930
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5934
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5938
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5944
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5948
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5952
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5956
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5962
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5966
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5979
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5984
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5988
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5992
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5996
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6010
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6014
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6028
		{
			yyLOCAL = tree.NewParamExpr(yyp)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6034
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6045
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6050
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6056
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6068
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6080
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6092
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6105
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6118
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6131
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6144
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6157
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6170
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6183
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6196
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6209
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6222
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6237
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6260
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6297
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6345
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6362
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6374
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6389
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6409
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6429
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6445
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6458
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6471
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6484
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6497
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6509
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6521
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6533
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6545
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6557
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6569
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6581
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6593
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6605
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6618
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6633
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6656
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6661
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6667
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6674
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6678
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6683
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6687
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6693
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6699
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6706
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6713
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6722
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6729
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6736
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6745
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6749
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6753
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6759
		{
		}
	case 1115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6761
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6771
		{
			yyVAL.str = ""
		}
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6775
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
