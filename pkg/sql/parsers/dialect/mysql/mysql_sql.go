// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const SELECT = 57349
const STREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const LOWER_THAN_SET = 57363
const SET = 57364
const ALL = 57365
const DISTINCT = 57366
const DISTINCTROW = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const LOCK = 57375
const KEYS = 57376
const VALUES = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const SUBQUERY_AS_EXPR = 57396
const LOWER_THAN_STRING = 57397
const ID = 57398
const AT_ID = 57399
const AT_AT_ID = 57400
const STRING = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const INTEGRAL = 57406
const HEX = 57407
const BIT_LITERAL = 57408
const FLOAT = 57409
const HEXNUM = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const LOWER_THAN_CHARSET = 57414
const CHARSET = 57415
const UNIQUE = 57416
const KEY = 57417
const OR = 57418
const PIPE_CONCAT = 57419
const XOR = 57420
const AND = 57421
const NOT = 57422
const BETWEEN = 57423
const CASE = 57424
const WHEN = 57425
const THEN = 57426
const ELSE = 57427
const END = 57428
const LE = 57429
const GE = 57430
const NE = 57431
const NULL_SAFE_EQUAL = 57432
const IS = 57433
const LIKE = 57434
const REGEXP = 57435
const IN = 57436
const ASSIGNMENT = 57437
const SHIFT_LEFT = 57438
const SHIFT_RIGHT = 57439
const DIV = 57440
const MOD = 57441
const UNARY = 57442
const COLLATE = 57443
const BINARY = 57444
const UNDERSCORE_BINARY = 57445
const INTERVAL = 57446
const BEGIN = 57447
const START = 57448
const TRANSACTION = 57449
const COMMIT = 57450
const ROLLBACK = 57451
const WORK = 57452
const CONSISTENT = 57453
const SNAPSHOT = 57454
const CHAIN = 57455
const NO = 57456
const RELEASE = 57457
const PRIORITY = 57458
const QUICK = 57459
const BIT = 57460
const TINYINT = 57461
const SMALLINT = 57462
const MEDIUMINT = 57463
const INT = 57464
const INTEGER = 57465
const BIGINT = 57466
const INTNUM = 57467
const REAL = 57468
const DOUBLE = 57469
const FLOAT_TYPE = 57470
const DECIMAL = 57471
const NUMERIC = 57472
const DECIMAL_VALUE = 57473
const TIME = 57474
const TIMESTAMP = 57475
const DATETIME = 57476
const YEAR = 57477
const CHAR = 57478
const VARCHAR = 57479
const BOOL = 57480
const CHARACTER = 57481
const VARBINARY = 57482
const NCHAR = 57483
const TEXT = 57484
const TINYTEXT = 57485
const MEDIUMTEXT = 57486
const LONGTEXT = 57487
const BLOB = 57488
const TINYBLOB = 57489
const MEDIUMBLOB = 57490
const LONGBLOB = 57491
const JSON = 57492
const ENUM = 57493
const GEOMETRY = 57494
const POINT = 57495
const LINESTRING = 57496
const POLYGON = 57497
const GEOMETRYCOLLECTION = 57498
const MULTIPOINT = 57499
const MULTILINESTRING = 57500
const MULTIPOLYGON = 57501
const INT1 = 57502
const INT2 = 57503
const INT3 = 57504
const INT4 = 57505
const INT8 = 57506
const URL = 57507
const S3OPTION = 57508
const SQL_SMALL_RESULT = 57509
const SQL_BIG_RESULT = 57510
const SQL_BUFFER_RESULT = 57511
const LOW_PRIORITY = 57512
const HIGH_PRIORITY = 57513
const DELAYED = 57514
const CREATE = 57515
const ALTER = 57516
const DROP = 57517
const RENAME = 57518
const ANALYZE = 57519
const ADD = 57520
const SCHEMA = 57521
const TABLE = 57522
const INDEX = 57523
const VIEW = 57524
const TO = 57525
const IGNORE = 57526
const IF = 57527
const PRIMARY = 57528
const COLUMN = 57529
const CONSTRAINT = 57530
const SPATIAL = 57531
const FULLTEXT = 57532
const FOREIGN = 57533
const KEY_BLOCK_SIZE = 57534
const SHOW = 57535
const DESCRIBE = 57536
const EXPLAIN = 57537
const DATE = 57538
const ESCAPE = 57539
const REPAIR = 57540
const OPTIMIZE = 57541
const TRUNCATE = 57542
const MAXVALUE = 57543
const PARTITION = 57544
const REORGANIZE = 57545
const LESS = 57546
const THAN = 57547
const PROCEDURE = 57548
const TRIGGER = 57549
const STATUS = 57550
const VARIABLES = 57551
const ROLE = 57552
const PROXY = 57553
const AVG_ROW_LENGTH = 57554
const STORAGE = 57555
const DISK = 57556
const MEMORY = 57557
const CHECKSUM = 57558
const COMPRESSION = 57559
const DATA = 57560
const DIRECTORY = 57561
const DELAY_KEY_WRITE = 57562
const ENCRYPTION = 57563
const ENGINE = 57564
const MAX_ROWS = 57565
const MIN_ROWS = 57566
const PACK_KEYS = 57567
const ROW_FORMAT = 57568
const STATS_AUTO_RECALC = 57569
const STATS_PERSISTENT = 57570
const STATS_SAMPLE_PAGES = 57571
const DYNAMIC = 57572
const COMPRESSED = 57573
const REDUNDANT = 57574
const COMPACT = 57575
const FIXED = 57576
const COLUMN_FORMAT = 57577
const AUTO_RANDOM = 57578
const RESTRICT = 57579
const CASCADE = 57580
const ACTION = 57581
const PARTIAL = 57582
const SIMPLE = 57583
const CHECK = 57584
const ENFORCED = 57585
const RANGE = 57586
const LIST = 57587
const ALGORITHM = 57588
const LINEAR = 57589
const PARTITIONS = 57590
const SUBPARTITION = 57591
const SUBPARTITIONS = 57592
const TYPE = 57593
const ANY = 57594
const SOME = 57595
const PREPARE = 57596
const DEALLOCATE = 57597
const PROPERTIES = 57598
const PARSER = 57599
const VISIBLE = 57600
const INVISIBLE = 57601
const BTREE = 57602
const HASH = 57603
const RTREE = 57604
const BSI = 57605
const ZONEMAP = 57606
const LEADING = 57607
const BOTH = 57608
const TRAILING = 57609
const UNKNOWN = 57610
const EXPIRE = 57611
const ACCOUNT = 57612
const UNLOCK = 57613
const DAY = 57614
const NEVER = 57615
const SECOND = 57616
const ASCII = 57617
const COALESCE = 57618
const COLLATION = 57619
const HOUR = 57620
const MICROSECOND = 57621
const MINUTE = 57622
const MONTH = 57623
const QUARTER = 57624
const REPEAT = 57625
const REVERSE = 57626
const ROW_COUNT = 57627
const WEEK = 57628
const REVOKE = 57629
const FUNCTION = 57630
const PRIVILEGES = 57631
const TABLESPACE = 57632
const EXECUTE = 57633
const SUPER = 57634
const GRANT = 57635
const OPTION = 57636
const REFERENCES = 57637
const REPLICATION = 57638
const SLAVE = 57639
const CLIENT = 57640
const USAGE = 57641
const RELOAD = 57642
const FILE = 57643
const TEMPORARY = 57644
const ROUTINE = 57645
const EVENT = 57646
const SHUTDOWN = 57647
const NULLX = 57648
const AUTO_INCREMENT = 57649
const APPROXNUM = 57650
const SIGNED = 57651
const UNSIGNED = 57652
const ZEROFILL = 57653
const USER = 57654
const IDENTIFIED = 57655
const CIPHER = 57656
const ISSUER = 57657
const X509 = 57658
const SUBJECT = 57659
const SAN = 57660
const REQUIRE = 57661
const SSL = 57662
const NONE = 57663
const PASSWORD = 57664
const MAX_QUERIES_PER_HOUR = 57665
const MAX_UPDATES_PER_HOUR = 57666
const MAX_CONNECTIONS_PER_HOUR = 57667
const MAX_USER_CONNECTIONS = 57668
const FORMAT = 57669
const VERBOSE = 57670
const CONNECTION = 57671
const LOAD = 57672
const INFILE = 57673
const TERMINATED = 57674
const OPTIONALLY = 57675
const ENCLOSED = 57676
const ESCAPED = 57677
const STARTING = 57678
const LINES = 57679
const DATABASES = 57680
const TABLES = 57681
const EXTENDED = 57682
const FULL = 57683
const PROCESSLIST = 57684
const FIELDS = 57685
const COLUMNS = 57686
const OPEN = 57687
const ERRORS = 57688
const WARNINGS = 57689
const INDEXES = 57690
const SCHEMAS = 57691
const NAMES = 57692
const GLOBAL = 57693
const SESSION = 57694
const ISOLATION = 57695
const LEVEL = 57696
const READ = 57697
const WRITE = 57698
const ONLY = 57699
const REPEATABLE = 57700
const COMMITTED = 57701
const UNCOMMITTED = 57702
const SERIALIZABLE = 57703
const LOCAL = 57704
const EXCEPT = 57705
const CURRENT_TIMESTAMP = 57706
const DATABASE = 57707
const CURRENT_TIME = 57708
const LOCALTIME = 57709
const LOCALTIMESTAMP = 57710
const UTC_DATE = 57711
const UTC_TIME = 57712
const UTC_TIMESTAMP = 57713
const REPLACE = 57714
const CONVERT = 57715
const SEPARATOR = 57716
const CURRENT_DATE = 57717
const CURRENT_USER = 57718
const CURRENT_ROLE = 57719
const SECOND_MICROSECOND = 57720
const MINUTE_MICROSECOND = 57721
const MINUTE_SECOND = 57722
const HOUR_MICROSECOND = 57723
const HOUR_SECOND = 57724
const HOUR_MINUTE = 57725
const DAY_MICROSECOND = 57726
const DAY_SECOND = 57727
const DAY_MINUTE = 57728
const DAY_HOUR = 57729
const YEAR_MONTH = 57730
const SQL_TSI_HOUR = 57731
const SQL_TSI_DAY = 57732
const SQL_TSI_WEEK = 57733
const SQL_TSI_MONTH = 57734
const SQL_TSI_QUARTER = 57735
const SQL_TSI_YEAR = 57736
const SQL_TSI_SECOND = 57737
const SQL_TSI_MINUTE = 57738
const RECURSIVE = 57739
const CONFIG = 57740
const MATCH = 57741
const AGAINST = 57742
const BOOLEAN = 57743
const LANGUAGE = 57744
const WITH = 57745
const QUERY = 57746
const EXPANSION = 57747
const ADDDATE = 57748
const BIT_AND = 57749
const BIT_OR = 57750
const BIT_XOR = 57751
const CAST = 57752
const COUNT = 57753
const APPROX_COUNT_DISTINCT = 57754
const APPROX_PERCENTILE = 57755
const CURDATE = 57756
const CURTIME = 57757
const DATE_ADD = 57758
const DATE_SUB = 57759
const EXTRACT = 57760
const GROUP_CONCAT = 57761
const MAX = 57762
const MID = 57763
const MIN = 57764
const NOW = 57765
const POSITION = 57766
const SESSION_USER = 57767
const STD = 57768
const STDDEV = 57769
const STDDEV_POP = 57770
const STDDEV_SAMP = 57771
const SUBDATE = 57772
const SUBSTR = 57773
const SUBSTRING = 57774
const SUM = 57775
const SYSDATE = 57776
const SYSTEM_USER = 57777
const TRANSLATE = 57778
const TRIM = 57779
const VARIANCE = 57780
const VAR_POP = 57781
const VAR_SAMP = 57782
const AVG = 57783
const ROW = 57784
const OUTFILE = 57785
const HEADER = 57786
const MAX_FILE_SIZE = 57787
const FORCE_QUOTE = 57788
const UNUSED = 57789

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"URL",
	"S3OPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PREPARE",
	"DEALLOCATE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'{'",
	"'}'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6794

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	18, 414,
	-2, 395,
	-1, 66,
	198, 564,
	-2, 600,
	-1, 81,
	225, 280,
	226, 280,
	-2, 301,
	-1, 335,
	60, 1387,
	468, 1387,
	-2, 104,
	-1, 354,
	60, 725,
	468, 725,
	-2, 562,
	-1, 355,
	60, 555,
	468, 555,
	-2, 563,
	-1, 361,
	18, 415,
	-2, 378,
	-1, 430,
	91, 1267,
	102, 1267,
	121, 1267,
	-2, 1090,
	-1, 458,
	18, 415,
	-2, 378,
	-1, 605,
	55, 1418,
	-2, 1425,
	-1, 613,
	55, 1419,
	-2, 1433,
	-1, 615,
	55, 1415,
	-2, 1435,
	-1, 616,
	55, 1416,
	-2, 1436,
	-1, 621,
	55, 1417,
	-2, 1442,
	-1, 622,
	55, 1420,
	-2, 1443,
	-1, 623,
	55, 1421,
	-2, 1444,
	-1, 624,
	55, 854,
	-2, 1445,
	-1, 625,
	55, 855,
	-2, 1446,
	-1, 626,
	55, 856,
	-2, 1447,
	-1, 628,
	55, 1422,
	-2, 1449,
	-1, 629,
	55, 873,
	-2, 1450,
	-1, 630,
	55, 872,
	-2, 1451,
	-1, 633,
	55, 1423,
	-2, 1454,
	-1, 634,
	55, 1424,
	-2, 1455,
	-1, 640,
	55, 935,
	-2, 1267,
	-1, 641,
	55, 944,
	-2, 1293,
	-1, 642,
	55, 948,
	-2, 1332,
	-1, 643,
	55, 959,
	-2, 1392,
	-1, 644,
	55, 961,
	-2, 1402,
	-1, 645,
	55, 949,
	-2, 1407,
	-1, 646,
	55, 957,
	-2, 1411,
	-1, 647,
	55, 938,
	-2, 1412,
	-1, 797,
	1, 590,
	57, 590,
	465, 590,
	-2, 597,
	-1, 934,
	18, 414,
	-2, 783,
	-1, 980,
	121, 1100,
	-2, 1098,
	-1, 982,
	121, 504,
	-2, 1095,
	-1, 983,
	121, 505,
	-2, 1096,
	-1, 1173,
	1, 591,
	57, 591,
	465, 591,
	-2, 597,
	-1, 1260,
	55, 1002,
	-2, 1409,
	-1, 1261,
	55, 1003,
	-2, 1410,
	-1, 1423,
	53, 335,
	56, 335,
	-2, 689,
	-1, 1742,
	76, 597,
	117, 597,
	153, 597,
	156, 597,
	-2, 637,
	-1, 1744,
	259, 750,
	-2, 731,
	-1, 1768,
	53, 335,
	56, 335,
	-2, 690,
	-1, 1855,
	76, 597,
	117, 597,
	153, 597,
	156, 597,
	-2, 638,
	-1, 1883,
	259, 750,
	-2, 732,
	-1, 2269,
	56, 612,
	57, 612,
	-2, 597,
	-1, 2273,
	56, 612,
	57, 612,
	-2, 597,
	-1, 2285,
	56, 616,
	57, 616,
	-2, 597,
	-1, 2288,
	56, 617,
	57, 617,
	-2, 597,
}

const yyPrivate = 57344

const yyLast = 23514

var yyAct = [...]int{
	784, 2273, 2275, 2280, 2272, 2246, 650, 2220, 2111, 1263,
	1913, 773, 2235, 668, 2191, 1220, 1895, 2172, 2085, 2173,
	1851, 2088, 2066, 539, 1736, 648, 1160, 98, 1911, 1264,
	865, 2021, 314, 320, 584, 320, 576, 2073, 1912, 831,
	1216, 362, 1903, 101, 361, 1762, 318, 22, 1797, 1732,
	324, 428, 1926, 801, 1564, 1884, 1588, 1459, 356, 356,
	1426, 518, 1560, 1547, 851, 1790, 97, 1902, 527, 385,
	1438, 1808, 1605, 1215, 604, 1800, 1748, 1407, 680, 61,
	1569, 825, 1812, 962, 1576, 1565, 1625, 1501, 1643, 429,
	1635, 1166, 1614, 529, 453, 1179, 771, 98, 977, 768,
	980, 971, 972, 1464, 963, 1333, 1347, 1251, 306, 659,
	61, 649, 844, 828, 1202, 1437, 826, 1401, 3, 317,
	15, 769, 803, 1859, 60, 315, 6, 316, 5, 1174,
	1178, 431, 786, 387, 433, 651, 455, 1277, 1262, 436,
	29, 22, 597, 848, 1140, 1265, 468, 326, 810, 812,
	901, 307, 811, 1218, 331, 331, 867, 310, 420, 384,
	506, 568, 1242, 870, 328, 327, 1147, 12, 760, 435,
	552, 29, 7, 61, 485, 4, 1550, 94, 1844, 1939,
	1847, 1735, 781, 965, 319, 585, 2138, 596, 92, 1548,
	554, 89, 1143, 1382, 93, 93, 26, 83, 67, 93,
	1402, 26, 83, 67, 2128, 516, 358, 838, 505, 88,
	729, 374, 1389, 452, 15, 434, 77, 550, 546, 322,
	6, 305, 5, 726, 93, 2160, 26, 83, 67, 392,
	440, 439, 382, 1393, 29, 406, 93, 49, 555, 93,
	93, 814, 90, 728, 833, 834, 776, 90, 540, 541,
	500, 421, 93, 2195, 26, 83, 67, 2158, 538, 2019,
	438, 537, 540, 541, 1526, 496, 2176, 2177, 2022, 2023,
	2024, 2025, 90, 1737, 1552, 2099, 1553, 2102, 1554, 749,
	1942, 780, 1374, 471, 90, 462, 1606, 90, 90, 1577,
	1578, 1579, 1580, 845, 407, 1410, 1408, 1405, 1409, 1411,
	90, 1404, 1403, 1143, 442, 1609, 1145, 1923, 461, 84,
	85, 487, 86, 87, 1796, 1795, 1410, 1408, 460, 1409,
	1411, 1841, 320, 761, 98, 1900, 498, 499, 497, 2137,
	376, 486, 1729, 2005, 1779, 2162, 2186, 1994, 1608, 321,
	373, 372, 1775, 2265, 2281, 2200, 491, 457, 459, 763,
	433, 458, 2157, 1778, 1254, 1255, 1256, 2113, 363, 2207,
	2135, 368, 437, 478, 1988, 1252, 2087, 2175, 2074, 2075,
	2076, 2078, 2077, 2256, 492, 1957, 1956, 66, 82, 91,
	360, 47, 2109, 2110, 385, 2113, 1469, 1255, 1256, 2119,
	61, 61, 435, 2164, 2165, 2140, 2141, 81, 76, 75,
	1390, 564, 494, 547, 536, 535, 2282, 66, 2247, 91,
	1413, 1414, 1415, 1416, 2276, 441, 1945, 356, 454, 1502,
	519, 495, 517, 429, 429, 429, 471, 81, 356, 356,
	520, 762, 522, 473, 472, 1983, 551, 2097, 434, 553,
	1386, 1776, 511, 320, 600, 600, 1581, 788, 432, 1229,
	1151, 29, 29, 371, 489, 1573, 521, 731, 78, 79,
	1730, 323, 1391, 367, 524, 581, 490, 493, 1457, 464,
	465, 2238, 836, 599, 599, 747, 488, 1225, 1979, 1792,
	1791, 531, 356, 356, 461, 356, 1227, 1226, 543, 544,
	558, 57, 732, 837, 774, 80, 482, 58, 556, 557,
	727, 1224, 835, 356, 356, 409, 476, 379, 380, 381,
	410, 587, 2260, 331, 2224, 306, 375, 403, 1771, 356,
	1594, 356, 756, 797, 578, 578, 385, 1555, 1466, 802,
	540, 541, 61, 98, 59, 2163, 412, 793, 1427, 783,
	2139, 532, 787, 2086, 1380, 61, 1379, 819, 508, 1373,
	1368, 356, 510, 98, 61, 1194, 1548, 2051, 1153, 398,
	1158, 859, 540, 541, 563, 356, 429, 1253, 356, 817,
	846, 1137, 807, 882, 1146, 1574, 473, 472, 789, 331,
	2239, 775, 484, 1168, 860, 414, 413, 574, 575, 1843,
	466, 356, 356, 864, 98, 755, 1383, 1774, 852, 1468,
	879, 752, 778, 751, 852, 852, 29, 68, 68, 820,
	868, 1777, 68, 758, 735, 29, 526, 331, 790, 733,
	583, 586, 474, 542, 738, 779, 545, 595, 305, 808,
	809, 883, 724, 866, 1984, 1985, 400, 68, 869, 399,
	502, 456, 805, 754, 919, 734, 764, 772, 753, 68,
	821, 750, 68, 68, 806, 590, 591, 592, 593, 594,
	398, 331, 1598, 936, 432, 68, 815, 816, 792, 782,
	777, 742, 743, 397, 571, 572, 573, 1542, 1154, 1570,
	1573, 401, 1540, 935, 530, 799, 1142, 567, 331, 847,
	862, 943, 813, 1981, 798, 1410, 1408, 1980, 1409, 1411,
	398, 1419, 569, 2236, 2237, 445, 450, 451, 533, 945,
	1267, 1266, 842, 570, 2242, 824, 2233, 1589, 857, 858,
	2123, 1845, 1612, 1370, 843, 1231, 463, 1541, 1708, 969,
	969, 974, 934, 854, 855, 856, 1141, 400, 1703, 863,
	399, 1951, 1348, 1348, 1507, 861, 377, 411, 1399, 878,
	875, 982, 791, 1682, 1679, 1680, 1681, 746, 566, 1713,
	802, 1712, 1711, 1709, 1974, 745, 937, 938, 939, 940,
	941, 1340, 2052, 2054, 2055, 2056, 2053, 400, 434, 983,
	399, 875, 1990, 909, 1989, 1338, 1339, 1337, 1752, 98,
	98, 876, 877, 878, 875, 1747, 1272, 534, 2062, 1180,
	1574, 2060, 2255, 2271, 959, 1567, 1275, 435, 2058, 1568,
	1571, 2252, 2217, 1139, 314, 2048, 1276, 2201, 61, 2147,
	2095, 1196, 1420, 1710, 2094, 2068, 2046, 868, 1163, 1165,
	408, 968, 2045, 2061, 1184, 415, 2059, 953, 394, 356,
	396, 406, 2254, 2057, 1852, 393, 391, 390, 402, 395,
	2047, 404, 405, 434, 2044, 869, 876, 877, 878, 875,
	356, 1572, 2041, 1157, 1298, 1705, 447, 448, 449, 2035,
	2032, 2031, 600, 1940, 98, 1221, 1931, 1930, 1929, 29,
	1925, 1247, 1924, 1249, 852, 852, 852, 1136, 961, 981,
	1917, 1758, 1757, 975, 1756, 976, 1755, 1135, 386, 1538,
	1156, 599, 736, 2196, 1188, 1243, 1244, 1245, 1246, 1273,
	1274, 1223, 1692, 1197, 922, 923, 924, 925, 926, 919,
	2185, 1175, 1150, 876, 877, 878, 875, 1270, 2168, 1834,
	1185, 1186, 1187, 2067, 2117, 331, 1714, 1715, 2116, 2093,
	1312, 2049, 2042, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1241, 1236, 1222, 1342, 1343,
	1257, 1190, 959, 1192, 1357, 1191, 1833, 1193, 1189, 2038,
	813, 2285, 2169, 2037, 1349, 2036, 1352, 2263, 1512, 876,
	877, 878, 875, 1359, 1161, 1162, 1228, 1976, 876, 877,
	878, 875, 1941, 1239, 876, 877, 878, 875, 1232, 1233,
	1234, 1294, 930, 1291, 933, 1937, 1733, 1293, 1290, 1292,
	1296, 1297, 1927, 1460, 1240, 1295, 2253, 1850, 931, 932,
	929, 1476, 918, 917, 927, 928, 920, 921, 922, 923,
	924, 925, 926, 919, 1848, 876, 877, 878, 875, 1335,
	1765, 1268, 1269, 1341, 1271, 876, 877, 878, 875, 1586,
	1307, 1308, 1309, 1310, 1311, 1585, 1584, 1317, 1318, 1319,
	1320, 1583, 918, 917, 927, 928, 920, 921, 922, 923,
	924, 925, 926, 919, 876, 877, 878, 875, 695, 694,
	2230, 1155, 955, 1350, 1362, 1351, 1353, 1354, 876, 877,
	878, 875, 794, 795, 796, 1358, 916, 1360, 920, 921,
	922, 923, 924, 925, 926, 919, 1361, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1301, 1302,
	1303, 1304, 1305, 1306, 1299, 1300, 918, 917, 927, 928,
	920, 921, 922, 923, 924, 925, 926, 919, 1375, 915,
	1699, 737, 1516, 365, 356, 1472, 1515, 356, 1510, 325,
	461, 1509, 356, 364, 1472, 2290, 2284, 2283, 2091, 1396,
	1385, 918, 917, 927, 928, 920, 921, 922, 923, 924,
	925, 926, 919, 2144, 876, 877, 878, 875, 1423, 1489,
	876, 877, 878, 875, 1429, 2143, 1394, 1395, 2124, 787,
	1149, 2266, 2262, 2261, 589, 1434, 2017, 1149, 2250, 2012,
	461, 98, 98, 98, 98, 1149, 2249, 2008, 357, 2007,
	1439, 1999, 461, 98, 1454, 2223, 2222, 1421, 876, 877,
	878, 875, 1439, 1835, 1488, 2001, 2183, 1418, 22, 1832,
	356, 1932, 1398, 876, 877, 878, 875, 1824, 98, 98,
	2001, 2178, 804, 1384, 1238, 2166, 876, 877, 878, 875,
	1789, 1387, 1742, 876, 877, 878, 875, 1722, 1455, 1624,
	61, 1221, 2155, 2154, 1599, 1381, 886, 887, 888, 889,
	890, 891, 892, 884, 1376, 2001, 2133, 1462, 1463, 2001,
	2132, 1477, 2001, 2131, 1431, 1212, 1432, 2001, 2130, 2122,
	2121, 1519, 1397, 2016, 2015, 1473, 1517, 1175, 1474, 1475,
	1428, 15, 804, 1417, 2014, 2013, 1514, 6, 1422, 5,
	1820, 1430, 2010, 2011, 1513, 1435, 1511, 1440, 1441, 1442,
	1443, 29, 2010, 2009, 1481, 1451, 1453, 1452, 1593, 1458,
	1819, 1425, 876, 877, 878, 875, 1478, 1483, 1484, 1485,
	1486, 1487, 1433, 1491, 1461, 1611, 1496, 1492, 1493, 1494,
	1495, 1471, 876, 877, 878, 875, 1183, 2006, 2001, 2000,
	1467, 1472, 1697, 1472, 1683, 1499, 1500, 969, 1470, 1530,
	969, 1472, 1480, 1533, 1818, 1504, 1472, 1479, 1508, 356,
	1720, 1183, 1377, 356, 356, 1702, 1456, 356, 1436, 1536,
	1424, 1520, 1372, 1371, 852, 1356, 876, 877, 878, 875,
	852, 461, 876, 877, 878, 875, 1355, 876, 877, 878,
	875, 1563, 1527, 98, 1696, 934, 873, 1537, 1366, 1365,
	1183, 1182, 1149, 1148, 1211, 98, 1180, 588, 1597, 1525,
	740, 739, 1695, 2241, 1425, 1532, 876, 877, 878, 875,
	1694, 2228, 501, 1497, 61, 479, 480, 1335, 1472, 480,
	1498, 1529, 1587, 1506, 876, 877, 878, 875, 1212, 481,
	871, 434, 876, 877, 878, 875, 1521, 1628, 1522, 1528,
	1363, 1531, 1534, 1743, 1535, 1143, 1590, 1591, 1539, 1543,
	1545, 1723, 1212, 482, 1582, 1693, 1546, 918, 917, 927,
	928, 920, 921, 922, 923, 924, 925, 926, 919, 1369,
	1345, 1238, 1630, 482, 1159, 1138, 1595, 876, 877, 878,
	875, 356, 1684, 525, 565, 2286, 1592, 356, 93, 1690,
	1691, 1596, 2232, 1623, 1993, 93, 1689, 1602, 83, 67,
	2226, 2208, 2205, 2203, 2146, 1619, 2083, 1704, 2071, 1688,
	2069, 2064, 1717, 2026, 1719, 356, 1687, 1716, 876, 877,
	878, 875, 1799, 1718, 1600, 1601, 1628, 1686, 98, 1997,
	1610, 876, 877, 878, 875, 1996, 90, 1746, 876, 877,
	878, 875, 1995, 90, 1992, 1622, 1987, 1685, 1701, 876,
	877, 878, 875, 1972, 528, 1809, 1698, 1801, 1813, 356,
	1816, 356, 1806, 1633, 98, 1768, 1805, 1741, 1707, 876,
	877, 878, 875, 1740, 1632, 1785, 1760, 578, 1721, 1753,
	1724, 1336, 461, 578, 1700, 876, 877, 878, 875, 90,
	1400, 1364, 1439, 1230, 1198, 1761, 876, 877, 878, 875,
	1181, 1750, 960, 958, 957, 61, 1221, 1788, 1728, 1631,
	956, 1725, 1783, 954, 1171, 1784, 1344, 1751, 1786, 1749,
	1745, 1749, 1781, 902, 1744, 433, 1787, 951, 1770, 1759,
	1754, 876, 877, 878, 875, 950, 1766, 948, 876, 877,
	878, 875, 947, 946, 944, 1767, 914, 1773, 1199, 913,
	912, 911, 1782, 910, 908, 578, 907, 1763, 906, 905,
	904, 903, 900, 899, 898, 1803, 1804, 897, 1204, 1207,
	1208, 1209, 1205, 1793, 1206, 1210, 896, 895, 894, 1807,
	893, 477, 1811, 1204, 1207, 1208, 1209, 1205, 1769, 1206,
	1210, 1802, 1821, 759, 730, 1772, 2270, 356, 356, 483,
	2213, 98, 1615, 1616, 1810, 1823, 2211, 2174, 1618, 1412,
	1237, 503, 1448, 1621, 461, 1856, 1620, 1449, 1904, 1906,
	1446, 1904, 1904, 852, 1563, 1447, 1450, 1825, 1208, 1209,
	1827, 461, 1829, 1814, 1445, 1817, 1444, 1367, 1176, 1549,
	1842, 507, 1161, 1162, 1822, 48, 1557, 28, 27, 1169,
	1830, 1831, 823, 1910, 1828, 1826, 802, 1943, 1837, 1726,
	1134, 1905, 1840, 1556, 1214, 800, 1887, 2188, 1727, 1901,
	1267, 1266, 513, 514, 549, 302, 1881, 303, 304, 548,
	1853, 509, 2227, 2151, 1909, 2149, 1920, 2104, 1907, 1908,
	2103, 2101, 1836, 1838, 1839, 2029, 2027, 1849, 1780, 1770,
	1890, 1739, 1738, 1627, 365, 512, 1885, 364, 1919, 1921,
	1626, 1898, 1899, 1465, 364, 804, 1482, 1886, 927, 928,
	920, 921, 922, 923, 924, 925, 926, 919, 1947, 1928,
	2215, 2214, 2215, 1378, 1933, 475, 1935, 2214, 918, 917,
	927, 928, 920, 921, 922, 923, 924, 925, 926, 919,
	1213, 1891, 388, 34, 1, 523, 378, 1313, 515, 1915,
	1916, 744, 356, 444, 1936, 470, 741, 469, 467, 1346,
	1278, 98, 681, 964, 970, 2065, 2187, 2219, 2145, 2190,
	1906, 1950, 757, 1975, 1948, 1949, 667, 1952, 1953, 1954,
	1955, 2096, 1551, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1977, 1901, 1973,
	1991, 2018, 2098, 2020, 2003, 1392, 1934, 1388, 504, 2030,
	1523, 1503, 1998, 1524, 693, 684, 949, 2004, 686, 725,
	433, 446, 2002, 683, 1918, 1607, 366, 1897, 443, 1566,
	389, 2063, 918, 917, 927, 928, 920, 921, 922, 923,
	924, 925, 926, 919, 1922, 1734, 1794, 1815, 1763, 1798,
	2028, 2279, 2269, 461, 1893, 2245, 461, 461, 461, 2225,
	2112, 2043, 461, 2264, 1221, 2156, 1518, 2033, 2034, 2206,
	2199, 2108, 1944, 2039, 2040, 329, 1892, 1894, 839, 559,
	418, 2072, 61, 2084, 2080, 2081, 2082, 2106, 1575, 2090,
	1406, 1167, 2079, 1144, 356, 356, 770, 330, 2136, 2092,
	2089, 2070, 369, 1170, 370, 1173, 1172, 1258, 2107, 885,
	1334, 952, 2100, 918, 917, 927, 928, 920, 921, 922,
	923, 924, 925, 926, 919, 98, 942, 602, 1505, 658,
	2114, 2115, 461, 652, 1604, 1603, 1900, 1896, 818, 33,
	32, 31, 874, 978, 461, 682, 100, 1195, 1888, 979,
	1731, 2105, 1938, 2192, 666, 2120, 665, 664, 663, 2125,
	2129, 1203, 1201, 1200, 866, 830, 829, 872, 2171, 2170,
	2126, 2127, 2134, 1846, 1986, 2050, 1982, 1978, 2142, 2118,
	1855, 1854, 2150, 2148, 2152, 2153, 1882, 1883, 1889, 1642,
	578, 578, 1638, 2159, 2161, 1640, 1641, 1639, 1706, 1634,
	1561, 1562, 1559, 1558, 1617, 2167, 1613, 2194, 966, 973,
	785, 95, 2179, 2180, 2181, 2182, 2198, 827, 1152, 11,
	2193, 917, 927, 928, 920, 921, 922, 923, 924, 925,
	926, 919, 2197, 10, 748, 9, 14, 21, 20, 19,
	56, 55, 54, 53, 2202, 18, 2204, 8, 2209, 52,
	51, 2212, 2210, 50, 2184, 2221, 17, 16, 46, 44,
	2216, 43, 2218, 42, 461, 41, 461, 40, 39, 38,
	45, 37, 36, 35, 774, 2229, 774, 2231, 65, 64,
	63, 62, 23, 24, 2194, 2244, 25, 74, 2240, 73,
	70, 72, 71, 461, 2234, 69, 2248, 2193, 2243, 30,
	13, 2, 0, 774, 2251, 0, 0, 0, 2221, 2257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2267, 0, 0, 0, 0, 0, 0, 2268, 0,
	0, 0, 2259, 0, 0, 0, 2278, 0, 2277, 0,
	0, 0, 0, 0, 0, 0, 0, 2288, 2287, 0,
	0, 2278, 0, 0, 1092, 1079, 2289, 1041, 1094, 1015,
	1030, 1102, 1031, 1032, 1066, 994, 1050, 225, 1028, 0,
	1082, 986, 1018, 1019, 988, 1025, 989, 1016, 1043, 169,
	1014, 1053, 195, 1100, 0, 0, 254, 209, 0, 0,
	1046, 1084, 1048, 1071, 1040, 1067, 1002, 1060, 1095, 1029,
	1064, 1096, 0, 0, 0, 0, 0, 794, 795, 796,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	1063, 1089, 1027, 0, 154, 1093, 1047, 1065, 0, 0,
	987, 1061, 0, 992, 995, 1101, 1087, 1022, 1023, 0,
	0, 0, 0, 0, 0, 0, 1044, 1049, 1068, 1037,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1020,
	0, 1057, 0, 0, 0, 997, 993, 0, 1042, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 1133, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 1091, 298, 163,
	289, 996, 281, 147, 1128, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 1112, 1113, 1114, 1115, 1116,
	300, 301, 1124, 1125, 0, 1129, 1130, 1131, 1001, 0,
	1021, 1069, 0, 985, 1077, 1085, 1039, 283, 1088, 1036,
	1035, 1119, 0, 1118, 258, 1120, 1121, 194, 1083, 1017,
	1026, 299, 1024, 244, 227, 1090, 1056, 1132, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 1117, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1126, 0, 1127, 295, 176, 984, 278, 0, 223, 1080,
	990, 1000, 998, 1033, 1058, 1059, 219, 294, 1073, 1076,
	1074, 1103, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 255, 276, 288, 279, 1034, 1008,
	1045, 287, 1011, 1009, 1072, 1010, 1062, 1105, 213, 214,
	215, 216, 180, 0, 156, 1054, 1038, 1106, 1107, 1108,
	1109, 1110, 1111, 1013, 1086, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 1078, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 1007,
	1012, 1006, 1051, 1052, 1097, 1098, 1099, 1070, 999, 1081,
	1003, 1005, 1004, 918, 917, 927, 928, 920, 921, 922,
	923, 924, 925, 926, 919, 0, 0, 0, 0, 0,
	0, 0, 1075, 0, 1055, 138, 0, 196, 1104, 237,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 689, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 225, 0, 1122, 1123, 291,
	292, 293, 277, 660, 0, 0, 0, 169, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	703, 709, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 653, 0, 0, 0, 603, 695, 694, 669, 678,
	0, 0, 151, 670, 0, 677, 671, 675, 674, 672,
	673, 0, 640, 0, 0, 0, 0, 0, 0, 601,
	657, 0, 661, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 654, 655, 0, 0, 0, 0, 690,
	0, 656, 0, 0, 692, 0, 679, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 676, 688, 646, 163, 644, 687,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 685, 0, 0, 283, 0, 0, 702, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 647,
	0, 244, 227, 712, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1315, 1314,
	1316, 295, 176, 0, 278, 700, 223, 711, 696, 697,
	698, 701, 704, 705, 642, 645, 706, 708, 710, 713,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 643, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 691, 213, 214, 215, 216,
	641, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 719, 699, 718,
	720, 721, 717, 722, 723, 707, 662, 0, 715, 714,
	716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 605,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 117, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 638, 639, 0, 0, 291, 292, 293,
	277, 93, 0, 689, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 660, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 703, 709,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 653,
	0, 0, 0, 603, 695, 694, 669, 678, 0, 0,
	151, 670, 0, 677, 671, 675, 674, 672, 673, 0,
	640, 0, 0, 0, 0, 0, 0, 601, 657, 0,
	661, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 654, 655, 0, 0, 0, 0, 690, 0, 656,
	0, 0, 692, 0, 679, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 676, 688, 646, 163, 644, 687, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	685, 0, 0, 283, 0, 0, 702, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 647, 0, 244,
	227, 712, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 700, 223, 711, 696, 697, 698, 701,
	704, 705, 642, 645, 706, 708, 710, 713, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 643, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 691, 213, 214, 215, 216, 641, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 719, 699, 718, 720, 721,
	717, 722, 723, 707, 662, 0, 715, 714, 716, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 68, 237, 174, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 117, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 689, 0, 291, 292, 293, 277, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 660, 0, 0, 0, 169, 853, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 703, 709,
	0, 0, 0, 0, 0, 0, 849, 0, 0, 653,
	0, 0, 0, 603, 695, 694, 669, 678, 0, 0,
	151, 670, 0, 677, 671, 675, 674, 672, 673, 0,
	640, 0, 0, 0, 0, 0, 0, 601, 657, 0,
	661, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 654, 655, 0, 0, 0, 0, 690, 0, 656,
	0, 0, 850, 0, 679, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 676, 688, 646, 163, 644, 687, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	685, 0, 0, 283, 0, 0, 702, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 647, 0, 244,
	227, 712, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 700, 223, 711, 696, 697, 698, 701,
	704, 705, 642, 645, 706, 708, 710, 713, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 643, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 691, 213, 214, 215, 216, 641, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 719, 699, 718, 720, 721,
	717, 722, 723, 707, 662, 0, 715, 714, 716, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 117, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 689, 0, 291, 292, 293, 277, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 660, 0, 0, 0, 169, 2258, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 703, 709,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 653,
	0, 0, 0, 603, 695, 694, 669, 678, 0, 0,
	151, 670, 0, 677, 671, 675, 674, 672, 673, 0,
	640, 0, 0, 0, 0, 0, 0, 601, 657, 0,
	661, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 654, 655, 0, 0, 0, 0, 690, 0, 656,
	0, 0, 692, 0, 679, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 676, 688, 646, 163, 644, 687, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	685, 0, 0, 283, 0, 0, 702, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 647, 0, 244,
	227, 712, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 700, 223, 711, 696, 697, 698, 701,
	704, 705, 642, 645, 706, 708, 710, 713, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 643, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 691, 213, 214, 215, 216, 641, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 719, 699, 718, 720, 721,
	717, 722, 723, 707, 662, 0, 715, 714, 716, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 117, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 689, 0, 291, 292, 293, 277, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 660, 0, 0, 0, 169, 853, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 703, 709,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 653,
	0, 0, 0, 603, 695, 694, 669, 678, 0, 0,
	151, 670, 0, 677, 671, 675, 674, 672, 673, 0,
	640, 0, 0, 0, 0, 0, 0, 601, 657, 0,
	661, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 654, 655, 0, 0, 0, 0, 690, 0, 656,
	0, 0, 692, 0, 679, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 676, 688, 646, 163, 644, 687, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	685, 0, 0, 283, 0, 0, 702, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 647, 0, 244,
	227, 712, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 700, 223, 711, 696, 697, 698, 701,
	704, 705, 642, 645, 706, 708, 710, 713, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 643, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 691, 213, 214, 215, 216, 641, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 719, 699, 718, 720, 721,
	717, 722, 723, 707, 662, 0, 715, 714, 716, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, 615, 616, 617,
	618, 619, 117, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, 630, 631, 632, 633, 634, 635, 636,
	637, 638, 639, 0, 0, 291, 292, 293, 277, 689,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 660, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 703, 709, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 653, 0, 0, 0, 603,
	695, 694, 669, 678, 0, 0, 151, 670, 0, 677,
	671, 675, 674, 672, 673, 0, 640, 0, 0, 0,
	0, 0, 0, 601, 657, 0, 661, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 654, 655, 0,
	0, 0, 0, 690, 0, 656, 0, 0, 692, 0,
	679, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 676, 688,
	646, 163, 644, 687, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 685, 0, 0, 283,
	0, 0, 702, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 647, 0, 244, 227, 712, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 700,
	223, 711, 696, 697, 698, 701, 704, 705, 642, 645,
	706, 708, 710, 713, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 643,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 691,
	213, 214, 215, 216, 641, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 719, 699, 718, 720, 721, 717, 722, 723, 707,
	662, 0, 715, 714, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 117, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 689,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 660, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 703, 709, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 653, 0, 0, 0, 603,
	695, 694, 669, 678, 0, 0, 151, 670, 0, 677,
	671, 675, 674, 672, 673, 0, 640, 0, 0, 0,
	0, 0, 0, 601, 657, 0, 661, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 654, 655, 598,
	0, 0, 0, 690, 0, 656, 0, 0, 692, 0,
	679, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 676, 688,
	646, 163, 644, 687, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 685, 0, 0, 283,
	0, 0, 702, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 647, 0, 244, 227, 712, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 700,
	223, 711, 696, 697, 698, 701, 704, 705, 642, 645,
	706, 708, 710, 713, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 643,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 691,
	213, 214, 215, 216, 641, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 719, 699, 718, 720, 721, 717, 722, 723, 707,
	662, 0, 715, 714, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 117, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 689,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 660, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 703, 709, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 653, 0, 0, 0, 603,
	695, 694, 669, 678, 0, 0, 151, 670, 0, 677,
	671, 675, 674, 672, 673, 0, 640, 0, 0, 0,
	0, 0, 0, 601, 657, 0, 661, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 654, 655, 0,
	0, 0, 0, 690, 0, 656, 0, 0, 692, 0,
	679, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 676, 688,
	646, 163, 644, 687, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 685, 0, 0, 283,
	0, 0, 702, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 647, 0, 244, 227, 712, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 700,
	223, 711, 696, 697, 698, 701, 704, 705, 642, 645,
	706, 708, 710, 713, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 643,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 691,
	213, 214, 215, 216, 641, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 719, 699, 718, 720, 721, 717, 722, 723, 707,
	662, 0, 715, 714, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 117, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 689,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 225,
	0, 0, 0, 1259, 0, 0, 0, 660, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 703, 709, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 653, 0, 0, 0, 603,
	695, 694, 669, 678, 0, 0, 151, 670, 0, 677,
	671, 675, 674, 672, 673, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 657, 0, 661, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 654, 655, 0,
	0, 0, 0, 690, 0, 656, 0, 0, 692, 0,
	679, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 676, 688,
	646, 163, 644, 687, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 685, 0, 0, 283,
	0, 0, 702, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 647, 0, 244, 227, 712, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 1260,
	1261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 700,
	223, 711, 696, 697, 698, 701, 704, 705, 642, 645,
	706, 708, 710, 713, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 643,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 691,
	213, 214, 215, 216, 641, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 719, 699, 718, 720, 721, 717, 722, 723, 707,
	662, 0, 715, 714, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 117, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 689,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 660, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 703, 709, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 653, 0, 0, 0, 603,
	695, 694, 669, 678, 0, 0, 151, 670, 0, 677,
	671, 675, 674, 672, 673, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 657, 0, 661, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 654, 655, 0,
	0, 0, 0, 690, 0, 656, 0, 0, 692, 0,
	679, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 676, 688,
	646, 163, 644, 687, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 685, 0, 0, 283,
	0, 0, 702, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 647, 0, 244, 227, 712, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 700,
	223, 711, 696, 697, 698, 701, 704, 705, 642, 645,
	706, 708, 710, 713, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 643,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 691,
	213, 214, 215, 216, 641, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 719, 699, 718, 720, 721, 717, 722, 723, 707,
	662, 0, 715, 714, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 117, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 689,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 660, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 703, 709, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 603,
	695, 694, 669, 678, 0, 0, 151, 670, 0, 677,
	671, 675, 674, 672, 673, 0, 640, 0, 0, 0,
	0, 0, 0, 601, 657, 0, 661, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 654, 655, 0,
	0, 0, 0, 690, 0, 656, 0, 0, 692, 0,
	679, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 676, 688,
	646, 163, 644, 687, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 300, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 685, 0, 0, 283,
	0, 0, 702, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 647, 0, 244, 227, 712, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 700,
	223, 711, 696, 697, 698, 701, 704, 705, 642, 645,
	706, 708, 710, 713, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 643,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 691,
	213, 214, 215, 216, 641, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 719, 699, 718, 720, 721, 717, 722, 723, 707,
	662, 0, 715, 714, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 117, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 0,
	0, 291, 292, 293, 277, 341, 0, 340, 344, 336,
	0, 0, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 332, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 351, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 0, 0,
	355, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 341, 0, 340, 344,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 351, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 334, 333,
	337, 0, 0, 0, 0, 0, 339, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 343, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 335, 260, 282, 238, 359, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 334,
	333, 337, 0, 0, 0, 0, 0, 339, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 343,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 765, 0, 0, 338, 342, 345, 229,
	346, 347, 0, 0, 348, 349, 350, 0, 0, 352,
	353, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 338, 342, 766,
	0, 346, 767, 0, 0, 348, 349, 350, 0, 0,
	352, 353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 0, 0, 291,
	292, 293, 277, 341, 0, 340, 344, 336, 0, 0,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 332,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 351,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 354, 0, 0, 355, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 0, 0, 298, 163, 289, 0,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 300, 301,
	0, 0, 0, 0, 0, 0, 334, 333, 337, 0,
	0, 0, 0, 0, 339, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 343, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	335, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 338, 342, 345, 229, 346, 347,
	0, 0, 348, 349, 350, 0, 0, 352, 353, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	180, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 0, 0, 291, 292, 293,
	277, 93, 0, 26, 83, 67, 0, 0, 0, 0,
	0, 0, 0, 225, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 313,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 309, 311,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 68, 237, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 225, 0, 291, 292, 293, 277, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 1570, 1573, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1574, 283, 0, 0, 0, 1567, 0, 1566,
	258, 1568, 1571, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 1572, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 180, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 225, 0, 291, 292, 293, 277, 0,
	880, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 881, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 876, 877, 878, 875, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 180, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 225, 0, 291, 292, 293, 277, 0,
	0, 0, 0, 0, 0, 169, 417, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 425, 426, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 400, 281, 147,
	399, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 300, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 416, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 419, 213, 214, 215, 216, 180, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 427, 422, 423, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 424, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 93, 0, 291, 292, 293, 277, 0,
	0, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 967, 0, 99, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 0, 0, 298, 163, 289, 0,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	180, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 68, 237, 174, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 225, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 0, 0, 169, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 425, 426, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 0, 0, 298, 163, 289, 400,
	281, 147, 399, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 300, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	180, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 427, 422, 423, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 424, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 0, 0, 291, 292, 293,
	277, 225, 0, 0, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 169, 561, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 354, 0, 0, 355, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	0, 0, 298, 163, 289, 0, 281, 147, 0, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 300, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	562, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 0, 0, 291, 292, 293, 277, 225, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 0, 0,
	355, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 840, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	582, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	580, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	577, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	580, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2189, 0, 99, 695, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	580, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	580, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1764, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	580, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 1544, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	1235, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	580, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 695, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1914, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	580, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1598, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1629, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	1248, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 0, 0,
	355, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	300, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 1177, 0, 291,
	292, 293, 277, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 1164, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 580, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 822, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 383,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 96, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 291, 292, 293, 277,
	0, 1217, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 794, 795, 796, 1219, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 300, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 794, 795,
	796, 1219, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 0, 0, 298,
	163, 289, 0, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 300, 301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 794, 795, 796, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 0, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 300, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 1658, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	1298, 0, 0, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 0, 0, 1658, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1646, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 0, 237, 174, 0, 0, 1665, 1669,
	1671, 1673, 1675, 1676, 1678, 0, 1682, 1679, 1680, 1681,
	0, 0, 1660, 1661, 1662, 1663, 1644, 1645, 1666, 0,
	1647, 0, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1657, 1664, 0, 291, 292, 293, 277, 0, 0,
	1668, 1670, 1672, 1674, 1677, 0, 0, 1294, 0, 1291,
	0, 0, 1646, 1293, 1290, 1292, 1296, 1297, 0, 0,
	0, 1295, 0, 0, 0, 0, 0, 0, 0, 1665,
	1669, 1671, 1673, 1675, 1676, 1678, 1659, 1682, 1679, 1680,
	1681, 1879, 0, 1660, 1661, 1662, 1663, 1644, 1645, 1666,
	0, 1647, 0, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 1664, 0, 0, 0, 1176, 0, 0,
	0, 1668, 1670, 1672, 1674, 1677, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1861, 0, 0, 0, 0, 0, 1659, 0, 0,
	0, 0, 1879, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1301, 1302, 1303, 1304, 1305, 1306,
	1299, 1300, 0, 1879, 0, 0, 0, 0, 1176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1636,
	1637, 0, 0, 0, 0, 0, 0, 0, 0, 1176,
	0, 0, 1946, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1861, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1865, 0, 0, 0, 0, 0, 0,
	0, 1667, 0, 0, 1869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1858, 0, 0, 0, 1860, 1862,
	1864, 0, 1866, 1867, 1868, 1870, 1871, 1872, 1874, 1875,
	1876, 1877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1865, 0, 0, 0, 1880, 0,
	0, 0, 1667, 0, 0, 1869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1865, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1858, 1869, 0, 0, 1860,
	1862, 1864, 1878, 1866, 1867, 1868, 1870, 1871, 1872, 1874,
	1875, 1876, 1877, 0, 0, 0, 1858, 0, 0, 1857,
	1860, 1862, 1864, 0, 1866, 1867, 1868, 1870, 1871, 1872,
	1874, 1875, 1876, 1877, 1873, 0, 0, 0, 0, 1880,
	0, 1863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1857, 0, 0, 0, 1878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1873, 0, 0, 0, 0,
	0, 1857, 1863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1873, 0, 0, 0,
	0, 0, 0, 1863,
}

var yyPact = [...]int{
	187, -1000, -288, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 20965, -1000, -1000, 1518,
	-1000, 8614, 21405, 68, 21405, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 264, -1000, 21405,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8156, 7698, 145,
	-1000, 1828, -1000, -1000, -1000, -1000, 134, 320, 20525, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 483, -35, 320, 378, 386, 454, 454, 9934, 1828,
	233, 33, -1000, 682, 187, 199, 21405, -1000, 520, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1828, 1828, 21405, -61, 635,
	-1000, 192, 245, 232, 501, -1000, -1000, -1000, -1000, 1853,
	-1000, 21405, 1658, 21405, -1000, 1393, 1447, -1000, -1000, 1674,
	-1000, 114, 25, -9, 147, -1000, -1000, 175, -1000, -1000,
	-1000, -1000, -1000, 66, -1000, 17, -1000, 12, -1000, -1000,
	-1000, -106, -1000, -1000, -1000, -1000, -1000, 1390, 440, 1689,
	-171, 1741, 1793, 1511, 1818, 1779, 8, 218, 218, 258,
	218, -1000, -1000, -1000, -1000, -1000, -1000, 330, -1000, -1000,
	-1000, -1000, 1457, 21405, -1000, 1529, 585, 585, 696, 179,
	-1000, -1000, -98, -123, 585, 585, -123, 21, -1000, 1787,
	1782, -1000, -1000, -1000, -1000, -1000, -1000, 234, 238, -1000,
	-182, -1000, 368, -1000, 358, -1000, 11272, 174, 1458, 667,
	-1000, 611, 21405, 21405, 21405, 611, 611, 12598, 12158, 499,
	-1000, 1793, 1511, -1000, 1370, 1137, 1511, 234, 234, 234,
	234, 234, 21405, 5440, 5440, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 188, 1669, -1000, 21405, 1793, 1741, 1793,
	-1000, 493, 835, 1079, -1000, -1000, 192, 1374, -1000, 598,
	-1000, -1000, -1000, -1000, 21405, 217, -1000, 1018, 1668, 126,
	7779, 16118, 18758, 21405, 16118, -1000, -1000, -1000, -1000, -1000,
	-110, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 126, 16118, 16118, -67, -1000, -1000, -278, 1741, 5890,
	-1000, -1000, 5890, -1000, -1000, 248, 218, -1000, 16118, 669,
	18758, 1033, 21405, 238, -1000, 21405, 1457, 1769, 21405, 1832,
	6790, 1832, 21405, -1000, -1000, 585, 585, -1000, 696, 696,
	-1000, -1000, -115, 1832, 1832, -112, 21405, 218, -1000, -1000,
	20085, 1755, 16998, -1000, -129, 374, 341, 363, -1000, -1000,
	-173, -1000, -1000, 1427, 11718, 10826, 231, 16118, 3634, -1000,
	-1000, 611, 611, 611, 3634, 3634, 444, -1000, -1000, -1000,
	-1000, -1000, -1000, 21405, 1741, -1000, -1000, -1000, -1000, -1000,
	16118, 18758, 21405, 21405, 22573, -1000, 1404, -1000, -1000, 9494,
	452, 5890, 1175, 1655, -1000, -1000, 1653, 1652, 1651, 1642,
	1639, 1638, 1637, -1000, 1598, -1000, -1000, 1636, 1635, 1634,
	1633, -1000, -1000, -1000, -1000, -1000, -1000, 1631, -1000, -1000,
	-1000, 1629, 1598, -1000, -1000, 1628, 1626, 1625, 1624, 1621,
	-1000, -1000, -1000, -1000, -1000, -1000, 1077, 1034, 919, -1000,
	-1000, -1000, -1000, 3184, 6790, 6790, 6790, 6790, -1000, -1000,
	1564, 5890, 1619, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7240,
	-1000, 1618, 1617, 1612, 1610, 1602, 1598, 1588, 1020, 1585,
	1579, 1578, 6790, 1577, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1404, -1000, -276, -1000, 10386, 21405,
	21405, -1000, 1741, -1000, 1741, 2288, -1000, 1770, -1000, 192,
	89, -1000, -1000, -1000, -1000, -1000, -1000, 450, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1449, -1000, 21405,
	627, -1000, -1000, -1000, -1000, -1000, 17, 12, 1419, -1000,
	-24, 106, -1000, 1366, -1000, -1000, -1000, 627, 1419, 250,
	496, 1019, -1000, 844, 439, 1448, -1000, 956, 19645, 21405,
	247, 1752, 1427, 1591, -1000, -1000, -1000, 1736, 19205, -1000,
	1575, 1364, -1000, -1000, 5890, -1000, -1000, 1832, 1832, 1832,
	585, 22573, 696, 21405, 696, -1000, -1000, 696, -1000, 434,
	21405, 247, 1569, -1000, 1656, 1402, -1000, -1000, -1000, -1000,
	1768, 21845, 233, -1000, -1000, 372, 345, 355, 18758, 249,
	-1000, -1000, 1427, -1000, -1000, -1000, 1568, 634, -1000, -1000,
	6790, -1000, 1009, -1000, 3634, 3634, 3634, -1000, -1000, 14798,
	-1000, -1000, 1419, 1427, 1688, 1445, -1000, -1000, -1000, -1000,
	1832, 5440, -1000, 16998, -1000, 5890, 5890, 5890, 5890, -1000,
	18318, -1000, 17878, -1000, 282, 6340, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5890, 1777, 1777, 1777, 5890, 687, 5890,
	5890, -1000, 749, 22758, 1777, 1777, 1777, 1777, 1777, -1000,
	2726, 1777, 1777, 1777, 1777, -1000, -1000, 6790, 6790, 6790,
	6790, 6790, 6790, 6790, 6790, 6790, 6790, 6790, 6790, 1556,
	686, 6790, 6790, 6790, 1137, 1589, 1444, -1000, -1000, -1000,
	-1000, -1000, 656, 1009, 5890, 712, 5890, 5890, 5890, -1000,
	1349, 1338, -1000, -1000, 5890, -1000, 5890, 6790, 5890, -1000,
	1777, 1832, 1414, -1000, 1566, -1000, 1362, 1732, -1000, 429,
	1443, -1000, 632, 1336, -1000, -1000, -1000, -1000, 428, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -64, -1000, -1000, 21405, 1018, 1325,
	1851, 425, 423, 16118, -1000, 176, 16118, -1000, -1000, 21405,
	240, 16118, 11, -1000, 279, -127, 5890, 5890, 21405, 5890,
	-1000, -1000, -1000, 1529, 665, 1565, -220, -1000, -36, -1000,
	1687, 133, -1000, 1736, -1000, 584, -1000, 21405, 1378, -1000,
	417, 187, -1000, 21405, 1009, -1000, -1000, -1000, 1832, -1000,
	585, -1000, 585, 696, 21405, -1000, -1000, -220, 1331, 21405,
	16998, 16998, 16998, 16998, -1000, 1724, 1722, -1000, 1708, 1700,
	1714, 21405, 16998, 21405, -1000, -1000, -1000, 22209, -1000, -1000,
	-1000, -1000, 1329, 1828, -1000, -1000, -1000, 336, 1427, 16118,
	951, 231, -1000, -1000, -1000, -1000, -1000, 21405, 21405, 1829,
	-1000, 1426, 1671, -1000, 668, 668, 699, -1000, -1000, 407,
	-1000, -1000, 314, -1000, -1000, -1000, -1000, -1000, 1564, -1000,
	-1000, -1000, 1294, 1392, 1009, 5890, -1000, -1000, 5890, 5890,
	995, 5890, 1279, 1320, 1315, -1000, 1267, 1834, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5890, 5890, 5890,
	5890, 5890, 1167, 4990, -1000, -1000, -1000, 5890, 5890, 5890,
	5890, 1743, 2057, -1000, 805, 805, 530, 530, 530, 530,
	530, 991, 991, -1000, -1000, -1000, 3184, 1556, 6790, 6790,
	6790, 205, 2580, 1869, -1000, 5890, 655, -1000, 5890, 1095,
	-1000, 1259, 966, 1257, 1249, -1000, -1000, 1089, 1239, 1950,
	1234, 5890, 1829, -276, 4534, 229, 21405, -276, 21405, 21405,
	4534, -1000, 21405, 2288, 832, -1000, -1000, -1000, 16118, 573,
	618, -1000, 14358, 16118, -1000, -1000, 16118, 136, 1739, -1000,
	-1000, -290, -80, -73, 1009, 1009, 406, -1000, 1767, 1749,
	9054, -1000, -51, -1000, -1000, -1000, 364, -1000, 999, 994,
	993, 987, 21405, -1000, -1000, -1000, -1000, -1000, 626, 626,
	626, 199, 1275, 399, 16998, 21405, -1000, 16558, 1207, -1000,
	-1000, 1832, 1832, 585, -1000, -1, -25, 1289, -1000, 631,
	1680, 1686, 1680, -1000, -1000, -1000, -1000, 1704, -1000, 1701,
	-1000, -1000, 1289, -1000, 1529, -1000, -1000, -1000, 1419, 1202,
	-1000, -1000, -1000, -1000, 1825, 1816, 17438, -1000, -1000, -1000,
	-1000, -1000, 5890, 1582, 1547, 1536, 22863, 1307, -1000, -1000,
	-1000, -1000, 5890, 1520, 1500, 1489, 1482, 1469, -1000, 5890,
	5890, 900, 1428, 1383, 1375, 1357, 1305, -1000, 205, 2580,
	1058, -1000, 6790, 6790, 1328, 648, -1000, 5890, 777, 610,
	13478, -1000, 5890, -1000, -1000, -1000, 13478, -1000, 6790, -1000,
	1323, 1825, -1000, 1200, 1425, -1000, -276, -1000, -1000, 1414,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1419,
	-1000, -1000, -1000, -1000, 16118, 1772, 247, -1000, 22, 263,
	944, -280, -76, 1815, 1814, 21405, 233, 21405, 1195, 1417,
	-1000, -1000, -1000, 22934, 602, -1000, 21405, 717, 377, 218,
	377, 710, 1554, -1000, -1000, -51, -1000, 829, 827, 825,
	824, -15, -1000, -1000, -1000, -1000, -1000, 1551, 13478, -1000,
	13918, 978, 21845, 16998, 16558, 1229, -1000, 397, -1000, -1000,
	-1000, -1000, 1832, -1000, -1, -1000, 309, 321, 48, 1811,
	1821, 21405, 5890, -1000, -1000, 5890, 1550, -1000, 5890, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5890, 5890, -1000, -1000,
	1009, -1000, -1000, -1000, 1193, -1000, 340, 340, -12, -1000,
	-1000, -1000, 1497, -1000, 1532, 1532, 1497, 1497, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1541, 1537, -1000,
	1497, 1530, 1530, 1497, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1533,
	1533, 1535, 1533, -1000, 1317, -1000, -1000, -1000, -1000, -1000,
	1273, 1253, 5890, -1000, -1000, -1000, -1000, -1000, -1000, 6790,
	-1000, -1000, -1000, -1000, 1009, 5890, 1180, -1000, 1497, 1532,
	-1000, 1497, 1530, 1497, 340, 340, 1172, 909, 1166, 1765,
	-1000, -1000, -1000, 4534, 1414, -1000, 16118, 16118, -231, 10,
	21405, 122, -1000, 630, -282, 972, -1000, 1810, 955, 782,
	-1000, 1529, 23167, 9054, 1764, -1000, -1000, 21405, 21405, -1000,
	21405, 21405, 218, 5890, -1000, -1000, -1000, -1000, -1000, -1000,
	15678, -1000, -1000, -1000, -1000, -1000, 1832, 1229, 397, -1000,
	-1000, 553, -1000, -1000, -1000, -1000, 823, -1000, -1000, -1000,
	951, 1793, -1000, 1009, 1009, 21405, 1009, 1009, 1392, -1000,
	-1000, -1000, -1000, -1000, -21, -1000, -1000, -1000, -1000, 815,
	-1000, 813, -1000, -1000, -1000, 950, 950, -1000, -1000, 811,
	-1000, -1000, -1000, 810, -1000, -1000, 809, -1000, -1000, -1000,
	-1000, 1174, -1000, 1009, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5890, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -112, -1000, 944, 943, -284, 806, -1000, 930,
	-71, -1000, -1000, 1761, 197, 23146, -1000, 626, 626, 624,
	626, 626, 626, 626, 140, 139, 626, 626, 626, 626,
	626, 626, 626, 626, 626, 626, 626, 626, 626, 626,
	1528, -1000, -1000, 1764, -1000, -1000, 692, 6790, -1000, -1000,
	925, 13918, 446, 403, 1521, -1000, 105, 706, 704, -1000,
	21405, -1000, 1519, 1471, 69, 1517, -1000, 1510, 1504, 21405,
	1154, 1302, -1000, 1497, 5890, 1821, -1000, 44, -1000, -1000,
	-1000, 1300, -1000, -1000, 1152, 1150, 1266, -1000, 1256, 1142,
	1248, 1237, -1000, 1139, -95, -81, -1000, -1000, -1000, 1488,
	-1000, -1000, 1809, 233, -1000, 1808, 23167, -1000, 804, 803,
	626, 626, 802, 913, 911, 907, 626, 626, 795, 880,
	22209, 787, 765, 759, 783, 879, 525, 776, 769, 766,
	21405, 1486, 871, -1000, -1000, 2580, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 758, 1485, -1000,
	-1000, 1483, 15678, 91, 91, 15678, 15678, 15678, 1481, 283,
	-1000, 15678, 1744, 1101, 1793, -1000, -1000, -1000, -1000, -1000,
	877, -1000, -1000, -1000, 757, -1000, 753, -1000, 236, -78,
	-81, -1000, 1804, -74, 1803, 1800, 21405, 782, -1000, 121,
	-1000, -1000, -1000, 13478, 13478, -1000, -1000, -1000, -1000, 876,
	872, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 159, 21405, 1233, -1000, 629, 1131, 5890,
	-212, 15678, 1231, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1226, 1223, 1219, 15678, -1000, -1000, -1000, 100, 120, -1000,
	-1000, 1744, -1000, -1000, 1128, 1116, 1479, 752, -76, 1798,
	-1000, 782, 1796, 782, 782, 1206, -1000, -1000, 87, 202,
	170, -1000, 257, -1000, -1000, -1000, -1000, -1000, -1000, 162,
	1188, -1000, 871, 866, -1000, 915, 1685, -1000, 9, 1184,
	-1000, -1000, -1000, -1000, 1169, -1000, -1000, 626, 858, 62,
	-1000, -1000, -1000, -1000, -1000, 1775, 13038, -101, -1000, 841,
	-1000, 782, -1000, -1000, -1000, 21405, 79, 750, 6790, 1478,
	6790, 1477, 96, 1476, -1000, -1000, -1000, -1000, -1000, 283,
	-1000, -1000, 1684, 1678, 1850, -1000, -1000, -1000, -1000, 120,
	120, 120, 120, 13, 745, -1000, 1033, -1000, 21405, -1000,
	1159, -1000, -1000, -1000, 393, -1000, -1000, -1000, -1000, 1475,
	1795, -1000, 1384, 21405, 1023, 21405, 1467, 625, 6790, -1000,
	-1000, 1852, -1000, 1856, 449, 449, -1000, -1000, -1000, 1377,
	-1000, 623, -1000, 15238, 21405, -1000, 189, 93, -1000, 1149,
	-1000, 1141, 21405, 744, 959, -1000, -1000, -1000, 770, 117,
	-1000, 21405, 4084, -1000, 391, 1136, -1000, 918, 76, -1000,
	-1000, 1134, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1009,
	21405, -1000, 189, 1691, -1000, 736, -1000, -1000, -1000, 23075,
	193, -1000, -1000, 23075, 78, -1000, 184, -1000, -1000, 1100,
	-1000, 912, 1460, -1000, 78, 23167, 5890, -1000, 23167, 1098,
	-1000,
}

var yyPgo = [...]int{
	0, 118, 2241, 175, 127, 125, 172, 2240, 1778, 1777,
	2239, 2235, 2232, 2231, 2230, 2229, 2227, 2226, 2223, 2222,
	2221, 2220, 2219, 2218, 167, 2213, 2212, 2211, 2210, 2209,
	2208, 2207, 2205, 2203, 2201, 2199, 2198, 119, 2197, 1775,
	2196, 2193, 2190, 2189, 2187, 157, 2185, 2183, 2182, 2181,
	2180, 2179, 2178, 2177, 2176, 2175, 2174, 2173, 2159, 160,
	2158, 46, 124, 191, 78, 188, 187, 142, 81, 130,
	162, 116, 2157, 2151, 113, 26, 132, 2150, 44, 41,
	34, 185, 102, 53, 68, 94, 2149, 2148, 92, 2146,
	2144, 2143, 2142, 62, 2141, 85, 39, 95, 30, 2140,
	2139, 2138, 90, 2137, 2136, 2135, 2132, 88, 2129, 65,
	55, 2128, 2127, 2126, 2121, 2120, 36, 2119, 45, 2117,
	2116, 2115, 2114, 2113, 2111, 2110, 12, 17, 19, 2109,
	2108, 16, 2, 2107, 163, 122, 86, 103, 2106, 358,
	2105, 2103, 2102, 114, 2101, 145, 2098, 2097, 2096, 2094,
	10, 2093, 52, 2092, 2091, 49, 2090, 2089, 51, 2087,
	2086, 2085, 100, 43, 56, 98, 2083, 2082, 73, 153,
	15, 96, 0, 156, 40, 2081, 2080, 2079, 184, 151,
	149, 2078, 93, 229, 148, 57, 2077, 54, 72, 2075,
	2074, 2073, 107, 74, 25, 2069, 111, 2068, 29, 87,
	2067, 105, 2066, 138, 9, 104, 2051, 150, 2050, 2049,
	2047, 129, 2046, 2045, 61, 123, 2044, 2043, 2042, 28,
	2041, 38, 21, 2038, 147, 164, 2037, 2036, 2033, 121,
	99, 91, 2031, 2030, 77, 2028, 117, 84, 70, 115,
	747, 112, 63, 18, 2023, 158, 2020, 251, 161, 143,
	2019, 2018, 165, 1149, 168, 2015, 144, 11, 2012, 2011,
	8, 2010, 23, 2009, 2005, 2003, 2000, 5, 1999, 1995,
	1992, 1, 3, 1991, 4, 109, 48, 75, 1989, 71,
	82, 1987, 1986, 1985, 1984, 1970, 217, 1968, 1966, 1965,
	1964, 1963, 1961, 1959, 83, 1958, 1956, 1955, 1954, 64,
	1953, 1950, 1948, 1947, 1946, 31, 1945, 1943, 20, 1942,
	24, 1941, 1922, 1921, 13, 135, 1916, 1912, 14, 1909,
	1908, 6, 7, 1907, 1906, 67, 42, 37, 76, 80,
	1905, 22, 1904, 101, 1903, 1902, 137, 1900, 106, 1899,
	139, 159, 232, 1898, 146, 1897, 1896, 1895, 1893, 1891,
	1888, 1887, 746, 1886, 1885, 170, 60, 1884, 1883, 1882,
	152, 1880,
}

//line mysql_sql.y:6794
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.Loadparameter {
	v, _ := st.union.(*tree.Loadparameter)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 357, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 53, 60, 60, 60, 156, 156,
	155, 155, 324, 324, 323, 323, 322, 322, 321, 321,
	321, 320, 320, 320, 319, 319, 318, 318, 317, 317,
	315, 315, 316, 314, 313, 313, 311, 311, 309, 309,
	310, 310, 304, 304, 307, 307, 305, 305, 305, 305,
	308, 303, 303, 303, 302, 302, 52, 52, 52, 242,
	242, 51, 51, 256, 256, 256, 256, 256, 254, 254,
	254, 254, 253, 253, 252, 252, 257, 257, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 46, 46, 46, 46, 49, 50, 250, 250, 250,
	250, 250, 251, 251, 251, 47, 48, 48, 241, 241,
	246, 246, 245, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 249, 249, 249, 248, 248, 247,
	247, 40, 40, 40, 43, 42, 240, 240, 240, 240,
	240, 240, 240, 240, 41, 41, 41, 41, 41, 41,
	38, 38, 37, 37, 39, 39, 239, 239, 238, 56,
	56, 56, 56, 56, 56, 56, 55, 55, 58, 58,
	57, 45, 45, 45, 45, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 347, 347, 347, 349, 349, 176,
	177, 358, 175, 175, 175, 343, 343, 344, 345, 346,
	346, 346, 54, 7, 36, 36, 286, 286, 189, 189,
	190, 190, 188, 188, 188, 188, 188, 188, 289, 290,
	185, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 28, 28, 35, 359, 359, 359, 33, 34,
	285, 285, 285, 32, 31, 30, 29, 29, 27, 27,
	26, 26, 182, 182, 184, 184, 180, 360, 360, 262,
	262, 183, 183, 25, 25, 181, 181, 159, 179, 179,
	179, 6, 10, 10, 10, 10, 10, 10, 16, 15,
	13, 12, 11, 14, 5, 5, 5, 5, 8, 8,
	9, 69, 69, 97, 97, 356, 356, 352, 352, 353,
	353, 353, 354, 354, 355, 355, 4, 293, 293, 293,
	293, 293, 293, 332, 332, 332, 333, 87, 87, 82,
	82, 294, 294, 205, 334, 334, 301, 301, 300, 300,
	299, 299, 85, 85, 86, 86, 73, 73, 59, 59,
	306, 306, 306, 306, 312, 312, 283, 283, 123, 123,
	153, 153, 154, 154, 61, 61, 62, 62, 62, 62,
	62, 62, 340, 340, 342, 342, 341, 84, 84, 80,
	80, 81, 81, 81, 79, 79, 78, 77, 77, 76,
	75, 75, 75, 64, 64, 63, 63, 63, 63, 63,
	139, 139, 139, 65, 65, 348, 348, 348, 287, 287,
	287, 292, 292, 136, 136, 137, 137, 135, 135, 66,
	66, 67, 67, 67, 67, 134, 134, 133, 68, 68,
	74, 70, 70, 72, 72, 72, 72, 144, 144, 143,
	143, 143, 143, 90, 90, 142, 141, 141, 141, 89,
	89, 88, 88, 83, 83, 71, 71, 140, 361, 361,
	138, 168, 168, 168, 174, 174, 167, 167, 167, 167,
	167, 178, 173, 173, 169, 169, 170, 170, 170, 3,
	3, 3, 19, 19, 19, 19, 23, 23, 350, 350,
	17, 236, 236, 235, 235, 237, 237, 237, 237, 231,
	231, 232, 232, 232, 232, 233, 233, 233, 234, 234,
	234, 234, 230, 230, 229, 227, 227, 227, 228, 228,
	228, 228, 228, 228, 171, 171, 18, 224, 224, 225,
	225, 225, 226, 226, 218, 218, 218, 218, 22, 222,
	222, 223, 223, 223, 223, 223, 219, 219, 221, 221,
	217, 217, 217, 217, 217, 21, 216, 216, 214, 214,
	212, 212, 213, 213, 211, 211, 211, 215, 215, 20,
	288, 288, 258, 258, 261, 261, 268, 268, 269, 269,
	267, 267, 274, 274, 273, 273, 272, 272, 271, 271,
	270, 270, 265, 265, 264, 264, 259, 259, 259, 259,
	259, 260, 260, 263, 263, 266, 266, 114, 114, 115,
	115, 115, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 330, 330, 331, 117, 117, 117, 121, 121, 121,
	121, 121, 121, 116, 116, 118, 118, 98, 98, 96,
	96, 91, 91, 92, 92, 93, 93, 94, 94, 95,
	95, 95, 95, 95, 95, 244, 244, 328, 328, 329,
	329, 325, 325, 325, 327, 327, 327, 327, 327, 326,
	326, 99, 151, 151, 151, 172, 172, 172, 150, 150,
	150, 113, 113, 112, 112, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 243, 243,
	186, 186, 187, 187, 131, 129, 129, 130, 130, 130,
	130, 127, 128, 126, 126, 126, 126, 126, 125, 125,
	124, 124, 124, 220, 220, 122, 122, 120, 120, 120,
	119, 119, 119, 275, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 197, 197, 202,
	202, 339, 339, 338, 100, 100, 100, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 109, 109, 109, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 298, 298, 298, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 351,
	351, 351, 335, 335, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 148, 148, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 206, 206,
	207, 207, 295, 295, 295, 295, 295, 295, 296, 296,
	297, 297, 297, 297, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 195, 145, 145, 145, 208, 203, 203, 204,
	204, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 200, 200, 200, 200, 200, 192, 192, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 199, 199, 201,
	201, 210, 210, 210, 209, 209, 209, 209, 209, 209,
	209, 111, 111, 111, 111, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 102, 102, 102, 102, 106,
	106, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 107, 107, 107, 107, 105,
	105, 105, 105, 105, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 104,
	152, 152, 276, 276, 279, 279, 277, 277, 278, 280,
	280, 280, 281, 281, 281, 282, 282, 282, 284, 284,
	158, 158, 158, 164, 164, 157, 157, 165, 165, 166,
	166, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 14, 0, 1, 5, 1, 3,
	0, 3, 0, 2, 1, 3, 3, 3, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 3,
	1, 1, 1, 1, 0, 3, 0, 3, 0, 3,
	0, 3, 0, 2, 1, 2, 3, 4, 3, 3,
	1, 0, 1, 1, 0, 1, 9, 4, 7, 0,
	3, 7, 4, 1, 3, 3, 3, 1, 0, 1,
	1, 1, 1, 3, 1, 4, 1, 3, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 3, 6, 3, 1, 1,
	1, 1, 1, 1, 1, 2, 4, 6, 1, 4,
	1, 3, 3, 4, 4, 4, 3, 3, 2, 4,
	4, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 0, 4, 2, 4,
	1, 5, 3, 2, 1, 2, 2, 4, 4, 5,
	2, 1, 1, 2, 9, 7, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 1, 1,
	1, 1, 6, 1, 7, 9, 0, 2, 0, 1,
	1, 2, 2, 2, 1, 4, 2, 2, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 5, 1, 1, 1, 5, 5,
	0, 1, 1, 2, 2, 3, 6, 7, 4, 4,
	7, 8, 0, 2, 0, 2, 2, 1, 1, 1,
	1, 0, 1, 4, 5, 1, 3, 1, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	6, 4, 4, 3, 1, 1, 2, 2, 11, 8,
	9, 1, 3, 2, 4, 0, 2, 0, 1, 1,
	1, 1, 0, 1, 0, 1, 4, 2, 1, 5,
	4, 4, 2, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 0, 8,
	0, 4, 7, 4, 0, 2, 0, 2, 0, 2,
	0, 4, 1, 3, 1, 1, 4, 3, 4, 5,
	4, 5, 2, 3, 1, 3, 6, 0, 3, 0,
	1, 2, 4, 4, 0, 1, 3, 1, 3, 2,
	0, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 2, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 4, 4, 4, 3, 2, 2, 2,
	3, 2, 3, 0, 2, 1, 1, 2, 2, 0,
	1, 2, 4, 1, 3, 1, 4, 3, 0, 1,
	2, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 8, 11, 0, 1,
	6, 0, 2, 1, 2, 2, 2, 2, 2, 0,
	1, 2, 2, 2, 2, 1, 3, 2, 2, 2,
	2, 2, 1, 3, 2, 1, 3, 2, 0, 3,
	3, 5, 5, 4, 1, 1, 4, 1, 3, 1,
	3, 2, 1, 1, 0, 1, 1, 1, 11, 0,
	2, 3, 2, 3, 1, 1, 1, 3, 3, 4,
	0, 2, 2, 2, 2, 5, 1, 1, 0, 3,
	0, 1, 1, 2, 4, 4, 4, 0, 1, 10,
	0, 1, 0, 6, 0, 4, 0, 3, 1, 3,
	4, 5, 0, 3, 1, 3, 2, 3, 1, 2,
	0, 6, 0, 2, 0, 2, 4, 5, 4, 5,
	1, 6, 5, 0, 3, 0, 1, 0, 1, 1,
	3, 2, 3, 3, 4, 4, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 5,
	4, 1, 3, 3, 0, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 0, 1, 1, 3, 1, 1, 2, 1, 7,
	7, 7, 7, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 0,
	1, 3, 1, 3, 5, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 2, 1, 2, 2, 1, 1,
	2, 2, 2, 2, 2, 1, 5, 6, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 1, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	2, 2, 2, 0, 3, 0, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	3, 5, 2, 2, 2, 2, 1, 1, 2, 5,
	6, 6, 6, 1, 1, 1, 1, 0, 2, 0,
	1, 1, 2, 4, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 2, 2, 2, 0, 1, 1, 5,
	4, 4, 5, 5, 5, 5, 4, 5, 5, 5,
	5, 5, 5, 5, 1, 1, 1, 4, 4, 6,
	8, 6, 4, 5, 5, 4, 6, 6, 7, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 4, 2, 3, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 2, 0, 1,
	2, 3, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 0, 1, 1,
	3, 3, 3, 3, 3, 2, 3, 4, 3, 4,
	1, 3, 4, 3, 4, 1, 1, 1, 3, 4,
	4, 5, 3, 4, 5, 6, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 1,
	1, 3, 0, 1, 0, 3, 0, 3, 3, 0,
	3, 5, 0, 3, 5, 0, 1, 1, 0, 1,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int{
	-1000, -357, -2, -1, -3, -4, -5, -6, -44, -55,
	-57, -58, -24, -7, -54, -37, -38, -40, -46, -51,
	-52, -53, -61, -19, -18, -17, 9, -8, -9, -340,
	-10, -175, -176, -177, -358, -25, -26, -27, -29, -30,
	-31, -32, -33, -34, -35, -28, -36, 194, -39, 50,
	-41, -42, -43, -47, -48, -49, -50, 304, 310, 347,
	-62, -64, -20, -21, -22, -23, 190, 11, 420, -11,
	-14, -12, -13, -15, -16, 212, 211, 29, 271, 272,
	308, 210, 191, 10, 122, 123, 125, 126, 22, -63,
	55, 192, -65, 7, 465, -73, 30, -96, -172, 59,
	-160, -163, 423, 424, 425, 426, 427, 428, 429, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 457, 458, 417, 229,
	253, 256, 263, 122, 141, 135, 163, 155, 130, 233,
	234, 66, 125, 376, 76, 361, 346, 128, 248, 250,
	252, 255, 235, 151, 146, 247, 231, 144, 236, 31,
	237, 168, 238, 239, 422, 357, 286, 380, 363, 260,
	344, 145, 358, 251, 360, 169, 173, 368, 310, 139,
	140, 365, 370, 167, 209, 34, 419, 221, 371, 171,
	166, 162, 379, 264, 262, 165, 138, 161, 232, 39,
	175, 174, 176, 340, 341, 342, 343, 240, 241, 298,
	367, 158, 147, 290, 131, 19, 374, 216, 362, 311,
	242, 257, 265, 170, 172, 223, 228, 421, 227, 261,
	372, 143, 220, 249, 215, 375, 132, 304, 313, 243,
	126, 254, 369, 378, 38, 326, 137, 129, 206, 123,
	225, 230, 244, 245, 246, 267, 266, 258, 159, 222,
	164, 136, 160, 124, 224, 377, 327, 464, 288, 329,
	157, 154, 226, 199, 373, 364, 127, 333, 328, 152,
	268, 461, 462, 463, 299, 285, 269, 270, 150, 213,
	182, 183, -39, -9, -8, -63, -64, -179, 20, 344,
	-45, 345, 194, 55, -172, -5, -4, -37, -61, -178,
	-172, 271, -178, 197, -172, -253, -224, -252, -225, -255,
	-226, -171, 23, 191, 190, 224, 11, 192, 308, 198,
	9, 7, 309, 210, 10, 310, 312, 313, 316, 317,
	318, 33, 321, 322, 59, 62, -172, -253, -224, 228,
	235, -78, -79, -139, 16, 6, -288, 329, 227, -218,
	-216, 319, 207, 206, 77, 382, 196, -352, -353, 187,
	188, 189, -342, 414, -341, -172, 415, -158, -359, -285,
	364, 363, -183, 362, 355, 366, 357, 190, 76, 156,
	153, 198, 365, 34, 368, 369, 358, 329, -352, 127,
	124, -240, 82, 132, 131, -240, 227, 32, -246, 339,
	-245, -247, 368, 369, 379, 60, 61, 367, -158, -172,
	76, -79, -139, -78, -62, -64, -340, 329, 227, 198,
	197, 382, 271, -287, -348, 23, -292, 184, 185, 186,
	24, 25, -1, -85, 219, -96, 121, -79, -78, -79,
	-150, -172, 346, 91, -45, -45, 345, -343, -344, -345,
	-347, 194, 345, 344, 121, 12, -178, 53, -96, 52,
	56, 12, 56, 55, 468, 60, 306, 320, 329, 307,
	319, 199, 227, 320, 227, 355, 199, 311, 314, 315,
	356, 52, 200, 52, -302, 379, -59, 30, -81, 18,
	-65, -64, 17, 23, 24, -350, 197, 414, -214, 202,
	-214, 198, -214, -354, 134, 56, -342, -84, 55, -182,
	99, -182, -360, 12, 101, 226, 225, 359, 356, -262,
	360, 361, -183, -182, -182, -183, 197, 382, 22, 22,
	-286, 202, -355, 201, 372, 420, 130, 131, 132, -250,
	23, 32, 338, -224, 227, 56, 91, 20, -248, 91,
	102, -247, -247, -247, -248, -248, -116, 32, -171, 118,
	62, -116, 32, 121, -80, -81, -65, -64, 57, 57,
	-286, -286, -286, -286, -286, -178, -66, -67, 109, -198,
	-172, 83, -200, 59, -193, 423, 424, 425, 426, 427,
	428, 429, 430, 431, 432, 433, 434, 435, 436, 437,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 457, 458,
	76, 344, 298, 329, 152, 299, 150, 213, -194, -196,
	-321, -315, -191, 55, 107, 108, 115, 84, -195, -275,
	27, 86, 390, -146, -147, -148, -149, -316, -314, 62,
	67, 70, 73, 74, 72, 71, 148, 69, 63, 120,
	-64, -335, -161, -291, -297, 196, -295, 153, 149, 9,
	113, 339, 118, -298, 61, 60, 292, 293, 294, 382,
	289, 295, 202, 44, 296, 297, 300, 389, 301, 45,
	302, 291, 217, 303, 393, 392, 394, 386, 383, 381,
	384, 385, 387, 388, -66, -293, 35, -61, 55, 22,
	55, -172, -80, -59, -81, 121, 67, 62, -45, 57,
	56, -346, 73, 74, -349, 167, 159, -172, -56, 62,
	-3, -4, -5, -6, -24, -37, -61, -317, -315, 55,
	-254, 197, 305, 223, -252, 224, 310, 313, -230, -229,
	-227, -171, -225, -257, -150, -171, 356, -254, -230, -229,
	348, 460, -59, -198, -172, -77, -76, -198, 199, -214,
	-230, 83, -224, -170, 59, 60, 61, -172, -355, -341,
	26, -83, -172, -135, 13, -196, -135, -96, -182, -182,
	-184, -360, -180, -360, 356, -135, -135, -262, -181, -172,
	-214, -230, 329, 27, -70, -68, -71, -72, -74, -138,
	-140, -96, 55, 373, 374, 128, 131, 130, 380, -251,
	338, 23, -224, -245, -241, 62, 339, -229, -249, 52,
	118, -299, -198, 32, -248, -248, -248, -249, -249, 117,
	-172, -59, -230, -224, -172, -98, -96, -173, -170, -163,
	-134, 56, -133, 12, -167, 82, 79, 80, 81, -172,
	26, 62, 121, -198, 98, -209, 91, 92, 93, 94,
	95, 96, 97, 55, 55, 55, 55, 55, 55, 55,
	55, -207, 55, 55, 55, 55, 55, 55, 55, -207,
	55, 55, 55, 55, 55, 62, 62, 104, 103, 114,
	107, 108, 109, 110, 111, 112, 113, 105, 106, 101,
	83, 99, 100, 85, -64, -198, -204, -196, -196, -196,
	-196, -275, -202, -198, 55, -198, 55, 55, 55, -296,
	55, 55, -206, -207, 55, 62, 55, 55, 55, -196,
	55, -134, -294, -205, -334, 459, -87, 57, -82, -172,
	-332, -333, -82, -86, -172, -59, -59, -165, -166, -157,
	-162, -169, -170, -163, 287, 195, 23, 82, 26, 28,
	292, 324, 85, 118, 17, 86, 153, 117, 294, 390,
	293, 190, 48, 392, 394, 393, 383, 381, 331, 335,
	337, 334, 382, 355, 32, 11, 29, 211, 24, 25,
	111, 192, 89, 90, 214, 27, 212, 74, 20, 51,
	12, 14, 15, 295, 330, 202, 201, 101, 348, 198,
	46, 9, 120, 30, 98, 332, 42, 78, 44, 99,
	18, 384, 385, 33, 347, 416, 218, 113, 296, 297,
	49, 83, 338, 72, 52, 79, 16, 47, 100, 193,
	389, 45, 336, 300, 302, 414, 301, 196, 366, 7,
	291, 391, 22, 210, 43, 197, 356, 88, 200, 73,
	217, 149, 6, 77, 10, 50, 53, 386, 387, 388,
	35, 87, 13, 303, 420, 339, 349, 350, 351, 352,
	353, 354, 177, 178, 179, 180, 181, 259, 205, 203,
	207, 208, 459, 460, 184, 185, 282, 284, 156, 187,
	188, 189, 219, 134, 20, -45, -344, 121, 56, -83,
	-256, 109, 59, 56, -228, 330, 468, 60, 57, 56,
	-256, 200, -60, 62, 182, 62, 56, 19, 121, 56,
	-75, 28, 29, -96, 202, -96, -231, -232, 336, 27,
	-217, 53, -212, -213, -211, -215, 32, 12, -69, -97,
	-172, 55, 57, 56, -198, -135, -135, -135, -182, -173,
	-184, -179, -184, -180, 121, -159, -172, -231, 55, 22,
	-141, -142, -143, -144, 42, 46, 48, 43, 44, 45,
	49, 22, 56, -361, 26, -168, -174, 26, -169, 62,
	-170, -163, -62, -64, 129, 132, 132, 131, -224, 200,
	55, 91, -249, -249, -249, 32, -171, 52, 56, -135,
	-67, -68, -70, -198, -198, -198, -198, -172, 62, -172,
	109, -192, 83, 285, 72, 73, 74, -193, -210, 23,
	269, 270, -203, -204, -198, -145, 24, 23, -145, -145,
	-198, -145, 109, -204, -204, 57, 67, -336, -337, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
	296, 291, 297, 295, 289, 303, 298, 299, 152, 412,
	413, 406, 407, 408, 409, 410, 411, -145, -145, -145,
	-145, -145, -198, -351, 283, 282, 284, -145, -145, -145,
	-145, -194, -194, -194, -194, -194, -194, -194, -194, -194,
	-194, -194, -194, -201, -208, -275, 55, 101, 99, 100,
	85, -196, -194, -194, 57, 56, -339, -338, 87, -198,
	-336, -203, -198, -203, -203, 57, 57, -204, -203, -194,
	-203, -145, -135, 56, 55, 57, 56, 35, 121, 56,
	91, 57, 56, 121, 346, -172, -315, 57, 12, 121,
	121, -229, 17, 420, -171, -150, 200, -230, -303, 201,
	389, 183, -306, 360, -198, -198, -172, -76, -84, 83,
	55, -236, 420, 338, 337, 333, -233, -234, 332, 334,
	331, 335, 52, 277, 278, 279, 280, -211, -158, 117,
	238, -96, -69, -172, 12, 56, -356, 121, -1, -172,
	-135, -182, -182, -184, -172, -236, 57, -239, -238, -150,
	-71, -71, -71, -71, 42, 42, 42, 47, 42, 47,
	42, -143, -239, -74, -172, -174, 57, 132, -230, -185,
	62, -241, -96, -96, -137, 14, 121, -192, 285, 72,
	-275, 57, 56, -198, -198, -198, 26, -204, 57, 57,
	57, 57, 12, -198, -198, -198, -198, -198, 57, 12,
	12, -198, -198, -198, -198, -198, -204, -201, -196, -194,
	-194, -199, 214, 82, -198, -197, -338, 89, -198, 56,
	53, 57, 12, 57, 57, 57, 53, 57, 56, 57,
	-198, -137, -205, -301, -300, -299, 35, -61, -82, -294,
	-172, -333, -299, -172, -165, -162, -170, -163, 67, -230,
	109, 109, 59, -171, 339, -171, -230, -242, 420, 30,
	466, -312, 354, 349, 351, 121, 26, 27, -91, -92,
	-93, -99, -94, -150, -187, -95, 205, 203, 207, -329,
	77, 208, 259, 78, 198, -235, -237, 340, 341, 342,
	343, 82, -234, 62, 62, 62, 62, -96, -164, 91,
	-164, -164, -85, 53, 121, -68, -97, -172, 109, 57,
	-135, -135, -182, -189, -190, -188, 287, -289, 339, 330,
	-135, 56, 91, -89, -88, 52, 53, -90, 52, -88,
	42, 42, -135, -84, 57, -136, 15, 17, -172, 109,
	-198, 57, 57, 57, -100, -102, 326, 327, -106, -103,
	-105, -104, -108, -107, 153, 154, 118, 157, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 22, 213,
	149, 150, 151, 152, 169, 135, 155, 418, 177, 136,
	178, 137, 179, 138, 180, 139, 140, 181, 141, 144,
	145, 146, 143, 57, -198, 57, 57, 57, 57, 57,
	-198, -198, 12, 57, 57, 57, 57, 57, -199, 82,
	-196, -193, 57, 90, -198, 88, -101, -107, 118, 153,
	213, 152, 151, 149, 326, 327, -116, -198, -116, -194,
	57, -136, 57, 56, -294, -171, 17, 26, -231, 310,
	197, -156, -155, 62, -283, 461, -310, 349, 17, 17,
	-61, -96, 57, 56, -102, -95, -172, 78, -328, -329,
	-214, -328, 78, 55, -237, 67, 67, 67, 67, -234,
	55, -116, -118, -171, 118, 62, -168, -68, -172, -135,
	-356, 121, -135, -188, 288, 33, 120, 290, 32, 286,
	17, -79, -238, -198, -198, 55, -198, -198, -204, 57,
	-109, 140, 139, -109, -282, 327, 326, -276, -278, 55,
	-277, 55, -277, -276, -276, 55, 55, -276, -279, 55,
	-279, -276, -280, 55, -280, -281, 55, -280, 57, 57,
	57, -198, -193, -198, 57, -276, -277, -276, -279, -276,
	-109, -109, 57, 57, 20, 57, 57, -299, -171, -171,
	-242, 311, -96, 467, 56, 91, -123, 462, 62, 17,
	62, -308, 62, -84, -114, -115, -132, 324, 229, -215,
	233, 66, 234, 346, 235, 198, 237, 238, 239, 209,
	240, 241, 242, 339, 243, 244, 245, 246, 307, 6,
	273, -93, -113, -112, -110, 72, 83, 32, 324, -111,
	66, 117, 252, 230, 253, -131, -186, 203, 77, 78,
	312, -187, -325, -326, -172, -326, -172, -325, -325, -214,
	-198, -219, -221, -150, 55, -135, -135, 67, -290, -185,
	-80, -83, -284, 328, 67, 67, -152, 62, -152, 67,
	67, 67, 57, -198, -304, -262, -155, 62, -153, 463,
	67, 62, 351, 26, -258, 219, 56, -132, -164, -164,
	-158, 117, -164, -164, -164, -164, 236, 236, -164, -164,
	-164, -164, -164, -164, -164, -164, -164, -164, -164, -164,
	-164, -164, 55, -110, 72, -194, 62, -118, -119, 32,
	251, 247, -120, 32, 231, 232, -122, 55, 259, 78,
	78, -96, 55, 53, 268, 55, 55, 55, -326, 57,
	57, 56, -276, -198, -79, 289, 57, 57, 57, 57,
	56, 57, 57, 57, 56, 57, 56, 57, -311, 354,
	-307, -305, 349, 350, 351, 352, 55, 17, -61, 17,
	-132, 67, 67, -164, -164, 67, 62, 62, 62, -164,
	-164, 67, 62, -174, 67, 67, 67, 67, 32, 62,
	-121, 32, 247, 251, 248, 249, 250, 67, 32, 67,
	32, 67, 32, -172, 55, -330, -331, 62, 67, 55,
	-220, 55, -219, -327, 277, 278, 279, 281, 280, -327,
	-219, -219, -219, 55, -244, -243, 260, 83, -222, -221,
	-75, 57, -80, 62, 67, 67, -313, 201, -309, 353,
	-305, 17, 351, 17, 17, -154, -172, -308, -259, 261,
	262, -260, -266, 264, -116, -116, 62, 62, -117, 230,
	-98, 57, 56, 91, 57, -198, -125, -124, 416, -219,
	57, 57, 57, 57, -219, 260, -223, 209, 66, 420,
	275, 276, -75, 57, 57, -320, 55, 67, -310, 17,
	-308, 17, -308, -308, 57, 56, -264, 265, 55, -262,
	55, -262, 78, 278, 231, 232, 57, -331, 62, 57,
	-129, -130, -127, -128, 52, 358, 257, 258, 57, -222,
	-222, -222, -222, 57, -164, 62, 274, -324, 22, 57,
	-319, -318, -151, -314, -172, 354, 62, -308, -172, -261,
	266, 67, -194, 55, -194, 55, -263, 263, 55, -243,
	-128, 52, -127, 52, 11, 10, -131, 67, -170, -323,
	-322, -321, 57, 56, 121, -268, 55, 17, 57, -257,
	57, -257, 55, 91, -194, -126, 254, 255, 22, 131,
	-126, 56, 91, -318, -172, -269, -267, 219, -260, 57,
	57, -257, 67, 57, 72, 32, 256, -322, 32, -198,
	121, 57, 56, 59, -265, 267, 57, -172, -267, -270,
	35, 67, -274, -271, 55, -132, 221, -274, -132, -273,
	-272, 266, 222, 57, 56, 59, 55, -272, -271, -204,
	57,
}

var yyDef = [...]int{
	23, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 509, 510, 511, 0, 324, 325, 0,
	311, 0, 0, 0, 0, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 243, 0, 192, 191,
	171, 172, 173, 131, 132, 133, 134, 0, 0, 0,
	394, -2, 512, 513, 514, 515, -2, 337, 0, 312,
	313, 314, 315, 316, 317, 232, 233, 234, 229, 230,
	231, -2, 0, 337, 184, 0, 176, 176, 0, 414,
	0, 0, 425, 438, 23, 372, 0, 377, 689, 725,
	726, 727, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
	1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
	1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
	1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
	1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
	1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
	1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
	1413, 1414, 193, 326, 327, 414, 414, 215, 0, 1293,
	219, 0, 0, 0, 308, 211, 212, 213, 214, 0,
	501, 0, 208, 0, 190, 0, 0, 92, 557, 94,
	559, 0, 98, 100, 101, -2, 105, 106, 107, 108,
	109, 110, 111, 0, 113, 1301, 115, 1361, 118, 119,
	120, 0, 129, 130, -2, -2, 554, 0, 0, 1349,
	74, -2, 0, 0, 0, 430, 518, 588, 588, 0,
	588, 601, 565, 566, 567, 586, 587, 342, 338, 339,
	340, 341, 402, 0, 404, 407, 292, 292, 0, 0,
	283, 284, 0, 301, 292, 292, 301, 0, 1090, 0,
	0, 275, 276, 277, 281, 282, 302, 246, 344, 185,
	186, 175, 0, 180, 0, 174, 1351, 0, 145, 0,
	150, 0, 1300, 1365, 1315, 0, 0, 1333, 0, 169,
	-2, 409, 0, 415, 0, 414, 0, 246, 246, 246,
	246, 246, 0, 0, 0, 439, 440, 435, 436, 437,
	441, 442, 3, 0, 0, 376, 0, 409, -2, 0,
	216, 728, 0, 0, 220, 221, 0, 0, 235, 0,
	238, 224, 225, 226, 0, 0, 210, 0, 0, 88,
	0, 0, 0, 0, 0, 561, 99, 128, 102, 103,
	0, 123, 125, 127, 126, 112, 124, 114, 116, 117,
	122, 88, 0, 0, 0, 75, 397, 0, 378, 0,
	427, 429, 0, 431, 432, 0, 588, 519, 0, 0,
	0, 0, 0, 344, 343, 0, 403, 0, 0, 447,
	0, 447, 0, 297, 298, 292, 292, 285, 294, 0,
	299, 300, 0, 447, 447, 0, 0, 588, 1091, 1092,
	0, 0, 0, 345, 0, 0, 178, 0, 183, 135,
	140, 138, 139, 141, 0, 0, 0, 0, 0, 167,
	168, 0, 0, 0, 0, 0, 158, 161, 683, 684,
	555, 162, 163, 0, 378, 410, 426, 428, 423, 424,
	0, 0, 0, 0, 0, 323, 455, 449, 451, 496,
	38, 0, 980, 725, 985, -2, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, -2, 1434, -2, -2, 1437, 1438, 1439,
	1441, -2, -2, -2, -2, -2, -2, 1448, -2, -2,
	-2, 1452, 1453, -2, -2, 1456, 1457, 1458, 1459, 1460,
	-2, -2, -2, -2, -2, -2, -2, -2, 996, 796,
	797, 798, 799, 0, 0, 0, 0, 0, 806, 807,
	0, 819, 0, 813, 814, 815, 816, 50, 51, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 943,
	783, 0, 0, 0, 928, 0, 918, 0, 956, 0,
	0, 0, 0, 0, 52, 53, 934, 936, 937, 939,
	940, 941, 942, 945, 946, 947, 950, 951, 952, 953,
	954, 955, 958, 960, 930, 931, 932, 933, 922, 923,
	924, 925, 926, 927, 455, 346, 364, 348, 0, 353,
	0, 690, 378, 400, 378, 0, 217, 0, 222, 0,
	0, 237, 239, 240, 241, 227, 228, 309, 206, 207,
	199, 200, 201, 202, 203, 204, 205, 209, 48, 0,
	0, 89, 90, 91, 93, 104, 0, 0, 82, 542,
	548, 545, 558, 0, 96, 560, 121, 0, 77, 0,
	25, 0, 398, 411, 38, 416, 417, 420, 0, 0,
	529, 0, 556, 580, 506, 507, 508, -2, 0, 405,
	0, 0, 483, 272, 0, 293, 273, 447, 447, 447,
	292, 0, 294, 0, 294, 288, 289, 0, 303, 305,
	0, 529, 1392, 247, 460, 0, 461, 462, 458, 485,
	488, 491, 0, 187, 188, 0, 0, 182, 0, 0,
	142, 143, 144, 151, 146, 148, 0, 0, 152, 164,
	165, 166, 370, 371, 0, 0, 0, 156, 157, 0,
	170, 396, 318, 319, 0, 321, 687, 322, 502, 503,
	447, 0, 456, 0, 452, 0, 0, 0, 0, 497,
	0, 499, 0, 975, 0, 0, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 967, 963, 963, 963, 0, 963, 0,
	0, 903, 0, 0, 963, 963, 963, 963, 963, 904,
	0, 963, 963, 963, 963, 917, 911, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 969, 0, 802, 803, 804,
	805, 808, 0, 820, 0, 0, 967, 967, 967, 906,
	0, 0, 908, 919, 0, 912, 967, 0, 967, 916,
	963, 447, 347, 361, 0, 365, 0, 0, 357, 359,
	352, 354, 0, 0, 374, 399, 401, 729, 0, 1097,
	-2, 1099, -2, -2, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 0, 223, 236, 0, 0, 0,
	0, 83, 87, 0, 544, 0, 0, 547, 95, 0,
	0, 0, 71, 26, 0, 380, 0, 0, 0, 0,
	419, 421, 422, 407, 0, 0, 521, 530, 0, 589,
	0, 0, 585, -2, 592, 0, 598, 0, 0, 331,
	335, 23, 408, 0, 448, 274, 278, 279, 447, 295,
	292, 296, 292, 294, 0, 304, 307, 521, 0, 0,
	0, 0, 0, 0, 476, 0, 0, 475, 0, 0,
	0, 0, 0, 0, 489, 490, 492, 0, 494, 495,
	504, 505, 0, 414, 189, 177, 179, 0, 137, 0,
	0, 0, 153, 154, 155, 159, 160, 0, 0, 445,
	450, 457, 460, 971, 972, 973, 974, 498, 500, 39,
	453, 976, 0, 978, 981, 986, 987, 983, 0, 1001,
	-2, -2, 0, 968, 969, 0, 964, 965, 0, 0,
	0, 0, 0, 0, 0, 920, 0, 0, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 0, 0, 0,
	0, 0, 0, 0, 869, 870, 871, 0, 0, 0,
	0, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 988, 999, 1000, 0, 0, 0, 0,
	0, 997, 992, 0, 800, 0, 817, 821, 0, 0,
	962, 0, 969, 0, 0, 929, 907, 0, 0, 0,
	0, 0, 445, 364, 366, 0, 0, 364, 0, 0,
	0, 373, 0, 0, 0, 310, 49, 242, 0, 0,
	0, 543, 0, 0, 546, 97, 0, 79, 0, 72,
	73, 0, 384, 0, 412, 413, 39, 418, 0, 0,
	691, 520, 0, 531, 532, 533, 534, 535, 0, 0,
	0, 0, 0, 581, 582, 583, 584, 593, 1093, 1093,
	1093, 372, 0, -2, 0, 0, 333, 0, 0, 484,
	286, 447, 447, 292, 306, 248, 0, 447, 196, 0,
	479, 473, 0, 466, 477, 478, 469, 0, 471, 0,
	467, 468, 447, 459, 407, 493, 487, 181, 136, 0,
	260, 147, 320, 688, 443, 0, 0, 977, 979, 982,
	984, 857, 0, 0, 0, 0, 0, 0, 846, 840,
	841, 921, 0, 0, 0, 0, 0, 0, 865, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 997, 993,
	0, 990, 0, 0, 970, 0, 822, 0, 0, 0,
	0, 858, 0, 862, 905, 909, 0, 913, 0, 915,
	0, 443, 362, 0, 367, 368, 364, 351, 358, 350,
	360, 355, 356, 375, 730, 1098, 1095, 1096, 218, 81,
	84, 85, 86, 549, 0, 550, 529, 78, 0, 0,
	30, 386, 60, 0, 0, 0, 0, 0, 0, 692,
	693, 695, 696, 0, 0, 698, 752, 0, 707, 588,
	707, 0, 0, 709, 710, 522, 523, 0, 0, 0,
	0, 0, 537, 538, 539, 540, 541, 0, 0, 1094,
	0, 0, 491, 0, 0, 447, 332, 335, 336, 406,
	290, 287, 447, 244, 249, 250, 0, 254, 0, 0,
	414, 0, 0, 463, 480, 0, 0, 464, 0, 465,
	470, 472, 195, 486, 149, 433, 0, 0, 40, 454,
	970, 842, 843, 844, 0, 824, 836, 836, 1085, 1026,
	1027, 1028, 1072, 1030, 1076, 1076, 1072, 1072, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 0, 0, 1049,
	1072, 1074, 1074, 1072, 1069, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1079,
	1079, 1082, 1079, 845, 0, 864, 847, 848, 851, 849,
	0, 0, 0, 863, 852, 853, 839, 966, 991, 0,
	998, 994, 801, 809, 818, 0, 0, 827, 1072, 1076,
	830, 1072, 1074, 1072, 836, 836, 0, 0, 0, 0,
	850, 434, 363, 0, 349, 553, 0, 0, 79, 0,
	0, 0, 28, 0, 388, 0, 385, 0, 0, 0,
	516, 407, -2, 0, -2, 697, 753, 719, 719, 708,
	719, 719, 588, 0, 524, 525, 526, 527, 528, 536,
	0, 594, 595, 685, 686, 596, 447, 447, -2, 329,
	334, 0, 291, 251, 252, 253, 0, 256, 257, 259,
	0, 409, 197, 198, 481, 0, 474, 444, 446, 810,
	825, 837, 838, 826, 1088, 1086, 1087, 1029, 1073, 0,
	1054, 0, 1055, 1056, 1057, 0, 0, 1050, 1051, 0,
	1052, 1053, 1045, 0, 1046, 1047, 0, 1048, 861, 866,
	867, 0, 995, 823, 811, 828, 829, 831, 832, 833,
	834, 835, 812, 859, 0, 910, 914, 369, 551, 552,
	76, 80, 62, 27, 30, 0, 390, 0, 387, 0,
	381, 383, 70, 0, 602, -2, 639, 1093, 1093, 0,
	1093, 1093, 1093, 1093, 0, 0, 1093, 1093, 1093, 1093,
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,
	0, 694, 721, -2, 733, 735, 0, 0, 738, 739,
	0, 0, 0, 0, 775, 745, 0, 0, 1013, 1014,
	0, 751, 0, 711, 720, 0, 720, 0, 0, 719,
	0, 0, 576, 1072, 0, 414, 330, 0, 258, 245,
	194, 0, 1025, 1089, 0, 0, 0, 1070, 0, 0,
	0, 0, 868, 0, 56, 0, 29, 31, 379, 0,
	389, 61, 0, 0, 599, 0, 597, 641, 0, 0,
	1093, 1093, 0, 0, 0, 0, 1093, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 734, 736, 737, 740, 741, 742, 780,
	781, 782, 743, 777, 778, 779, 744, 0, 0, 1011,
	1012, 773, 0, 0, 0, 0, 0, 0, 0, 705,
	569, 0, 420, 0, 409, 255, 482, 1078, 1077, 1067,
	0, 1068, 1075, 1080, 0, 1083, 0, 860, 54, 58,
	63, 64, 0, 0, 0, 0, 0, 0, 517, 635,
	640, 642, 643, 0, 0, 646, 647, 648, 649, 0,
	0, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 677, 678, 679, 680, 681, 682, 662, 663, 664,
	665, 666, 667, 674, 0, 0, 671, 0, 0, 0,
	768, 0, 0, 712, 714, 715, 716, 717, 718, 713,
	0, 0, 0, 0, 704, 706, 748, 0, 568, 577,
	578, 420, 328, 1071, 0, 0, 41, 0, 60, 0,
	65, 0, 0, 0, 0, 0, 392, 382, 624, 0,
	0, 630, 0, 636, 644, 645, 650, 651, 668, 0,
	0, 670, 0, 0, 776, 0, 755, 769, 0, 0,
	569, 569, 569, 569, 0, 749, 570, 1093, 0, 0,
	574, 575, 579, 1081, 1084, 32, 0, 0, 57, 0,
	66, 0, 68, 69, 391, 0, 604, 0, 0, 0,
	0, 0, 633, 0, 675, 676, 669, 672, 673, 746,
	754, 756, 757, 758, 0, 770, 771, 772, 774, 699,
	700, 701, 702, 0, 0, 572, 0, 24, 0, 42,
	0, 44, 46, 47, 722, 55, 59, 67, 393, 606,
	0, 625, 0, 0, 0, 0, 0, 0, 0, 747,
	759, 0, 760, 0, 0, 0, 703, 571, 573, 33,
	34, 0, 43, 0, 0, 603, 0, 635, 626, 0,
	628, 0, 0, 0, 0, 761, 763, 764, 0, 0,
	762, 0, 0, 45, 723, 0, 608, 0, 622, 627,
	629, 0, 634, 632, 765, 767, 766, 35, 36, 37,
	0, 607, 0, 620, 605, 0, 631, 724, 609, -2,
	0, 623, 610, -2, 0, 618, 0, 611, 619, 0,
	614, 0, 0, 613, 0, -2, 0, 615, -2, 0,
	621,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 84, 3, 3, 3, 112, 104, 3,
	55, 57, 109, 107, 56, 108, 121, 110, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 465,
	92, 91, 93, 3, 468, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 114, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 466, 103, 467, 115,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 85,
	86, 87, 88, 89, 90, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 105, 106, 111, 113, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:517
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:523
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:549
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:553
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:559
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				LoadParam:         yyDollar[5].loadParamUnion(),
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Loadparameter
//line mysql_sql.y:574
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Loadparameter
//line mysql_sql.y:578
		{
			yyLOCAL = &tree.Loadparameter{
				File:     yyDollar[1].str,
				LoadType: tree.LOCAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Loadparameter
//line mysql_sql.y:585
		{
			yyLOCAL = &tree.Loadparameter{
				S3options: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:593
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:597
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
			fmt.Println("wangjian test1 is", yyLOCAL)
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:603
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:607
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:613
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:617
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:623
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:627
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:633
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:640
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:649
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:653
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:657
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:662
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:666
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:670
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:676
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:685
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:696
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:700
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:706
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:710
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:716
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:720
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:726
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:750
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:769
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:773
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:778
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:782
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:790
		{
			yyVAL.str = ""
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:794
		{
			yyVAL.str = yyDollar[3].str
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:799
		{
			yyVAL.str = "\n"
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:803
		{
			yyVAL.str = yyDollar[3].str
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:808
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:812
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:836
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:840
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:846
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:852
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:870
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:887
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:910
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:914
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:918
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:923
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:927
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:933
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:943
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:951
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:961
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:965
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:975
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:985
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:995
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1001
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1007
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1014
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1022
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1030
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1034
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1038
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1042
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1048
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1052
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1058
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1065
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1074
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1078
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1084
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1088
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1120
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1124
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1128
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1132
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1136
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1140
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1144
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1168
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1172
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1176
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1180
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1184
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1188
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1192
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1196
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1200
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1204
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1208
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1212
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1224
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1230
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1238
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1246
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1250
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1254
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1260
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1264
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1268
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1274
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1280
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1284
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1291
		{
			yyVAL.str = yyDollar[3].str
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1297
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1301
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1307
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1315
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1324
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1332
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1340
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1363
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1386
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1393
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1400
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1408
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1415
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1422
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1431
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1435
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1439
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1445
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1449
		{
			yyVAL.str = yyDollar[1].str
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1456
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1467
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1473
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1478
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1482
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1486
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1490
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1494
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1498
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1502
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1506
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1512
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1516
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1520
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1524
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1529
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1534
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1540
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1544
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1551
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1558
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1569
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: yyDollar[4].tableExprsUnion(),
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1580
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1584
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1590
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1602
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1608
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1612
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1618
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1622
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1628
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1637
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1643
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1648
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1653
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1657
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1661
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1665
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1673
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1681
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1691
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1723
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1727
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1733
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1739
		{
			yyVAL.str = yyDollar[1].str
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1744
		{
			yyVAL.str = "true"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1745
		{
			yyVAL.str = "false"
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1746
		{
			yyVAL.str = yyDollar[1].str
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1751
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1761
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1772
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1785
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1789
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1794
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1798
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1804
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1808
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1814
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1818
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1822
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1826
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1830
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1834
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1840
		{
			yyVAL.item = nil
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1845
		{
			yyVAL.item = nil
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1867
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1871
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1877
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1891
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1901
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1910
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1914
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1918
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1924
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1930
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1936
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1942
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1952
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1964
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1968
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1974
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1986
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1999
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:2003
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2008
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2012
		{
			yyVAL.str = yyDollar[2].str
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2018
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2031
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2035
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2041
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2045
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2051
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2055
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2064
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2068
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2072
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2089
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2098
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2107
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2117
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2123
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2129
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2137
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2142
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2149
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2165
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: yyDollar[7].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2178
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: yyDollar[8].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2189
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2193
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2199
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2204
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2211
		{
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2213
		{
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2216
		{
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2225
		{
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2229
		{
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2234
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2243
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2250
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2256
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2264
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2271
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2278
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2297
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2301
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2305
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2311
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2320
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2324
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2330
		{
			yyVAL.str = yyDollar[1].str
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2334
		{
			yyVAL.str = yyDollar[3].str
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2340
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2344
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2350
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2355
		{
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2359
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2366
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2370
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2377
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2382
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2386
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2392
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2396
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2402
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2406
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2411
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2415
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2428
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2435
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2442
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2460
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2479
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2485
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2492
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2496
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2509
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2513
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2518
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2522
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2529
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2534
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2541
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2547
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2551
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2555
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2559
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2563
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2567
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2573
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2580
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2589
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2593
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2599
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2607
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2611
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2616
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2620
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2630
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2634
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2639
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2643
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2649
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2655
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2659
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2665
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2670
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2674
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2678
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2685
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2689
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2695
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2699
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2709
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2719
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2729
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2741
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2749
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2757
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2767
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2778
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2796
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2800
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2804
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2813
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2817
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2822
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2826
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2831
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2835
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2841
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2845
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2851
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2855
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2859
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2863
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2868
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2876
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2882
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2890
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2894
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2907
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2916
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2926
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2935
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2945
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2949
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2959
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2963
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2967
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2971
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2977
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2981
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2987
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2993
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2997
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3001
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3007
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3011
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3017
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3021
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3027
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3031
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3037
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3041
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:3054
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3059
		{
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3060
		{
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:3064
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3076
		{
			yyVAL.str = ""
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3080
		{
			yyVAL.str = yyDollar[1].str
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3084
		{
			yyVAL.str = yyDollar[2].str
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3093
		{
			yyVAL.str = ""
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3097
		{
			yyVAL.str = yyDollar[1].str
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3101
		{
			yyVAL.str = yyDollar[2].str
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3105
		{
			yyVAL.str = yyDollar[1].str
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3109
		{
			yyVAL.str = yyDollar[2].str
		}
	case 516:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3142
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3152
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3163
		{
		}
	case 520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3168
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3182
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3188
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3192
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3198
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3202
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3206
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3210
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3216
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3223
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3228
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3233
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3238
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3244
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3248
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3252
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3258
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3262
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3266
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3270
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3276
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3280
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3286
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3299
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3303
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3307
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3312
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3316
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3323
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3329
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3337
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3344
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3356
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3365
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3369
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3375
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3379
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3383
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3392
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3396
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3400
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3404
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3410
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3429
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3433
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3455
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3459
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3463
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3467
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3471
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3477
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3481
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3487
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3492
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3497
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3501
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3505
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3509
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3513
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3519
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3533
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3537
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3542
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3546
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3552
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3556
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3562
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3566
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3570
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3575
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3579
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3585
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3597
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3601
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3606
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3610
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3620
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3624
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3633
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3637
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3643
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3647
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3653
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3662
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3672
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3676
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3682
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3686
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3692
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3699
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3708
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3712
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3717
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3721
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3726
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3730
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3740
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3744
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3755
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3763
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3771
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3779
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3790
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3800
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3810
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3814
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3819
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3823
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3828
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3832
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3838
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3842
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3846
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3852
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3856
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3860
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3864
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3868
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3872
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3876
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3880
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3884
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3888
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3892
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3896
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3900
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3904
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3908
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3912
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3916
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3920
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3924
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3928
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3932
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3936
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3940
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3944
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3948
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3952
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3956
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3960
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3964
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3971
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3975
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3981
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3986
		{
			yyVAL.str = ""
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3990
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3994
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4000
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4004
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4008
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4012
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4016
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4020
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4034
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4038
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4047
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4052
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4058
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4065
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4069
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4075
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4079
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4085
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4095
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4101
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4110
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4119
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4142
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4151
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4161
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4169
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4175
		{
			yyVAL.str = ""
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4179
		{
			yyVAL.str = yyDollar[1].str
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4189
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4195
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4201
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4215
		{
			yyVAL.str = ""
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4222
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4228
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4232
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4236
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4247
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4251
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4255
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4260
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4264
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4270
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4274
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4280
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4284
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4288
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4292
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4296
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4300
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4304
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4308
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4312
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4316
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4320
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4324
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4328
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4338
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4342
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4347
		{
			yyVAL.str = ""
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4351
		{
			yyVAL.str = yyDollar[1].str
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4357
		{
			yyVAL.str = ""
		}
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4361
		{
			yyVAL.str = yyDollar[2].str
		}
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4367
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4378
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4388
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4395
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4402
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4409
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4418
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4424
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4430
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4434
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4438
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4442
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4446
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4451
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4458
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4462
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4466
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4471
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4475
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4480
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4484
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4500
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4506
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4510
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4514
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4518
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4522
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4526
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4530
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4534
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4538
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4542
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4546
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4550
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4554
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4560
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4564
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4568
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4572
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4576
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4580
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4584
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4588
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4592
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4596
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4600
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4604
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4609
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4617
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4621
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4625
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4634
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4638
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4642
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4646
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4651
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4655
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4660
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4664
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4670
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4674
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4680
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4690
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4707
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4724
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4737
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4750
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4762
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4776
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4791
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4806
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4823
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4838
		{
		}
	case 839:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4844
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4853
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4861
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4869
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4878
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4887
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4896
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4905
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4914
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4923
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4932
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4941
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4950
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4959
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4968
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4984
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4992
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5000
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5008
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5016
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5025
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5033
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5042
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5051
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5059
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5067
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5076
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5096
		{
			yyVAL.str = yyDollar[1].str
		}
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5132
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5144
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5158
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5166
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5173
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5180
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5192
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5200
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5211
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5220
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5229
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5237
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5247
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5255
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5263
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5273
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5277
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5283
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5287
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5306
		{
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5308
		{
		}
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5348
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5358
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5362
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5366
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5372
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5377
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5381
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5387
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5391
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5398
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5402
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5406
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5414
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5418
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5422
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5426
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5430
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5435
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5440
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5446
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5450
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5454
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5458
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5465
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5469
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5475
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5479
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5483
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5487
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5491
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5495
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5499
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5503
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5509
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5513
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5519
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5523
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5530
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5534
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5538
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5544
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5548
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5552
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5556
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5560
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5564
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5568
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5574
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5578
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5582
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5586
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5592
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5596
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5609
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5614
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5618
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5622
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5626
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5640
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5644
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5658
		{
			yyLOCAL = tree.NewParamExpr(yyp)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5664
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5675
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5680
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5686
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5698
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5710
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5722
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5735
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5748
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5761
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5774
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5787
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5800
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5813
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5826
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5839
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5852
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5867
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5890
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5927
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5975
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5992
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6004
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6019
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6039
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6059
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6075
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6088
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6101
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6114
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6127
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6139
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6151
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6163
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6175
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6187
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6199
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6211
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6223
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6235
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6248
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6263
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6286
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6291
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6297
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6304
		{
			yyLOCAL = 6
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6308
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6313
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6317
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6323
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6329
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6336
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6343
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6352
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6359
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6366
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6375
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6379
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6383
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6389
		{
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6391
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6401
		{
			yyVAL.str = ""
		}
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6405
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
