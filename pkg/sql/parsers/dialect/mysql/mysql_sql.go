// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/fileservice"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const SELECT = 57349
const STREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const LOWER_THAN_SET = 57363
const SET = 57364
const ALL = 57365
const DISTINCT = 57366
const DISTINCTROW = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const LOCK = 57375
const KEYS = 57376
const VALUES = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const SUBQUERY_AS_EXPR = 57396
const LOWER_THAN_STRING = 57397
const ID = 57398
const AT_ID = 57399
const AT_AT_ID = 57400
const STRING = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const INTEGRAL = 57406
const HEX = 57407
const BIT_LITERAL = 57408
const FLOAT = 57409
const HEXNUM = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const LOWER_THAN_CHARSET = 57414
const CHARSET = 57415
const UNIQUE = 57416
const KEY = 57417
const OR = 57418
const PIPE_CONCAT = 57419
const XOR = 57420
const AND = 57421
const NOT = 57422
const BETWEEN = 57423
const CASE = 57424
const WHEN = 57425
const THEN = 57426
const ELSE = 57427
const END = 57428
const LE = 57429
const GE = 57430
const NE = 57431
const NULL_SAFE_EQUAL = 57432
const IS = 57433
const LIKE = 57434
const REGEXP = 57435
const IN = 57436
const ASSIGNMENT = 57437
const SHIFT_LEFT = 57438
const SHIFT_RIGHT = 57439
const DIV = 57440
const MOD = 57441
const UNARY = 57442
const COLLATE = 57443
const BINARY = 57444
const UNDERSCORE_BINARY = 57445
const INTERVAL = 57446
const BEGIN = 57447
const START = 57448
const TRANSACTION = 57449
const COMMIT = 57450
const ROLLBACK = 57451
const WORK = 57452
const CONSISTENT = 57453
const SNAPSHOT = 57454
const CHAIN = 57455
const NO = 57456
const RELEASE = 57457
const PRIORITY = 57458
const QUICK = 57459
const BIT = 57460
const TINYINT = 57461
const SMALLINT = 57462
const MEDIUMINT = 57463
const INT = 57464
const INTEGER = 57465
const BIGINT = 57466
const INTNUM = 57467
const REAL = 57468
const DOUBLE = 57469
const FLOAT_TYPE = 57470
const DECIMAL = 57471
const NUMERIC = 57472
const DECIMAL_VALUE = 57473
const TIME = 57474
const TIMESTAMP = 57475
const DATETIME = 57476
const YEAR = 57477
const CHAR = 57478
const VARCHAR = 57479
const BOOL = 57480
const CHARACTER = 57481
const VARBINARY = 57482
const NCHAR = 57483
const TEXT = 57484
const TINYTEXT = 57485
const MEDIUMTEXT = 57486
const LONGTEXT = 57487
const BLOB = 57488
const TINYBLOB = 57489
const MEDIUMBLOB = 57490
const LONGBLOB = 57491
const JSON = 57492
const ENUM = 57493
const GEOMETRY = 57494
const POINT = 57495
const LINESTRING = 57496
const POLYGON = 57497
const GEOMETRYCOLLECTION = 57498
const MULTIPOINT = 57499
const MULTILINESTRING = 57500
const MULTIPOLYGON = 57501
const INT1 = 57502
const INT2 = 57503
const INT3 = 57504
const INT4 = 57505
const INT8 = 57506
const S3 = 57507
const SQL_SMALL_RESULT = 57508
const SQL_BIG_RESULT = 57509
const SQL_BUFFER_RESULT = 57510
const LOW_PRIORITY = 57511
const HIGH_PRIORITY = 57512
const DELAYED = 57513
const CREATE = 57514
const ALTER = 57515
const DROP = 57516
const RENAME = 57517
const ANALYZE = 57518
const ADD = 57519
const SCHEMA = 57520
const TABLE = 57521
const INDEX = 57522
const VIEW = 57523
const TO = 57524
const IGNORE = 57525
const IF = 57526
const PRIMARY = 57527
const COLUMN = 57528
const CONSTRAINT = 57529
const SPATIAL = 57530
const FULLTEXT = 57531
const FOREIGN = 57532
const KEY_BLOCK_SIZE = 57533
const SHOW = 57534
const DESCRIBE = 57535
const EXPLAIN = 57536
const DATE = 57537
const ESCAPE = 57538
const REPAIR = 57539
const OPTIMIZE = 57540
const TRUNCATE = 57541
const MAXVALUE = 57542
const PARTITION = 57543
const REORGANIZE = 57544
const LESS = 57545
const THAN = 57546
const PROCEDURE = 57547
const TRIGGER = 57548
const STATUS = 57549
const VARIABLES = 57550
const ROLE = 57551
const PROXY = 57552
const AVG_ROW_LENGTH = 57553
const STORAGE = 57554
const DISK = 57555
const MEMORY = 57556
const CHECKSUM = 57557
const COMPRESSION = 57558
const DATA = 57559
const DIRECTORY = 57560
const DELAY_KEY_WRITE = 57561
const ENCRYPTION = 57562
const ENGINE = 57563
const MAX_ROWS = 57564
const MIN_ROWS = 57565
const PACK_KEYS = 57566
const ROW_FORMAT = 57567
const STATS_AUTO_RECALC = 57568
const STATS_PERSISTENT = 57569
const STATS_SAMPLE_PAGES = 57570
const DYNAMIC = 57571
const COMPRESSED = 57572
const REDUNDANT = 57573
const COMPACT = 57574
const FIXED = 57575
const COLUMN_FORMAT = 57576
const AUTO_RANDOM = 57577
const RESTRICT = 57578
const CASCADE = 57579
const ACTION = 57580
const PARTIAL = 57581
const SIMPLE = 57582
const CHECK = 57583
const ENFORCED = 57584
const RANGE = 57585
const LIST = 57586
const ALGORITHM = 57587
const LINEAR = 57588
const PARTITIONS = 57589
const SUBPARTITION = 57590
const SUBPARTITIONS = 57591
const TYPE = 57592
const ANY = 57593
const SOME = 57594
const PREPARE = 57595
const DEALLOCATE = 57596
const PROPERTIES = 57597
const PARSER = 57598
const VISIBLE = 57599
const INVISIBLE = 57600
const BTREE = 57601
const HASH = 57602
const RTREE = 57603
const BSI = 57604
const ZONEMAP = 57605
const LEADING = 57606
const BOTH = 57607
const TRAILING = 57608
const UNKNOWN = 57609
const EXPIRE = 57610
const ACCOUNT = 57611
const UNLOCK = 57612
const DAY = 57613
const NEVER = 57614
const SECOND = 57615
const ASCII = 57616
const COALESCE = 57617
const COLLATION = 57618
const HOUR = 57619
const MICROSECOND = 57620
const MINUTE = 57621
const MONTH = 57622
const QUARTER = 57623
const REPEAT = 57624
const REVERSE = 57625
const ROW_COUNT = 57626
const WEEK = 57627
const REVOKE = 57628
const FUNCTION = 57629
const PRIVILEGES = 57630
const TABLESPACE = 57631
const EXECUTE = 57632
const SUPER = 57633
const GRANT = 57634
const OPTION = 57635
const REFERENCES = 57636
const REPLICATION = 57637
const SLAVE = 57638
const CLIENT = 57639
const USAGE = 57640
const RELOAD = 57641
const FILE = 57642
const TEMPORARY = 57643
const ROUTINE = 57644
const EVENT = 57645
const SHUTDOWN = 57646
const NULLX = 57647
const AUTO_INCREMENT = 57648
const APPROXNUM = 57649
const SIGNED = 57650
const UNSIGNED = 57651
const ZEROFILL = 57652
const USER = 57653
const IDENTIFIED = 57654
const CIPHER = 57655
const ISSUER = 57656
const X509 = 57657
const SUBJECT = 57658
const SAN = 57659
const REQUIRE = 57660
const SSL = 57661
const NONE = 57662
const PASSWORD = 57663
const MAX_QUERIES_PER_HOUR = 57664
const MAX_UPDATES_PER_HOUR = 57665
const MAX_CONNECTIONS_PER_HOUR = 57666
const MAX_USER_CONNECTIONS = 57667
const FORMAT = 57668
const VERBOSE = 57669
const CONNECTION = 57670
const LOAD = 57671
const INFILE = 57672
const TERMINATED = 57673
const OPTIONALLY = 57674
const ENCLOSED = 57675
const ESCAPED = 57676
const STARTING = 57677
const LINES = 57678
const DATABASES = 57679
const TABLES = 57680
const EXTENDED = 57681
const FULL = 57682
const PROCESSLIST = 57683
const FIELDS = 57684
const COLUMNS = 57685
const OPEN = 57686
const ERRORS = 57687
const WARNINGS = 57688
const INDEXES = 57689
const SCHEMAS = 57690
const NAMES = 57691
const GLOBAL = 57692
const SESSION = 57693
const ISOLATION = 57694
const LEVEL = 57695
const READ = 57696
const WRITE = 57697
const ONLY = 57698
const REPEATABLE = 57699
const COMMITTED = 57700
const UNCOMMITTED = 57701
const SERIALIZABLE = 57702
const LOCAL = 57703
const EXCEPT = 57704
const CURRENT_TIMESTAMP = 57705
const DATABASE = 57706
const CURRENT_TIME = 57707
const LOCALTIME = 57708
const LOCALTIMESTAMP = 57709
const UTC_DATE = 57710
const UTC_TIME = 57711
const UTC_TIMESTAMP = 57712
const REPLACE = 57713
const CONVERT = 57714
const SEPARATOR = 57715
const CURRENT_DATE = 57716
const CURRENT_USER = 57717
const CURRENT_ROLE = 57718
const SECOND_MICROSECOND = 57719
const MINUTE_MICROSECOND = 57720
const MINUTE_SECOND = 57721
const HOUR_MICROSECOND = 57722
const HOUR_SECOND = 57723
const HOUR_MINUTE = 57724
const DAY_MICROSECOND = 57725
const DAY_SECOND = 57726
const DAY_MINUTE = 57727
const DAY_HOUR = 57728
const YEAR_MONTH = 57729
const SQL_TSI_HOUR = 57730
const SQL_TSI_DAY = 57731
const SQL_TSI_WEEK = 57732
const SQL_TSI_MONTH = 57733
const SQL_TSI_QUARTER = 57734
const SQL_TSI_YEAR = 57735
const SQL_TSI_SECOND = 57736
const SQL_TSI_MINUTE = 57737
const RECURSIVE = 57738
const CONFIG = 57739
const MATCH = 57740
const AGAINST = 57741
const BOOLEAN = 57742
const LANGUAGE = 57743
const WITH = 57744
const QUERY = 57745
const EXPANSION = 57746
const ADDDATE = 57747
const BIT_AND = 57748
const BIT_OR = 57749
const BIT_XOR = 57750
const CAST = 57751
const COUNT = 57752
const APPROX_COUNT_DISTINCT = 57753
const APPROX_PERCENTILE = 57754
const CURDATE = 57755
const CURTIME = 57756
const DATE_ADD = 57757
const DATE_SUB = 57758
const EXTRACT = 57759
const GROUP_CONCAT = 57760
const MAX = 57761
const MID = 57762
const MIN = 57763
const NOW = 57764
const POSITION = 57765
const SESSION_USER = 57766
const STD = 57767
const STDDEV = 57768
const STDDEV_POP = 57769
const STDDEV_SAMP = 57770
const SUBDATE = 57771
const SUBSTR = 57772
const SUBSTRING = 57773
const SUM = 57774
const SYSDATE = 57775
const SYSTEM_USER = 57776
const TRANSLATE = 57777
const TRIM = 57778
const VARIANCE = 57779
const VAR_POP = 57780
const VAR_SAMP = 57781
const AVG = 57782
const ROW = 57783
const OUTFILE = 57784
const HEADER = 57785
const MAX_FILE_SIZE = 57786
const FORCE_QUOTE = 57787
const UNUSED = 57788

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PREPARE",
	"DEALLOCATE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'['",
	"']'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6793

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	18, 412,
	-2, 393,
	-1, 66,
	197, 562,
	-2, 598,
	-1, 81,
	224, 278,
	225, 278,
	-2, 299,
	-1, 333,
	60, 1386,
	467, 1386,
	-2, 102,
	-1, 352,
	60, 723,
	467, 723,
	-2, 560,
	-1, 353,
	60, 553,
	467, 553,
	-2, 561,
	-1, 359,
	18, 413,
	-2, 376,
	-1, 428,
	91, 1266,
	102, 1266,
	121, 1266,
	-2, 1088,
	-1, 456,
	18, 413,
	-2, 376,
	-1, 603,
	55, 1415,
	-2, 1422,
	-1, 611,
	55, 1416,
	-2, 1430,
	-1, 613,
	55, 1412,
	-2, 1432,
	-1, 614,
	55, 1413,
	-2, 1433,
	-1, 619,
	55, 1414,
	-2, 1439,
	-1, 620,
	55, 1417,
	-2, 1440,
	-1, 621,
	55, 1418,
	-2, 1441,
	-1, 622,
	55, 852,
	-2, 1442,
	-1, 623,
	55, 853,
	-2, 1443,
	-1, 624,
	55, 854,
	-2, 1444,
	-1, 626,
	55, 1419,
	-2, 1446,
	-1, 627,
	55, 871,
	-2, 1447,
	-1, 628,
	55, 870,
	-2, 1448,
	-1, 631,
	55, 1420,
	-2, 1451,
	-1, 632,
	55, 1421,
	-2, 1452,
	-1, 638,
	55, 933,
	-2, 1266,
	-1, 639,
	55, 942,
	-2, 1292,
	-1, 640,
	55, 946,
	-2, 1331,
	-1, 641,
	55, 957,
	-2, 1391,
	-1, 642,
	55, 959,
	-2, 1401,
	-1, 643,
	55, 947,
	-2, 1406,
	-1, 644,
	55, 955,
	-2, 1410,
	-1, 645,
	55, 936,
	-2, 1411,
	-1, 795,
	1, 588,
	57, 588,
	464, 588,
	-2, 595,
	-1, 932,
	18, 412,
	-2, 781,
	-1, 978,
	121, 1098,
	-2, 1096,
	-1, 980,
	121, 502,
	-2, 1093,
	-1, 981,
	121, 503,
	-2, 1094,
	-1, 1172,
	1, 589,
	57, 589,
	464, 589,
	-2, 595,
	-1, 1259,
	55, 1000,
	-2, 1408,
	-1, 1260,
	55, 1001,
	-2, 1409,
	-1, 1422,
	53, 333,
	56, 333,
	-2, 687,
	-1, 1739,
	76, 595,
	117, 595,
	153, 595,
	156, 595,
	-2, 635,
	-1, 1741,
	258, 748,
	-2, 729,
	-1, 1765,
	53, 333,
	56, 333,
	-2, 688,
	-1, 1850,
	76, 595,
	117, 595,
	153, 595,
	156, 595,
	-2, 636,
	-1, 1878,
	258, 748,
	-2, 730,
	-1, 2271,
	56, 610,
	57, 610,
	-2, 595,
	-1, 2276,
	56, 610,
	57, 610,
	-2, 595,
	-1, 2291,
	56, 614,
	57, 614,
	-2, 595,
	-1, 2296,
	56, 615,
	57, 615,
	-2, 595,
}

const yyPrivate = 57344

const yyLast = 23407

var yyAct = [...]int{
	782, 2276, 2278, 2284, 2275, 2246, 648, 2218, 2107, 1262,
	1908, 771, 666, 2234, 2188, 1219, 1890, 2169, 2080, 2170,
	1846, 2083, 2061, 537, 646, 1906, 1159, 98, 1733, 1263,
	863, 2015, 312, 318, 582, 318, 574, 2068, 1907, 829,
	1215, 360, 1794, 101, 678, 61, 316, 22, 359, 1898,
	322, 1759, 1921, 1879, 1563, 799, 1587, 1458, 354, 354,
	1425, 426, 1897, 1559, 1546, 516, 97, 525, 849, 383,
	1787, 1437, 1797, 602, 304, 1805, 61, 1809, 1214, 1604,
	1406, 823, 1568, 801, 1575, 1564, 1745, 960, 1624, 427,
	1634, 1165, 1642, 1500, 975, 1613, 769, 98, 1178, 766,
	527, 451, 969, 970, 60, 961, 1346, 978, 1463, 1332,
	1250, 826, 647, 842, 1436, 824, 1201, 1400, 808, 434,
	29, 657, 3, 315, 15, 313, 6, 314, 5, 1173,
	1177, 429, 1854, 1261, 784, 433, 453, 1276, 431, 61,
	767, 22, 595, 385, 649, 846, 324, 809, 810, 865,
	1264, 29, 1217, 305, 329, 329, 1139, 308, 466, 899,
	418, 504, 868, 566, 1241, 550, 382, 758, 326, 12,
	7, 325, 4, 2301, 1146, 2293, 483, 2150, 2294, 2223,
	1840, 94, 1933, 1842, 1732, 779, 963, 583, 92, 594,
	2134, 1142, 317, 89, 93, 432, 26, 83, 67, 552,
	93, 1547, 26, 83, 67, 356, 1401, 1381, 2124, 93,
	372, 26, 83, 67, 29, 548, 419, 450, 15, 514,
	6, 1388, 5, 303, 836, 438, 437, 320, 93, 544,
	503, 1392, 390, 831, 832, 93, 812, 2157, 538, 539,
	404, 380, 90, 727, 93, 774, 498, 553, 90, 747,
	2192, 2155, 494, 2013, 1551, 436, 724, 90, 2097, 2173,
	2174, 536, 2094, 1525, 535, 538, 539, 2016, 2017, 2018,
	2019, 1552, 1936, 1553, 1734, 778, 726, 1576, 1577, 1578,
	1579, 1373, 460, 90, 1605, 1608, 843, 469, 1144, 1142,
	405, 485, 90, 1918, 1409, 1407, 1404, 1408, 1410, 440,
	1403, 1402, 1793, 1792, 1409, 1407, 459, 1408, 1410, 496,
	497, 1895, 1838, 484, 495, 1728, 458, 759, 1999, 1775,
	318, 1776, 98, 1580, 1772, 2183, 2159, 93, 374, 319,
	1988, 2266, 2133, 2285, 2198, 2154, 1607, 2109, 371, 370,
	1253, 1254, 1255, 761, 489, 455, 457, 1468, 1254, 1255,
	2205, 1251, 431, 456, 61, 61, 433, 435, 361, 366,
	2172, 476, 2069, 2070, 2071, 2073, 2072, 1412, 1413, 1414,
	1415, 2082, 490, 2256, 2131, 90, 66, 1982, 91, 1951,
	2105, 2106, 383, 2109, 1950, 358, 2115, 1977, 2161, 2162,
	562, 534, 533, 2286, 492, 2279, 81, 2247, 2136, 2137,
	517, 1939, 452, 2092, 1501, 549, 509, 1773, 493, 1389,
	439, 551, 1385, 1228, 545, 354, 432, 480, 1150, 1572,
	786, 427, 427, 427, 519, 760, 354, 354, 1729, 29,
	29, 321, 518, 522, 520, 410, 515, 471, 470, 1789,
	1788, 318, 598, 598, 2237, 377, 378, 379, 430, 1152,
	1456, 369, 487, 1226, 1225, 729, 2046, 1224, 556, 396,
	834, 365, 835, 579, 488, 491, 1973, 462, 463, 554,
	555, 597, 597, 745, 486, 585, 1223, 833, 407, 304,
	354, 354, 459, 354, 412, 411, 529, 408, 2260, 2222,
	730, 1768, 772, 541, 542, 1593, 61, 1554, 725, 1465,
	1945, 354, 354, 1426, 917, 1379, 1378, 1372, 857, 61,
	1367, 329, 474, 469, 373, 1193, 1157, 354, 61, 354,
	754, 795, 576, 576, 383, 2160, 1136, 800, 880, 733,
	581, 98, 472, 454, 530, 791, 398, 781, 1573, 397,
	785, 538, 539, 2135, 1541, 817, 464, 2081, 506, 354,
	508, 98, 1252, 2238, 1547, 538, 539, 1141, 1597, 1467,
	500, 561, 844, 354, 427, 1539, 354, 815, 1167, 1153,
	805, 1409, 1407, 528, 1408, 1410, 1774, 329, 1771, 773,
	787, 1145, 858, 482, 29, 1978, 1979, 572, 573, 354,
	354, 862, 98, 29, 1540, 565, 850, 753, 877, 750,
	776, 749, 850, 850, 2241, 2232, 68, 1140, 866, 1382,
	1588, 818, 68, 804, 2119, 329, 788, 396, 731, 584,
	756, 68, 736, 524, 540, 813, 814, 543, 303, 881,
	1611, 864, 722, 593, 806, 807, 867, 569, 570, 571,
	68, 803, 777, 752, 751, 732, 748, 68, 819, 770,
	762, 588, 589, 590, 591, 592, 68, 531, 1418, 329,
	1369, 934, 430, 471, 470, 790, 564, 775, 780, 1230,
	2047, 2049, 2050, 2051, 2048, 2235, 2236, 1339, 740, 741,
	1975, 933, 461, 1702, 1974, 811, 329, 796, 860, 941,
	797, 1337, 1338, 1336, 398, 409, 932, 397, 1398, 443,
	448, 449, 567, 1266, 1265, 1347, 845, 943, 1347, 840,
	1506, 789, 375, 568, 1509, 822, 873, 1508, 855, 856,
	876, 873, 1984, 1968, 841, 1983, 1749, 967, 967, 972,
	1744, 2273, 2252, 852, 853, 854, 861, 2215, 2199, 68,
	874, 875, 876, 873, 859, 2143, 532, 2299, 1831, 980,
	920, 921, 922, 923, 924, 917, 432, 2057, 800, 2090,
	874, 875, 876, 873, 744, 935, 936, 937, 938, 1704,
	2291, 433, 743, 1488, 2255, 2089, 2063, 981, 1419, 2041,
	939, 2055, 61, 413, 2280, 1830, 2264, 98, 98, 1271,
	907, 2040, 2056, 2039, 1569, 1572, 406, 1179, 874, 875,
	876, 873, 93, 957, 26, 83, 67, 874, 875, 876,
	873, 2166, 312, 1138, 2254, 2036, 2054, 88, 1487, 1195,
	2030, 1707, 2269, 2027, 77, 866, 1162, 1164, 1274, 2026,
	966, 432, 1183, 874, 875, 876, 873, 354, 1275, 2053,
	874, 875, 876, 873, 951, 49, 1681, 1678, 1679, 1680,
	90, 1934, 1712, 867, 1711, 1710, 1708, 29, 354, 445,
	446, 447, 918, 919, 920, 921, 922, 923, 924, 917,
	598, 1297, 98, 1220, 2052, 1222, 1926, 2043, 1925, 1246,
	1924, 1248, 850, 850, 850, 959, 979, 1920, 1919, 1184,
	1185, 1186, 973, 1912, 974, 1134, 1755, 1135, 1754, 597,
	1691, 1753, 1752, 1242, 1243, 1244, 1245, 1272, 1273, 1187,
	1537, 1196, 2042, 734, 1573, 1709, 2244, 84, 85, 1566,
	86, 87, 1847, 1567, 1570, 1269, 2193, 2182, 1174, 1189,
	2165, 1191, 1149, 329, 2062, 1221, 2113, 2112, 1311, 2100,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1238, 1240, 1235, 1341, 1342, 1256, 2088, 1188,
	2298, 957, 1356, 811, 1192, 1190, 2044, 874, 875, 876,
	873, 2037, 1348, 2033, 1351, 1571, 874, 875, 876, 873,
	1358, 2032, 2031, 1227, 66, 82, 91, 1970, 47, 884,
	885, 886, 887, 888, 889, 890, 882, 1935, 1231, 1232,
	1233, 2086, 1931, 1922, 81, 76, 75, 1293, 1459, 1290,
	1845, 1843, 1239, 1292, 1289, 1291, 1295, 1296, 792, 793,
	794, 1294, 1762, 874, 875, 876, 873, 1511, 1713, 1714,
	916, 915, 925, 926, 918, 919, 920, 921, 922, 923,
	924, 917, 1340, 1361, 1267, 1268, 1585, 1270, 1584, 1334,
	1583, 1582, 1475, 1306, 1307, 1308, 1309, 1310, 1549, 1154,
	1316, 1317, 1318, 1319, 953, 78, 79, 915, 925, 926,
	918, 919, 920, 921, 922, 923, 924, 917, 1350, 1352,
	1353, 1349, 1160, 1161, 693, 692, 2288, 914, 1357, 913,
	1359, 735, 1471, 2300, 874, 875, 876, 873, 57, 2290,
	2289, 363, 80, 2140, 58, 874, 875, 876, 873, 1360,
	2139, 362, 2120, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
	1285, 1286, 1287, 1288, 1300, 1301, 1302, 1303, 1304, 1305,
	1298, 1299, 2011, 874, 875, 876, 873, 1374, 323, 1148,
	2267, 59, 2006, 354, 1156, 928, 354, 931, 2002, 459,
	2001, 354, 587, 802, 874, 875, 876, 873, 1395, 1384,
	1832, 929, 930, 927, 1829, 916, 915, 925, 926, 918,
	919, 920, 921, 922, 923, 924, 917, 1422, 2263, 2262,
	1821, 1155, 2274, 1428, 1786, 1393, 1394, 1515, 785, 1739,
	1471, 1514, 1148, 2250, 1433, 1993, 1211, 355, 1721, 459,
	98, 98, 98, 98, 874, 875, 876, 873, 1623, 1438,
	1927, 459, 98, 1453, 68, 1598, 1420, 874, 875, 876,
	873, 1438, 1817, 1148, 2249, 61, 1518, 22, 1516, 354,
	1397, 1816, 874, 875, 876, 873, 1417, 98, 98, 2221,
	2220, 1513, 1383, 1512, 874, 875, 876, 873, 1995, 2180,
	1386, 1995, 2175, 874, 875, 876, 873, 1454, 1237, 2163,
	1220, 925, 926, 918, 919, 920, 921, 922, 923, 924,
	917, 1429, 2152, 2151, 1995, 2129, 1461, 1462, 1995, 2128,
	1476, 802, 1375, 1380, 1995, 2127, 1995, 2126, 2118, 2117,
	1430, 1510, 1431, 1396, 1472, 2010, 2009, 1473, 1474, 1480,
	29, 1477, 1416, 1427, 15, 1174, 6, 1421, 5, 1815,
	1470, 1432, 2008, 2007, 1434, 1439, 1440, 1441, 1442, 2004,
	2005, 2004, 2003, 1452, 1610, 1451, 1450, 1592, 1457, 1698,
	1424, 874, 875, 876, 873, 1455, 1482, 1483, 1484, 1485,
	1486, 1435, 1490, 1423, 1460, 1495, 1491, 1492, 1493, 1494,
	916, 915, 925, 926, 918, 919, 920, 921, 922, 923,
	924, 917, 1466, 1498, 1499, 1355, 967, 1354, 1529, 967,
	1182, 2000, 1532, 1719, 1503, 1995, 1994, 1507, 354, 1469,
	932, 1701, 354, 354, 1471, 1696, 354, 1424, 1535, 1210,
	1519, 1471, 1682, 850, 586, 874, 875, 876, 873, 850,
	459, 1471, 1479, 874, 875, 876, 873, 1471, 1478, 61,
	1562, 1526, 98, 1182, 1376, 2261, 1536, 1371, 1370, 871,
	1695, 1365, 1364, 1211, 98, 1179, 2240, 1596, 1182, 1181,
	1148, 1147, 1524, 738, 737, 499, 2292, 1694, 1531, 478,
	432, 2253, 874, 875, 876, 873, 1496, 2195, 2020, 477,
	1497, 1586, 1505, 478, 1528, 479, 1471, 1362, 1334, 874,
	875, 876, 873, 869, 1740, 1730, 1627, 1533, 1521, 1527,
	1520, 1530, 1142, 1722, 1211, 1589, 1590, 1538, 1542, 1544,
	1534, 480, 1368, 93, 1693, 1545, 1581, 916, 915, 925,
	926, 918, 919, 920, 921, 922, 923, 924, 917, 480,
	93, 1629, 1692, 83, 67, 1594, 874, 875, 876, 873,
	354, 1683, 1344, 1237, 1599, 1600, 354, 1158, 1689, 1690,
	1609, 1622, 1591, 1595, 874, 875, 876, 873, 1137, 523,
	563, 90, 2231, 1601, 2225, 1621, 1703, 1618, 1688, 2206,
	2203, 1716, 1718, 1987, 354, 1687, 1715, 1170, 90, 1686,
	2201, 2142, 1717, 2078, 475, 1627, 1685, 98, 2066, 2064,
	874, 875, 876, 873, 2059, 2021, 1743, 874, 875, 876,
	873, 874, 875, 876, 873, 1796, 1700, 1991, 874, 875,
	876, 873, 1990, 1989, 1986, 1981, 1966, 526, 354, 1806,
	354, 1697, 1798, 98, 1765, 1684, 1738, 1810, 1813, 1803,
	61, 1706, 1737, 1632, 1802, 1620, 576, 1631, 1782, 1720,
	1757, 459, 576, 1723, 1699, 1750, 1335, 874, 875, 876,
	873, 1438, 90, 1399, 1758, 874, 875, 876, 873, 874,
	875, 876, 873, 1390, 1747, 1220, 1785, 1727, 1363, 1229,
	1724, 1780, 1630, 1517, 1781, 1197, 1180, 1783, 958, 1742,
	1746, 1778, 1746, 1741, 956, 1784, 1748, 1767, 431, 1751,
	955, 1756, 954, 952, 874, 875, 876, 873, 900, 949,
	1763, 948, 946, 945, 1764, 944, 942, 912, 1766, 911,
	910, 909, 1779, 1770, 576, 1769, 1760, 1343, 1800, 1801,
	916, 915, 925, 926, 918, 919, 920, 921, 922, 923,
	924, 917, 1804, 908, 906, 1808, 905, 1790, 904, 874,
	875, 876, 873, 903, 902, 901, 898, 1799, 897, 896,
	895, 1818, 401, 894, 893, 892, 354, 354, 891, 757,
	98, 728, 481, 2211, 1820, 1614, 1615, 1807, 2209, 2171,
	1619, 459, 1851, 1617, 1411, 1899, 1901, 1236, 1899, 1899,
	1822, 1562, 850, 1824, 501, 1826, 1447, 1811, 459, 1814,
	1445, 1448, 1444, 1443, 396, 1446, 2272, 1366, 1449, 1839,
	1207, 1208, 1819, 339, 1175, 338, 342, 334, 1160, 1161,
	1905, 1823, 1548, 800, 1827, 1828, 505, 1825, 1725, 330,
	48, 1834, 1837, 1937, 28, 1900, 1896, 1726, 1555, 349,
	1556, 1168, 27, 821, 1876, 1213, 1848, 1198, 798, 2185,
	1902, 1903, 547, 1915, 546, 1904, 1266, 1265, 2229, 1133,
	300, 507, 1835, 1836, 301, 2226, 1767, 1203, 1206, 1207,
	1208, 1204, 302, 1205, 1209, 1914, 511, 512, 1916, 2147,
	2145, 398, 2099, 2098, 397, 2096, 2024, 1910, 1911, 2022,
	1844, 1777, 1736, 1941, 1735, 1626, 1923, 510, 362, 1625,
	802, 1928, 1464, 1930, 916, 915, 925, 926, 918, 919,
	920, 921, 922, 923, 924, 917, 363, 395, 2213, 2212,
	1212, 1481, 386, 1377, 473, 399, 362, 354, 1203, 1206,
	1207, 1208, 1204, 2212, 1205, 1209, 98, 2213, 34, 1,
	521, 376, 1312, 513, 742, 1901, 442, 1969, 468, 1942,
	1943, 739, 1946, 1947, 1948, 1949, 1944, 467, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1967, 1896, 465, 1985, 1345, 1277, 1971, 1997,
	679, 962, 968, 2025, 2060, 2184, 2217, 2141, 2187, 755,
	665, 1996, 1998, 2091, 1992, 332, 331, 335, 1550, 431,
	2012, 2093, 2014, 337, 1391, 2058, 1929, 1387, 502, 1522,
	1523, 691, 682, 947, 684, 341, 723, 444, 681, 1913,
	1606, 364, 61, 1760, 2023, 441, 387, 459, 1917, 763,
	459, 459, 459, 1731, 1791, 2038, 459, 1812, 1220, 1795,
	2283, 2028, 2029, 2271, 2245, 2224, 2108, 2034, 2035, 2265,
	2153, 2204, 2067, 2197, 2104, 2075, 2076, 2077, 1938, 327,
	837, 557, 2102, 2085, 416, 2079, 2074, 1574, 1405, 354,
	354, 1166, 1143, 2087, 2084, 768, 328, 2132, 2065, 367,
	1169, 368, 392, 2103, 394, 404, 2095, 1172, 1171, 391,
	389, 388, 400, 393, 1257, 402, 403, 883, 1333, 950,
	98, 940, 600, 1504, 656, 2110, 2111, 459, 650, 1603,
	1602, 1891, 816, 336, 340, 764, 33, 344, 765, 459,
	32, 346, 347, 348, 31, 2287, 350, 351, 872, 976,
	2116, 680, 2125, 100, 2121, 1194, 977, 2101, 1932, 864,
	2189, 664, 384, 663, 2130, 662, 661, 1202, 1200, 1199,
	2227, 828, 827, 2138, 870, 2168, 2167, 2146, 2122, 2148,
	2149, 2123, 2144, 1841, 1980, 576, 576, 2045, 1976, 2156,
	2158, 1972, 2114, 1850, 1849, 1877, 1878, 1884, 1641, 1637,
	1639, 2164, 1640, 2191, 1638, 1705, 1633, 1560, 2176, 2177,
	2178, 2179, 1561, 2196, 1558, 2190, 916, 915, 925, 926,
	918, 919, 920, 921, 922, 923, 924, 917, 2194, 1557,
	1616, 1612, 964, 971, 783, 95, 825, 1151, 11, 10,
	2200, 746, 2202, 9, 14, 2207, 21, 20, 2210, 2208,
	2181, 19, 2219, 56, 55, 54, 53, 2214, 18, 2216,
	8, 52, 459, 1833, 459, 51, 50, 17, 16, 46,
	44, 43, 772, 2228, 772, 2230, 42, 41, 40, 39,
	38, 45, 2191, 2243, 37, 36, 35, 2239, 65, 64,
	63, 2233, 459, 62, 2190, 2248, 2242, 23, 24, 25,
	74, 73, 772, 2251, 70, 72, 71, 2219, 2257, 916,
	915, 925, 926, 918, 919, 920, 921, 922, 923, 924,
	917, 2268, 69, 30, 13, 2, 0, 0, 0, 2270,
	0, 2259, 0, 0, 0, 0, 0, 0, 0, 2282,
	0, 2281, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2296, 2295, 0, 0, 0, 0, 2282,
	1090, 1077, 2297, 1039, 1092, 1013, 1028, 1100, 1029, 1030,
	1064, 992, 1048, 225, 1026, 0, 1080, 984, 1016, 1017,
	986, 1023, 987, 1014, 1041, 169, 1012, 1051, 195, 1098,
	0, 0, 254, 209, 0, 0, 1044, 1082, 1046, 1069,
	1038, 1065, 1000, 1058, 1093, 1027, 1062, 1094, 0, 0,
	0, 0, 0, 792, 793, 794, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 1061, 1087, 1025, 0,
	154, 1091, 1045, 1063, 0, 0, 985, 1059, 0, 990,
	993, 1099, 1085, 1020, 1021, 0, 0, 0, 0, 0,
	0, 0, 1042, 1047, 1066, 1035, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1018, 0, 1055, 0, 0,
	0, 995, 991, 0, 1040, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 1132, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 1089, 298, 163, 289, 994, 281, 147,
	1127, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 1110, 1111, 1112, 1113, 1114, 1115, 1123, 1124, 0,
	1128, 1129, 1130, 999, 0, 1019, 1067, 0, 983, 1075,
	1083, 1037, 283, 1086, 1034, 1033, 1118, 0, 1117, 258,
	1119, 1120, 194, 1081, 1015, 1024, 299, 1022, 244, 227,
	1088, 1054, 1131, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 1116, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1125, 0, 1126, 295, 176,
	982, 278, 0, 223, 1078, 988, 998, 996, 1031, 1056,
	1057, 219, 294, 1071, 1074, 1072, 1101, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 255,
	276, 288, 279, 1032, 1006, 1043, 287, 1009, 1007, 1070,
	1008, 1060, 1103, 213, 214, 215, 216, 180, 0, 156,
	1052, 1036, 1104, 1105, 1106, 1107, 1108, 1109, 1011, 1084,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 1076,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 1005, 1010, 1004, 1049, 1050, 1095,
	1096, 1097, 1068, 997, 1079, 1001, 1003, 1002, 0, 0,
	0, 0, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1073, 0, 1053,
	138, 0, 196, 1102, 237, 174, 916, 915, 925, 926,
	918, 919, 920, 921, 922, 923, 924, 917, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	687, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	225, 0, 1121, 1122, 291, 292, 293, 277, 658, 0,
	0, 0, 169, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 701, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 651, 0, 0, 0,
	601, 693, 692, 667, 676, 0, 0, 151, 668, 0,
	675, 669, 673, 672, 670, 671, 0, 638, 0, 0,
	0, 0, 0, 0, 599, 655, 0, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 652, 653,
	0, 0, 0, 0, 688, 0, 654, 0, 0, 690,
	0, 677, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 674,
	686, 644, 163, 642, 685, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 683, 0, 0, 283,
	0, 0, 700, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 645, 0, 244, 227, 710, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1314, 1313, 1315, 295, 176, 0, 278, 698,
	223, 709, 694, 695, 696, 699, 702, 703, 640, 643,
	704, 706, 708, 711, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 641,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 689,
	213, 214, 215, 216, 639, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 717, 697, 716, 718, 719, 715, 720, 721, 705,
	660, 0, 713, 712, 714, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 117, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 636, 637, 0,
	0, 291, 292, 293, 277, 93, 0, 687, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 658, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 701, 707, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 651, 0, 0, 0, 601, 693, 692,
	667, 676, 0, 0, 151, 668, 0, 675, 669, 673,
	672, 670, 671, 0, 638, 0, 0, 0, 0, 0,
	0, 599, 655, 0, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 652, 653, 0, 0, 0,
	0, 688, 0, 654, 0, 0, 690, 0, 677, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 674, 686, 644, 163,
	642, 685, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 283, 0, 0, 700,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	645, 0, 244, 227, 710, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 698, 223, 709, 694,
	695, 696, 699, 702, 703, 640, 643, 704, 706, 708,
	711, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 641, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 689, 213, 214, 215,
	216, 639, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 717, 697,
	716, 718, 719, 715, 720, 721, 705, 660, 0, 713,
	712, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 68, 237, 174,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 117, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 687, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 225, 0, 0, 0,
	0, 0, 0, 0, 658, 0, 0, 0, 169, 851,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 701, 707, 0, 0, 0, 0, 0, 0, 847,
	0, 0, 651, 0, 0, 0, 601, 693, 692, 667,
	676, 0, 0, 151, 668, 0, 675, 669, 673, 672,
	670, 671, 0, 638, 0, 0, 0, 0, 0, 0,
	599, 655, 0, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652, 653, 0, 0, 0, 0,
	688, 0, 654, 0, 0, 848, 0, 677, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 674, 686, 644, 163, 642,
	685, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 683, 0, 0, 283, 0, 0, 700, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 645,
	0, 244, 227, 710, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 698, 223, 709, 694, 695,
	696, 699, 702, 703, 640, 643, 704, 706, 708, 711,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 641, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 689, 213, 214, 215, 216,
	639, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 717, 697, 716,
	718, 719, 715, 720, 721, 705, 660, 0, 713, 712,
	714, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 117, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 687, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 658, 0, 0, 0, 169, 2258, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	701, 707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 651, 0, 0, 0, 601, 693, 692, 667, 676,
	0, 0, 151, 668, 0, 675, 669, 673, 672, 670,
	671, 0, 638, 0, 0, 0, 0, 0, 0, 599,
	655, 0, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 652, 653, 0, 0, 0, 0, 688,
	0, 654, 0, 0, 690, 0, 677, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 674, 686, 644, 163, 642, 685,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 683, 0, 0, 283, 0, 0, 700, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 645, 0,
	244, 227, 710, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 698, 223, 709, 694, 695, 696,
	699, 702, 703, 640, 643, 704, 706, 708, 711, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 641, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 689, 213, 214, 215, 216, 639,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 717, 697, 716, 718,
	719, 715, 720, 721, 705, 660, 0, 713, 712, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 117, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 687, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 658, 0, 0, 0, 169, 851, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 701,
	707, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	651, 0, 0, 0, 601, 693, 692, 667, 676, 0,
	0, 151, 668, 0, 675, 669, 673, 672, 670, 671,
	0, 638, 0, 0, 0, 0, 0, 0, 599, 655,
	0, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 653, 0, 0, 0, 0, 688, 0,
	654, 0, 0, 690, 0, 677, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 674, 686, 644, 163, 642, 685, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	683, 0, 0, 283, 0, 0, 700, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 645, 0, 244,
	227, 710, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 698, 223, 709, 694, 695, 696, 699,
	702, 703, 640, 643, 704, 706, 708, 711, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 641, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 689, 213, 214, 215, 216, 639, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 717, 697, 716, 718, 719,
	715, 720, 721, 705, 660, 0, 713, 712, 714, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 603, 604, 605,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 117, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 0, 0, 291, 292, 293, 277, 687,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 658, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 701, 707, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 651, 0, 0, 0, 601,
	693, 692, 667, 676, 0, 0, 151, 668, 0, 675,
	669, 673, 672, 670, 671, 0, 638, 0, 0, 0,
	0, 0, 0, 599, 655, 0, 659, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 652, 653, 0,
	0, 0, 0, 688, 0, 654, 0, 0, 690, 0,
	677, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 674, 686,
	644, 163, 642, 685, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 683, 0, 0, 283, 0,
	0, 700, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 645, 0, 244, 227, 710, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 698, 223,
	709, 694, 695, 696, 699, 702, 703, 640, 643, 704,
	706, 708, 711, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 641, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 689, 213,
	214, 215, 216, 639, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	717, 697, 716, 718, 719, 715, 720, 721, 705, 660,
	0, 713, 712, 714, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 117, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 687, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 658, 0, 0, 0,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 701, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 651, 0, 0, 0, 601, 693,
	692, 667, 676, 0, 0, 151, 668, 0, 675, 669,
	673, 672, 670, 671, 0, 638, 0, 0, 0, 0,
	0, 0, 599, 655, 0, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 653, 596, 0,
	0, 0, 688, 0, 654, 0, 0, 690, 0, 677,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 674, 686, 644,
	163, 642, 685, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 683, 0, 0, 283, 0, 0,
	700, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 645, 0, 244, 227, 710, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 698, 223, 709,
	694, 695, 696, 699, 702, 703, 640, 643, 704, 706,
	708, 711, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 641, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 689, 213, 214,
	215, 216, 639, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 717,
	697, 716, 718, 719, 715, 720, 721, 705, 660, 0,
	713, 712, 714, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 117, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 687, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 225, 0, 0,
	0, 0, 0, 0, 0, 658, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 701, 707, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 651, 0, 0, 0, 601, 693, 692,
	667, 676, 0, 0, 151, 668, 0, 675, 669, 673,
	672, 670, 671, 0, 638, 0, 0, 0, 0, 0,
	0, 599, 655, 0, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 652, 653, 0, 0, 0,
	0, 688, 0, 654, 0, 0, 690, 0, 677, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 674, 686, 644, 163,
	642, 685, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 283, 0, 0, 700,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	645, 0, 244, 227, 710, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 698, 223, 709, 694,
	695, 696, 699, 702, 703, 640, 643, 704, 706, 708,
	711, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 641, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 689, 213, 214, 215,
	216, 639, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 717, 697,
	716, 718, 719, 715, 720, 721, 705, 660, 0, 713,
	712, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 117, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 687, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 225, 0, 0, 0,
	1258, 0, 0, 0, 658, 0, 0, 0, 169, 0,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 701, 707, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 651, 0, 0, 0, 601, 693, 692, 667,
	676, 0, 0, 151, 668, 0, 675, 669, 673, 672,
	670, 671, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 655, 0, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652, 653, 0, 0, 0, 0,
	688, 0, 654, 0, 0, 690, 0, 677, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 674, 686, 644, 163, 642,
	685, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 683, 0, 0, 283, 0, 0, 700, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 645,
	0, 244, 227, 710, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 1259, 1260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 698, 223, 709, 694, 695,
	696, 699, 702, 703, 640, 643, 704, 706, 708, 711,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 641, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 689, 213, 214, 215, 216,
	639, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 717, 697, 716,
	718, 719, 715, 720, 721, 705, 660, 0, 713, 712,
	714, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 117, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 687, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 658, 0, 0, 0, 169, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	701, 707, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 651, 0, 0, 0, 601, 693, 692, 667, 676,
	0, 0, 151, 668, 0, 675, 669, 673, 672, 670,
	671, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	655, 0, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 652, 653, 0, 0, 0, 0, 688,
	0, 654, 0, 0, 690, 0, 677, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 674, 686, 644, 163, 642, 685,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 683, 0, 0, 283, 0, 0, 700, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 645, 0,
	244, 227, 710, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 698, 223, 709, 694, 695, 696,
	699, 702, 703, 640, 643, 704, 706, 708, 711, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 641, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 689, 213, 214, 215, 216, 639,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 717, 697, 716, 718,
	719, 715, 720, 721, 705, 660, 0, 713, 712, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 117, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 687, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 658, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 701,
	707, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 601, 693, 692, 667, 676, 0,
	0, 151, 668, 0, 675, 669, 673, 672, 670, 671,
	0, 638, 0, 0, 0, 0, 0, 0, 599, 655,
	0, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 653, 0, 0, 0, 0, 688, 0,
	654, 0, 0, 690, 0, 677, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 674, 686, 644, 163, 642, 685, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	683, 0, 0, 283, 0, 0, 700, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 645, 0, 244,
	227, 710, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 698, 223, 709, 694, 695, 696, 699,
	702, 703, 640, 643, 704, 706, 708, 711, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 641, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 689, 213, 214, 215, 216, 639, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 717, 697, 716, 718, 719,
	715, 720, 721, 705, 660, 0, 713, 712, 714, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 603, 604, 605,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 117, 618, 619, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	635, 636, 637, 0, 0, 291, 292, 293, 277, 339,
	0, 338, 342, 334, 0, 0, 0, 0, 0, 0,
	0, 225, 0, 0, 0, 330, 0, 0, 0, 0,
	0, 0, 0, 169, 0, 349, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 0, 0, 353, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	0, 0, 298, 163, 289, 0, 281, 147, 0, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 331, 335, 0, 0, 0, 0, 0, 337,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 341, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 333, 260, 282, 238, 357,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 336,
	340, 343, 229, 344, 345, 0, 0, 346, 347, 348,
	0, 0, 350, 351, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	0, 0, 291, 292, 293, 277, 339, 0, 338, 342,
	334, 0, 0, 0, 0, 0, 0, 0, 225, 0,
	0, 0, 330, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 349, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 352, 0,
	0, 353, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 0, 0, 298,
	163, 289, 0, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 332, 331,
	335, 0, 0, 0, 0, 0, 337, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 341, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 333, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 336, 340, 343, 229,
	344, 345, 0, 0, 346, 347, 348, 0, 0, 350,
	351, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 0, 0, 291,
	292, 293, 277, 93, 0, 26, 83, 67, 0, 0,
	0, 0, 0, 0, 0, 225, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 0, 0, 298, 163, 289, 0,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 307,
	309, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 68, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 1569, 1572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1573, 283, 0, 0, 0, 1566, 0, 1565,
	258, 1567, 1570, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 1571, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 180, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 225, 0, 291, 292, 293, 277, 0,
	878, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 879, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 874, 875, 876, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 0, 237, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 225, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 0, 169, 415, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 423, 424, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 398, 281, 147, 397,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 414,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 417, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 425,
	420, 421, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 422, 177, 0, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 93, 0, 291, 292, 293, 277, 0, 0, 0,
	0, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 965, 0, 99, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 1293, 0, 1290, 0, 0,
	154, 1292, 1289, 1291, 1295, 1296, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1288, 1300, 1301, 1302, 1303, 1304, 1305, 1298, 1299,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 68, 237, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 225, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 423, 424, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 398, 281, 147, 397,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 425,
	420, 421, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 422, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 0, 0, 291, 292, 293, 277, 225, 0, 0,
	0, 558, 0, 0, 0, 0, 0, 0, 0, 169,
	559, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 0, 0,
	353, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 560, 0, 213, 214, 215,
	216, 180, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 0, 0, 291, 292,
	293, 277, 225, 0, 0, 0, 839, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 0, 353, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 0, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	838, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 225, 0, 291, 292, 293, 277, 0, 0, 0,
	0, 0, 0, 169, 580, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 578, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 0, 0, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	0, 0, 298, 163, 289, 0, 281, 147, 0, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	225, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 0, 169, 575, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 578, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	0, 0, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 0,
	0, 298, 163, 289, 0, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 225,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2186, 0, 99,
	693, 0, 0, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 0, 0,
	298, 163, 289, 0, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 225, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 578, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 0, 0, 298,
	163, 289, 0, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	578, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1761, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 180, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 225, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 0, 0, 169, 0,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 578,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 0, 0, 298, 163, 289,
	0, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 1543, 213, 214, 215, 216,
	180, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 225, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 0, 0, 169, 1234, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 578, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 0, 0, 298, 163, 289, 0,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 693, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 180, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 225, 0, 291, 292, 293, 277, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1909,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 0, 237, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 225, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 578, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 0, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 225, 0, 291, 292, 293, 277, 0, 0, 0,
	0, 0, 0, 169, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	0, 0, 298, 163, 289, 0, 281, 147, 0, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	225, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 0,
	0, 298, 163, 289, 0, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 225,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1628,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 0, 0,
	298, 163, 289, 0, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 225, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 0, 0, 298,
	163, 289, 0, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	1247, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 180, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 225, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 0, 0, 169, 0,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 352, 0, 0, 353,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 0, 0, 298, 163, 289,
	0, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	180, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 1176, 0, 291, 292, 293,
	277, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 0, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 225, 0, 291, 292, 293, 277, 0, 0, 0,
	0, 0, 0, 169, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	0, 0, 298, 163, 289, 0, 281, 147, 0, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 1163, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	225, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 578, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 0,
	0, 298, 163, 289, 0, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 820,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 225,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 0, 0,
	298, 163, 289, 0, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 381, 0, 0, 138, 0, 196, 0,
	237, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 225, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 96,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 0, 0, 298,
	163, 289, 0, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 279, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 180, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 225, 0, 291, 292,
	293, 277, 0, 1216, 0, 0, 0, 0, 169, 0,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 792, 793, 794, 1218,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 0, 0, 298, 163, 289,
	0, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	180, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 0, 0, 225,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 196, 0, 237, 174, 792,
	793, 794, 1218, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 0, 0,
	298, 163, 289, 0, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 792, 793, 794, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 0, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 1657, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 1874, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 1175, 1657, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2277, 0, 0, 0,
	1645, 0, 0, 0, 0, 0, 0, 1856, 0, 138,
	0, 196, 0, 237, 174, 0, 0, 1664, 1668, 1670,
	1672, 1674, 1675, 1677, 0, 1681, 1678, 1679, 1680, 0,
	0, 1659, 1660, 1661, 1662, 1643, 1644, 1665, 0, 1646,
	0, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1663, 0, 291, 292, 293, 277, 0, 0, 1667,
	1669, 1671, 1673, 1676, 0, 0, 0, 0, 0, 0,
	1645, 0, 0, 0, 1874, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1664, 1668, 1670,
	1672, 1674, 1675, 1677, 1658, 1681, 1678, 1679, 1680, 0,
	1175, 1659, 1660, 1661, 1662, 1643, 1644, 1665, 0, 1646,
	0, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1663, 0, 0, 1940, 1882, 0, 1874, 0, 1667,
	1669, 1671, 1673, 1676, 1856, 0, 0, 0, 1860, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1864,
	0, 0, 0, 1175, 0, 0, 0, 0, 0, 1885,
	0, 0, 0, 0, 1658, 1880, 0, 0, 0, 1853,
	1893, 1894, 0, 1855, 1857, 1859, 1881, 1861, 1862, 1863,
	1865, 1866, 1867, 1869, 1870, 1871, 1872, 1856, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1635, 1636, 0,
	1886, 0, 0, 1875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1852, 1860, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1864, 0, 0, 1868,
	0, 0, 0, 0, 0, 0, 1858, 0, 0, 0,
	0, 0, 0, 0, 0, 1892, 1853, 1565, 0, 1666,
	1855, 1857, 1859, 0, 1861, 1862, 1863, 1865, 1866, 1867,
	1869, 1870, 1871, 1872, 0, 0, 0, 0, 1860, 0,
	0, 0, 1888, 0, 0, 0, 0, 0, 0, 1864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1875, 0, 0, 0, 1887, 1889, 0, 0, 0, 1853,
	0, 0, 0, 1855, 1857, 1859, 0, 1861, 1862, 1863,
	1865, 1866, 1867, 1869, 1870, 1871, 1872, 0, 0, 1666,
	0, 0, 0, 0, 1873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1852, 0, 1875, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1895, 0, 1868, 0, 0, 0,
	0, 0, 0, 1858, 0, 0, 1883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1868,
	0, 0, 0, 0, 0, 0, 1858,
}

var yyPact = [...]int{
	795, -1000, -283, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 20929, -1000, -1000, 1493,
	-1000, 8606, 21368, 59, 21368, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 235, -1000, 21368,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8149, 7692, 151,
	-1000, 1870, -1000, -1000, -1000, -1000, 133, 259, 20490, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1688, -38, 259, 351, 363, 353, 353, 9923, 1870,
	237, 29, -1000, 676, 795, 184, 21368, -1000, 412, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1870, 1870, 21368, -63, 591, -1000, 193,
	202, 320, 411, -1000, -1000, -1000, -1000, 1872, -1000, 21368,
	1501, 21368, -1000, 1397, 1443, -1000, -1000, 1677, -1000, 116,
	8, -28, 146, -1000, -1000, 168, -1000, -1000, -1000, -1000,
	-1000, 54, -1000, 4, -1000, -4, -1000, -1000, -1000, -109,
	-1000, -1000, -1000, -1000, -1000, 1383, 361, 1702, -148, 1756,
	1803, 1476, 1840, 1813, 23, 199, 199, 227, 199, -1000,
	-1000, -1000, -1000, -1000, -1000, 299, -1000, -1000, -1000, -1000,
	1473, 21368, -1000, 1532, 474, 474, 645, 167, -1000, -1000,
	-94, -117, 474, 474, -117, 33, -1000, 1792, 1790, -1000,
	-1000, -1000, -1000, -1000, -1000, 204, 211, -1000, -172, -1000,
	339, -1000, 326, -1000, 11258, 164, 1474, 575, -1000, 611,
	21368, 21368, 21368, 611, 611, 12581, 12142, 409, -1000, 1803,
	1476, -1000, 1337, 1095, 1476, 204, 204, 204, 204, 204,
	21368, 5439, 5439, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 221, 1676, -1000, 21368, 1803, 1756, 1803, -1000, 408,
	846, 1029, -1000, -1000, 193, 1377, -1000, 605, -1000, -1000,
	-1000, -1000, 21368, 187, -1000, 1024, 1674, 121, 1766, 16093,
	18727, 21368, 16093, -1000, -1000, -1000, -1000, -1000, -110, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 121,
	16093, 16093, -72, -1000, -1000, -274, 1756, 5888, -1000, -1000,
	5888, -1000, -1000, 222, 199, -1000, 16093, 628, 18727, 959,
	21368, 211, -1000, 21368, 1473, 1782, 21368, 1847, 6786, 1847,
	21368, -1000, -1000, 474, 474, -1000, 645, 645, -1000, -1000,
	-119, 1847, 1847, -121, 21368, 199, -1000, -1000, 20051, 1776,
	16971, -1000, -139, 349, 329, 332, -1000, -1000, -155, -1000,
	-1000, 1425, 11703, 10813, 224, 16093, 3637, -1000, -1000, 611,
	611, 611, 3637, 3637, 391, -1000, -1000, -1000, -1000, -1000,
	-1000, 21368, 1756, -1000, -1000, -1000, -1000, -1000, 16093, 18727,
	21368, 21368, 22533, -1000, 1407, -1000, -1000, 9484, 407, 5888,
	898, 1673, -1000, -1000, 1670, 1669, 1668, 1665, 1664, 1663,
	1661, -1000, 1613, -1000, -1000, 1660, 1659, 1658, 1653, -1000,
	-1000, -1000, -1000, -1000, -1000, 1651, -1000, -1000, -1000, 1649,
	1613, -1000, -1000, 1648, 1626, 1625, 1624, 1622, -1000, -1000,
	-1000, -1000, -1000, -1000, 1027, 1025, 1062, -1000, -1000, -1000,
	-1000, 3188, 6786, 6786, 6786, 6786, -1000, -1000, 1567, 5888,
	1621, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7235, -1000, 1620,
	1618, 1617, 1616, 1614, 1613, 1608, 1002, 1607, 1605, 1599,
	6786, 1593, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1407, -1000, -272, -1000, 10374, 21368, 21368, -1000,
	1756, -1000, 1756, 2294, -1000, 1799, -1000, 193, 94, -1000,
	-1000, -1000, -1000, -1000, -1000, 405, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1472, -1000, 21368, 498, -1000,
	-1000, -1000, -1000, -1000, 4, -4, 1416, -1000, -41, 114,
	-1000, 1374, -1000, -1000, -1000, 498, 1416, 219, 387, 997,
	-1000, 1125, 395, 1461, -1000, 1054, 19612, 21368, 233, 1774,
	1425, 1494, -1000, -1000, -1000, 1742, 19173, -1000, 1591, 1372,
	-1000, -1000, 5888, -1000, -1000, 1847, 1847, 1847, 474, 22533,
	645, 21368, 645, -1000, -1000, 645, -1000, 394, 21368, 233,
	1590, -1000, 1785, 1367, -1000, -1000, -1000, -1000, 1779, 21807,
	237, -1000, -1000, 347, 325, 322, 18727, 214, -1000, -1000,
	1425, -1000, -1000, -1000, 1584, 578, -1000, -1000, 6786, -1000,
	897, -1000, 3637, 3637, 3637, -1000, -1000, 14776, -1000, -1000,
	1416, 1425, 1695, 1457, -1000, -1000, -1000, -1000, 1847, 5439,
	-1000, 16971, -1000, 5888, 5888, 5888, 5888, -1000, 18288, -1000,
	17849, -1000, 268, 6337, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5888, 1793, 1793, 1793, 5888, 680, 5888, 5888, -1000,
	771, 10157, 1793, 1793, 1793, 1793, 1793, -1000, 2731, 1793,
	1793, 1793, 1793, -1000, -1000, 6786, 6786, 6786, 6786, 6786,
	6786, 6786, 6786, 6786, 6786, 6786, 6786, 1561, 592, 6786,
	6786, 6786, 1095, 1630, 1456, -1000, -1000, -1000, -1000, -1000,
	618, 897, 5888, 719, 5888, 5888, 5888, -1000, 1310, 1308,
	-1000, -1000, 5888, -1000, 5888, 6786, 5888, -1000, 1793, 1847,
	1401, -1000, 1583, -1000, 1365, 1732, -1000, 389, 1426, -1000,
	569, 1361, -1000, -1000, -1000, -1000, 386, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -64, -1000, -1000, 21368, 1024, 1357, 1871,
	385, 384, 16093, -1000, 190, 16093, -1000, -1000, 21368, 213,
	16093, 21, -1000, 1578, -128, 5888, 5888, 21368, 5888, -1000,
	-1000, -1000, 1532, 615, 1568, -213, -1000, -36, -1000, 1692,
	91, -1000, 1742, -1000, 541, -1000, 21368, 1331, -1000, 382,
	795, -1000, 21368, 897, -1000, -1000, -1000, 1847, -1000, 474,
	-1000, 474, 645, 21368, -1000, -1000, -213, 1284, 21368, 16971,
	16971, 16971, 16971, -1000, 1721, 1720, -1000, 1718, 1714, 1726,
	21368, 16971, 21368, -1000, -1000, -1000, 22170, -1000, -1000, -1000,
	-1000, 1278, 1870, -1000, -1000, -1000, 318, 1425, 16093, 946,
	224, -1000, -1000, -1000, -1000, -1000, 21368, 21368, 1848, -1000,
	1418, 1846, -1000, 639, 639, 634, -1000, -1000, 378, -1000,
	-1000, 275, -1000, -1000, -1000, -1000, -1000, 1567, -1000, -1000,
	-1000, 1253, 1400, 897, 5888, -1000, -1000, 5888, 5888, 1026,
	5888, 1244, 1351, 1345, -1000, 1242, 1869, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5888, 5888, 5888, 5888,
	5888, 761, 4990, -1000, -1000, -1000, 5888, 5888, 5888, 5888,
	1156, 963, -1000, 641, 641, 390, 390, 390, 390, 390,
	755, 755, -1000, -1000, -1000, 3188, 1561, 6786, 6786, 6786,
	191, 927, 2613, -1000, 5888, 621, -1000, 5888, 661, -1000,
	1234, 1015, 1186, 1184, -1000, -1000, 1134, 1171, 1587, 1169,
	5888, 1848, -272, 4535, 228, 21368, -272, 21368, 21368, 4535,
	-1000, 21368, 2294, 843, -1000, -1000, -1000, 16093, 456, 485,
	-1000, 14337, 16093, -1000, -1000, 16093, 135, 1752, -1000, -1000,
	996, -99, -77, 897, 897, 376, -1000, 1772, 1773, 9045,
	-1000, -62, -1000, -1000, -1000, 241, -1000, 989, 988, 986,
	984, 21368, -1000, -1000, -1000, -1000, -1000, 519, 519, 519,
	184, 1274, 374, 16971, 21368, -1000, 16532, 1158, -1000, -1000,
	1847, 1847, 474, -1000, -2, -44, 1268, -1000, 539, 1683,
	1691, 1683, -1000, -1000, -1000, -1000, 1698, -1000, 1563, -1000,
	-1000, 1268, -1000, 1532, -1000, -1000, -1000, 1416, 1151, -1000,
	-1000, -1000, -1000, 1844, 1838, 17410, -1000, -1000, -1000, -1000,
	-1000, 5888, 1585, 1550, 1546, 22822, 1335, -1000, -1000, -1000,
	-1000, 5888, 1538, 1499, 1492, 1488, 1481, -1000, 5888, 5888,
	888, 1445, 1427, 1380, 1363, 1328, -1000, 191, 927, 1247,
	-1000, 6786, 6786, 1324, 593, -1000, 5888, 681, 703, 13459,
	-1000, 5888, -1000, -1000, -1000, 13459, -1000, 6786, -1000, 1316,
	1844, -1000, 1141, 1417, -1000, -272, -1000, -1000, 1401, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1416, -1000,
	-1000, -1000, -1000, 16093, 1771, 233, -1000, 6, 232, 1409,
	-276, -74, 1837, 1835, 21368, 237, 21368, 1132, 1408, -1000,
	-1000, -1000, 22892, 717, -1000, 21368, 652, 341, 199, 341,
	648, 1560, -1000, -1000, -62, -1000, 835, 834, 831, 829,
	-26, -1000, -1000, -1000, -1000, -1000, 1555, 13459, -1000, 13898,
	960, 21807, 16971, 16532, 1140, -1000, 370, -1000, -1000, -1000,
	-1000, 1847, -1000, -2, -1000, 291, 287, 36, 1834, 1842,
	21368, 5888, -1000, -1000, 5888, 1553, -1000, 5888, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5888, 5888, -1000, -1000, 897,
	-1000, -1000, -1000, 1127, -1000, 300, 300, -23, -1000, -1000,
	-1000, 1520, -1000, 1537, 1537, 1520, 1520, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1549, 1544, -1000, 1520,
	1534, 1534, 1520, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1542, 1542,
	1543, 1542, -1000, 1252, -1000, -1000, -1000, -1000, -1000, 1174,
	1165, 5888, -1000, -1000, -1000, -1000, -1000, -1000, 6786, -1000,
	-1000, -1000, -1000, 897, 5888, 1123, -1000, 1520, 1537, -1000,
	1520, 1534, 1520, 300, 300, 1107, 728, 1103, 2146, -1000,
	-1000, -1000, 4535, 1401, -1000, 16093, 16093, -218, 2, 21368,
	-285, -278, 949, -1000, 1833, 948, 860, -1000, 1532, 23061,
	9045, 23033, -1000, -1000, 21368, 21368, -1000, 21368, 21368, 199,
	5888, -1000, -1000, -1000, -1000, -1000, -1000, 15654, -1000, -1000,
	-1000, -1000, -1000, 1847, 1140, 370, -1000, -1000, 449, -1000,
	-1000, -1000, -1000, 826, -1000, -1000, -1000, 946, 1803, -1000,
	897, 897, 21368, 897, 897, 1400, -1000, -1000, -1000, -1000,
	-1000, -34, -1000, -1000, -1000, -1000, 821, -1000, 820, -1000,
	-1000, -1000, 941, 941, -1000, -1000, 813, -1000, -1000, -1000,
	811, -1000, -1000, 809, -1000, -1000, -1000, -1000, 1153, -1000,
	897, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5888, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -121,
	940, -280, 784, -1000, 935, -78, -1000, -1000, 1767, 183,
	23008, -1000, 519, 519, 383, 519, 519, 519, 519, 149,
	144, 519, 519, 519, 519, 519, 519, 519, 519, 519,
	519, 519, 519, 519, 519, 1531, -1000, -1000, 23033, -1000,
	-1000, 651, 6786, -1000, -1000, 925, 13898, 434, 355, 1530,
	-1000, 119, 647, 644, -1000, 21368, -1000, 1529, 1490, 63,
	1528, -1000, 1527, 1522, 21368, 1138, 1319, -1000, 1520, 5888,
	1842, -1000, 30, -1000, -1000, -1000, 1314, -1000, -1000, 1093,
	1091, 1265, -1000, 1263, 1085, 1256, 1239, -1000, 1075, -100,
	-81, 1392, -1000, 1510, -1000, -1000, 1832, 237, -1000, 1829,
	23061, -1000, 762, 756, 519, 519, 753, 920, 919, 911,
	519, 519, 748, 909, 22170, 726, 724, 712, 845, 904,
	424, 807, 749, 725, 21368, 1509, 872, -1000, -1000, 927,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 709, 1504, -1000, -1000, 1503, 15654, 86, 86, 15654,
	15654, 15654, 1498, 288, -1000, 15654, 1750, 944, 1803, -1000,
	-1000, -1000, -1000, -1000, 896, -1000, -1000, -1000, 708, -1000,
	692, -1000, 203, -90, -81, -1000, 1828, -92, 1826, 1825,
	877, 21368, 860, -1000, 120, -1000, -1000, -1000, 13459, 13459,
	-1000, -1000, -1000, -1000, 875, 874, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 157, 21368,
	1232, -1000, 523, 1055, 5888, -207, 15654, 1230, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1228, 1222, 1218, 15654, -1000,
	-1000, -1000, 115, 124, -1000, -1000, 1750, -1000, -1000, 1053,
	1046, 1496, 678, -74, 1823, -1000, 860, 1822, 860, 860,
	-289, 1216, -1000, -1000, 71, 196, 182, -1000, 248, -1000,
	-1000, -1000, -1000, -1000, -1000, 158, 1202, -1000, 872, 868,
	-1000, 754, 1687, -1000, 3, 1195, -1000, -1000, -1000, -1000,
	1192, -1000, -1000, 519, 865, 52, -1000, -1000, -1000, -1000,
	-1000, 1787, 13020, -103, -1000, 864, -1000, 860, -1000, -1000,
	1391, -1000, 21368, 69, 671, 6786, 1495, 6786, 1485, 88,
	1484, -1000, -1000, -1000, -1000, -1000, 288, -1000, -1000, 1686,
	1681, 1868, -1000, -1000, -1000, -1000, 124, 124, 124, 124,
	0, 670, -1000, 959, -1000, 21368, -1000, 1183, -1000, -1000,
	-1000, 368, -1000, -1000, -1000, -286, -1000, 1479, 1808, -1000,
	2053, 21368, 1761, 21368, 1477, 514, 6786, -1000, -1000, 1887,
	-1000, 1882, 422, 422, -1000, -1000, -1000, 1370, -1000, 513,
	-1000, 15215, 21368, 854, -1000, 179, 74, -1000, 1167, -1000,
	1136, 21368, 665, 1384, -1000, -1000, -1000, 742, 118, -1000,
	21368, 4086, -1000, 367, 1359, 1122, -1000, 727, 65, -1000,
	-1000, 1083, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 897,
	21368, 760, -1000, 179, 1731, -1000, 664, -1000, -1000, 1126,
	-1000, 22881, 175, -1000, 722, -1000, 22881, 68, -1000, 172,
	1030, -1000, -1000, 1043, -1000, 711, 1381, -291, -287, -1000,
	68, 23061, 5888, 903, 685, -1000, 23061, 1036, -1000, -293,
	-1000, -1000,
}

var yyPgo = [...]int{
	0, 122, 2265, 172, 127, 125, 170, 2264, 1802, 1794,
	2263, 2262, 2246, 2245, 2244, 2241, 2240, 2239, 2238, 2237,
	2233, 2230, 2229, 2228, 169, 2226, 2225, 2224, 2221, 2220,
	2219, 2218, 2217, 2216, 2211, 2210, 2209, 123, 2208, 1790,
	2207, 2206, 2205, 2201, 2200, 157, 2198, 2196, 2195, 2194,
	2193, 2191, 2187, 2186, 2184, 2183, 2181, 2179, 2178, 161,
	2177, 46, 104, 193, 44, 188, 189, 142, 81, 130,
	164, 115, 2176, 2175, 111, 26, 134, 2174, 48, 41,
	34, 187, 103, 55, 67, 101, 2173, 2172, 95, 2171,
	2170, 2169, 2154, 63, 2152, 85, 39, 98, 30, 2147,
	2146, 2145, 90, 2144, 2142, 2140, 2139, 92, 2138, 70,
	53, 2137, 2136, 2135, 2134, 2133, 36, 2132, 51, 2131,
	2128, 2127, 2124, 2123, 2121, 2118, 13, 17, 19, 2116,
	2115, 16, 2, 2114, 162, 83, 88, 108, 2112, 358,
	2111, 2109, 2108, 116, 2107, 150, 2106, 2105, 2103, 2101,
	10, 2100, 52, 2098, 2097, 2096, 61, 2095, 2093, 2091,
	107, 43, 56, 94, 2089, 2088, 78, 152, 15, 96,
	0, 2085, 149, 40, 2084, 2080, 2076, 192, 153, 148,
	2072, 100, 232, 118, 57, 2071, 54, 79, 2070, 2069,
	2068, 110, 73, 24, 2064, 112, 2063, 29, 93, 2062,
	109, 2061, 133, 9, 105, 2059, 159, 2058, 2057, 2054,
	129, 2048, 2047, 65, 132, 2041, 2040, 2039, 25, 2038,
	38, 21, 2037, 146, 168, 2036, 2035, 2032, 140, 99,
	91, 2031, 2028, 80, 2027, 117, 84, 71, 114, 695,
	113, 64, 18, 2025, 160, 2024, 216, 163, 145, 2021,
	2020, 171, 1138, 167, 2019, 156, 11, 2018, 2014, 8,
	2013, 23, 2011, 2010, 2009, 2006, 5, 2005, 2004, 2003,
	1, 3, 2000, 4, 121, 42, 72, 1999, 75, 77,
	1997, 1994, 1993, 1988, 1986, 215, 1985, 1981, 1980, 1979,
	1978, 1977, 1976, 87, 1974, 1973, 1972, 1971, 68, 1970,
	1969, 1968, 1967, 1966, 31, 1964, 1962, 20, 1961, 28,
	1960, 1958, 1953, 12, 144, 1950, 1949, 14, 1948, 1947,
	6, 7, 1946, 1945, 62, 49, 37, 86, 82, 1944,
	22, 1942, 102, 1941, 1940, 137, 1937, 106, 1936, 119,
	166, 241, 1934, 158, 1917, 1911, 1908, 1906, 1904, 1903,
	1902, 712, 1901, 1900, 165, 60, 1899, 1898, 1882, 147,
	1880,
}

//line mysql_sql.y:6793
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.Loadparameter {
	v, _ := st.union.(*tree.Loadparameter)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 356, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 53, 60, 60, 60, 171, 171,
	323, 323, 322, 322, 321, 321, 320, 320, 320, 319,
	319, 319, 318, 318, 317, 317, 316, 316, 314, 314,
	315, 313, 312, 312, 310, 310, 308, 308, 309, 309,
	303, 303, 306, 306, 304, 304, 304, 304, 307, 302,
	302, 302, 301, 301, 52, 52, 52, 241, 241, 51,
	51, 255, 255, 255, 255, 255, 253, 253, 253, 253,
	252, 252, 251, 251, 256, 256, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
	254, 254, 254, 254, 254, 254, 254, 254, 254, 46,
	46, 46, 46, 49, 50, 249, 249, 249, 249, 249,
	250, 250, 250, 47, 48, 48, 240, 240, 245, 245,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 248, 248, 248, 247, 247, 246, 246, 40,
	40, 40, 43, 42, 239, 239, 239, 239, 239, 239,
	239, 239, 41, 41, 41, 41, 41, 41, 38, 38,
	37, 37, 39, 39, 238, 238, 237, 56, 56, 56,
	56, 56, 56, 56, 55, 55, 58, 58, 57, 45,
	45, 45, 45, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 346, 346, 346, 348, 348, 175, 176, 357,
	174, 174, 174, 342, 342, 343, 344, 345, 345, 345,
	54, 7, 36, 36, 285, 285, 188, 188, 189, 189,
	187, 187, 187, 187, 187, 187, 288, 289, 184, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	28, 28, 35, 358, 358, 358, 33, 34, 284, 284,
	284, 32, 31, 30, 29, 29, 27, 27, 26, 26,
	181, 181, 183, 183, 179, 359, 359, 261, 261, 182,
	182, 25, 25, 180, 180, 157, 178, 178, 178, 6,
	10, 10, 10, 10, 10, 10, 16, 15, 13, 12,
	11, 14, 5, 5, 5, 5, 8, 8, 9, 69,
	69, 97, 97, 355, 355, 351, 351, 352, 352, 352,
	353, 353, 354, 354, 4, 292, 292, 292, 292, 292,
	292, 331, 331, 331, 332, 87, 87, 82, 82, 293,
	293, 204, 333, 333, 300, 300, 299, 299, 298, 298,
	85, 85, 86, 86, 73, 73, 59, 59, 305, 305,
	305, 305, 311, 311, 282, 282, 123, 123, 153, 153,
	154, 154, 61, 61, 62, 62, 62, 62, 62, 62,
	339, 339, 341, 341, 340, 84, 84, 80, 80, 81,
	81, 81, 79, 79, 78, 77, 77, 76, 75, 75,
	75, 64, 64, 63, 63, 63, 63, 63, 139, 139,
	139, 65, 65, 347, 347, 347, 286, 286, 286, 291,
	291, 136, 136, 137, 137, 135, 135, 66, 66, 67,
	67, 67, 67, 134, 134, 133, 68, 68, 74, 70,
	70, 72, 72, 72, 72, 144, 144, 143, 143, 143,
	143, 90, 90, 142, 141, 141, 141, 89, 89, 88,
	88, 83, 83, 71, 71, 140, 360, 360, 138, 166,
	166, 166, 173, 173, 165, 165, 165, 165, 165, 177,
	172, 172, 167, 167, 168, 168, 168, 3, 3, 3,
	19, 19, 19, 19, 23, 23, 349, 349, 17, 235,
	235, 234, 234, 236, 236, 236, 236, 230, 230, 231,
	231, 231, 231, 232, 232, 232, 233, 233, 233, 233,
	229, 229, 228, 226, 226, 226, 227, 227, 227, 227,
	227, 227, 169, 169, 18, 223, 223, 224, 224, 224,
	225, 225, 217, 217, 217, 217, 22, 221, 221, 222,
	222, 222, 222, 222, 218, 218, 220, 220, 216, 216,
	216, 216, 216, 21, 215, 215, 213, 213, 211, 211,
	212, 212, 210, 210, 210, 214, 214, 20, 287, 287,
	257, 257, 260, 260, 267, 267, 268, 268, 266, 266,
	273, 273, 272, 272, 271, 271, 270, 270, 269, 269,
	264, 264, 263, 263, 258, 258, 258, 258, 258, 259,
	259, 262, 262, 265, 265, 114, 114, 115, 115, 115,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 329,
	329, 330, 117, 117, 117, 121, 121, 121, 121, 121,
	121, 116, 116, 118, 118, 98, 98, 96, 96, 91,
	91, 92, 92, 93, 93, 94, 94, 95, 95, 95,
	95, 95, 95, 243, 243, 327, 327, 328, 328, 324,
	324, 324, 326, 326, 326, 326, 326, 325, 325, 99,
	151, 151, 151, 170, 170, 170, 150, 150, 150, 113,
	113, 112, 112, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 242, 242, 185, 185,
	186, 186, 131, 129, 129, 130, 130, 130, 130, 127,
	128, 126, 126, 126, 126, 126, 125, 125, 124, 124,
	124, 219, 219, 122, 122, 120, 120, 120, 119, 119,
	119, 274, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 196, 196, 201, 201, 338,
	338, 337, 100, 100, 100, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 109, 109, 109, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 297, 297, 297, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 350, 350, 350,
	334, 334, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 148, 148, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 205, 205, 206, 206,
	294, 294, 294, 294, 294, 294, 295, 295, 296, 296,
	296, 296, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	194, 145, 145, 145, 207, 202, 202, 203, 203, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 199,
	199, 199, 199, 199, 191, 191, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 198, 198, 200, 200, 209,
	209, 209, 208, 208, 208, 208, 208, 208, 208, 111,
	111, 111, 111, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 102, 102, 102, 102, 106, 106, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 107, 107, 107, 107, 105, 105, 105,
	105, 105, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 104, 152, 152,
	275, 275, 278, 278, 276, 276, 277, 279, 279, 279,
	280, 280, 280, 281, 281, 281, 283, 283, 156, 156,
	156, 162, 162, 155, 155, 163, 163, 164, 164, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 161, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 14, 0, 1, 19, 0, 4,
	0, 2, 1, 3, 3, 3, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 0, 3, 0, 3, 0, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 9, 4, 7, 0, 3, 7,
	4, 1, 3, 3, 3, 1, 0, 1, 1, 1,
	1, 3, 1, 4, 1, 3, 1, 2, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 6, 3, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 0, 4, 2, 4, 1, 5,
	3, 2, 1, 2, 2, 4, 4, 5, 2, 1,
	1, 2, 9, 7, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 2, 4, 3, 1,
	1, 1, 1, 2, 3, 4, 7, 2, 3, 3,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 1, 7, 9, 0, 2, 0, 1, 1, 2,
	2, 2, 1, 4, 2, 2, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 5, 1, 1, 1, 5, 5, 0, 1,
	1, 2, 2, 3, 6, 7, 4, 4, 7, 8,
	0, 2, 0, 2, 2, 1, 1, 1, 1, 0,
	1, 4, 5, 1, 3, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 6, 4,
	4, 3, 1, 1, 2, 2, 11, 8, 9, 1,
	3, 2, 4, 0, 2, 0, 1, 1, 1, 1,
	0, 1, 0, 1, 4, 2, 1, 5, 4, 4,
	2, 0, 1, 3, 3, 1, 3, 1, 3, 1,
	3, 4, 0, 1, 0, 1, 1, 3, 1, 1,
	0, 4, 1, 3, 2, 1, 0, 8, 0, 4,
	7, 4, 0, 2, 0, 2, 0, 2, 0, 4,
	1, 3, 1, 1, 4, 3, 4, 5, 4, 5,
	2, 3, 1, 3, 6, 0, 3, 0, 1, 2,
	4, 4, 0, 1, 3, 1, 3, 2, 0, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	2, 7, 7, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 2, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 3, 1, 1,
	1, 4, 4, 4, 3, 2, 2, 2, 3, 2,
	3, 0, 2, 1, 1, 2, 2, 0, 1, 2,
	4, 1, 3, 1, 4, 3, 0, 1, 2, 0,
	1, 2, 1, 1, 0, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 8, 11, 0, 1, 6, 0,
	2, 1, 2, 2, 2, 2, 2, 0, 1, 2,
	2, 2, 2, 1, 3, 2, 2, 2, 2, 2,
	1, 3, 2, 1, 3, 2, 0, 3, 3, 5,
	5, 4, 1, 1, 4, 1, 3, 1, 3, 2,
	1, 1, 0, 1, 1, 1, 11, 0, 2, 3,
	2, 3, 1, 1, 1, 3, 3, 4, 0, 2,
	2, 2, 2, 5, 1, 1, 0, 3, 0, 1,
	1, 2, 4, 4, 4, 0, 1, 10, 0, 1,
	0, 6, 0, 4, 0, 3, 1, 3, 4, 5,
	0, 3, 1, 3, 2, 3, 1, 2, 0, 6,
	0, 2, 0, 2, 4, 5, 4, 5, 1, 6,
	5, 0, 3, 0, 1, 0, 1, 1, 3, 2,
	3, 3, 4, 4, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 5, 4, 1,
	3, 3, 0, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 0,
	1, 1, 3, 1, 1, 2, 1, 7, 7, 7,
	7, 8, 5, 0, 1, 0, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 1, 0, 1, 3,
	1, 3, 5, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 2, 1, 2, 2, 1, 1, 2, 2,
	2, 2, 2, 1, 5, 6, 1, 2, 0, 1,
	1, 2, 5, 0, 1, 1, 1, 2, 2, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 2, 2,
	2, 0, 3, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 3, 5,
	2, 2, 2, 2, 1, 1, 2, 5, 6, 6,
	6, 1, 1, 1, 1, 0, 2, 0, 1, 1,
	2, 4, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 1, 5, 4, 4,
	5, 5, 5, 5, 4, 5, 5, 5, 5, 5,
	5, 5, 1, 1, 1, 4, 4, 6, 8, 6,
	4, 5, 5, 4, 6, 6, 7, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 2, 3, 2, 4, 6, 2,
	2, 4, 6, 4, 2, 2, 0, 1, 2, 3,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 3, 0, 1, 1, 3, 3,
	3, 3, 3, 2, 3, 4, 3, 4, 1, 3,
	4, 3, 4, 1, 1, 1, 3, 4, 4, 5,
	3, 4, 5, 6, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 1, 1, 3,
	0, 1, 0, 3, 0, 3, 3, 0, 3, 5,
	0, 3, 5, 0, 1, 1, 0, 1, 1, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -356, -2, -1, -3, -4, -5, -6, -44, -55,
	-57, -58, -24, -7, -54, -37, -38, -40, -46, -51,
	-52, -53, -61, -19, -18, -17, 9, -8, -9, -339,
	-10, -174, -175, -176, -357, -25, -26, -27, -29, -30,
	-31, -32, -33, -34, -35, -28, -36, 193, -39, 50,
	-41, -42, -43, -47, -48, -49, -50, 303, 309, 346,
	-62, -64, -20, -21, -22, -23, 189, 11, 419, -11,
	-14, -12, -13, -15, -16, 211, 210, 29, 270, 271,
	307, 209, 190, 10, 122, 123, 125, 126, 22, -63,
	55, 191, -65, 7, 464, -73, 30, -96, -170, 59,
	-158, -161, 422, 423, 424, 425, 426, 427, 428, 429,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 416, 228,
	252, 255, 262, 122, 141, 135, 163, 155, 130, 232,
	233, 66, 125, 375, 76, 360, 345, 128, 247, 249,
	251, 254, 234, 151, 146, 246, 230, 144, 235, 31,
	236, 168, 237, 238, 421, 356, 285, 379, 362, 259,
	343, 145, 357, 250, 359, 169, 173, 367, 309, 139,
	140, 364, 369, 167, 208, 34, 418, 220, 370, 171,
	166, 162, 378, 263, 261, 165, 138, 161, 231, 39,
	175, 174, 176, 339, 340, 341, 342, 239, 240, 297,
	366, 158, 147, 289, 131, 19, 373, 215, 361, 310,
	241, 256, 264, 170, 172, 222, 227, 420, 226, 260,
	371, 143, 219, 248, 214, 374, 132, 303, 312, 242,
	126, 253, 368, 377, 38, 325, 137, 129, 205, 123,
	224, 229, 243, 244, 245, 266, 265, 257, 159, 221,
	164, 136, 160, 124, 223, 376, 326, 463, 287, 328,
	157, 154, 225, 198, 372, 363, 127, 332, 327, 152,
	267, 460, 461, 462, 298, 284, 268, 269, 150, 212,
	-39, -9, -8, -63, -64, -178, 20, 343, -45, 344,
	193, 55, -170, -5, -4, -37, -61, -177, -170, 270,
	-177, 196, -170, -252, -223, -251, -224, -254, -225, -169,
	23, 190, 189, 223, 11, 191, 307, 197, 9, 7,
	308, 209, 10, 309, 311, 312, 315, 316, 317, 33,
	320, 321, 59, 62, -170, -252, -223, 227, 234, -78,
	-79, -139, 16, 6, -287, 328, 226, -217, -215, 318,
	206, 205, 77, 381, 195, -351, -352, 186, 187, 188,
	-341, 413, -340, -170, 414, -156, -358, -284, 363, 362,
	-182, 361, 354, 365, 356, 189, 76, 156, 153, 197,
	364, 34, 367, 368, 357, 328, -351, 127, 124, -239,
	82, 132, 131, -239, 226, 32, -245, 338, -244, -246,
	367, 368, 378, 60, 61, 366, -156, -170, 76, -79,
	-139, -78, -62, -64, -339, 328, 226, 197, 196, 381,
	270, -286, -347, 23, -291, 183, 184, 185, 24, 25,
	-1, -85, 218, -96, 121, -79, -78, -79, -150, -170,
	345, 91, -45, -45, 344, -342, -343, -344, -346, 193,
	344, 343, 121, 12, -177, 53, -96, 52, 56, 12,
	56, 55, 467, 60, 305, 319, 328, 306, 318, 198,
	226, 319, 226, 354, 198, 310, 313, 314, 355, 52,
	199, 52, -301, 378, -59, 30, -81, 18, -65, -64,
	17, 23, 24, -349, 196, 413, -213, 201, -213, 197,
	-213, -353, 134, 56, -341, -84, 55, -181, 99, -181,
	-359, 12, 101, 225, 224, 358, 355, -261, 359, 360,
	-182, -181, -181, -182, 196, 381, 22, 22, -285, 201,
	-354, 200, 371, 419, 130, 131, 132, -249, 23, 32,
	337, -223, 226, 56, 91, 20, -247, 91, 102, -246,
	-246, -246, -247, -247, -116, 32, -169, 118, 62, -116,
	32, 121, -80, -81, -65, -64, 57, 57, -285, -285,
	-285, -285, -285, -177, -66, -67, 109, -197, -170, 83,
	-199, 59, -192, 422, 423, 424, 425, 426, 427, 428,
	429, 430, 431, 432, 433, 434, 435, 436, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 76, 343,
	297, 328, 152, 298, 150, 212, -193, -195, -320, -314,
	-190, 55, 107, 108, 115, 84, -194, -274, 27, 86,
	389, -146, -147, -148, -149, -315, -313, 62, 67, 70,
	73, 74, 72, 71, 148, 69, 63, 120, -64, -334,
	-159, -290, -296, 195, -294, 153, 149, 9, 113, 338,
	118, -297, 61, 60, 291, 292, 293, 381, 288, 294,
	201, 44, 295, 296, 299, 388, 300, 45, 301, 290,
	216, 302, 392, 391, 393, 385, 382, 380, 383, 384,
	386, 387, -66, -292, 35, -61, 55, 22, 55, -170,
	-80, -59, -81, 121, 67, 62, -45, 57, 56, -345,
	73, 74, -348, 167, 159, -170, -56, 62, -3, -4,
	-5, -6, -24, -37, -61, -316, -314, 55, -253, 196,
	304, 222, -251, 223, 309, 312, -229, -228, -226, -169,
	-224, -256, -150, -169, 355, -253, -229, -228, 347, 459,
	-59, -197, -170, -77, -76, -197, 198, -213, -229, 83,
	-223, -168, 59, 60, 61, -170, -354, -340, 26, -83,
	-170, -135, 13, -195, -135, -96, -181, -181, -183, -359,
	-179, -359, 355, -135, -135, -261, -180, -170, -213, -229,
	328, 27, -70, -68, -71, -72, -74, -138, -140, -96,
	55, 372, 373, 128, 131, 130, 379, -250, 337, 23,
	-223, -244, -240, 62, 338, -228, -248, 52, 118, -298,
	-197, 32, -247, -247, -247, -248, -248, 117, -170, -59,
	-229, -223, -170, -98, -96, -172, -168, -161, -134, 56,
	-133, 12, -165, 82, 79, 80, 81, -170, 26, 62,
	121, -197, 98, -208, 91, 92, 93, 94, 95, 96,
	97, 55, 55, 55, 55, 55, 55, 55, 55, -206,
	55, 55, 55, 55, 55, 55, 55, -206, 55, 55,
	55, 55, 55, 62, 62, 104, 103, 114, 107, 108,
	109, 110, 111, 112, 113, 105, 106, 101, 83, 99,
	100, 85, -64, -197, -203, -195, -195, -195, -195, -274,
	-201, -197, 55, -197, 55, 55, 55, -295, 55, 55,
	-205, -206, 55, 62, 55, 55, 55, -195, 55, -134,
	-293, -204, -333, 458, -87, 57, -82, -170, -331, -332,
	-82, -86, -170, -59, -59, -163, -164, -155, -160, -167,
	-168, -161, 286, 194, 23, 82, 26, 28, 291, 323,
	85, 118, 17, 86, 153, 117, 293, 389, 292, 189,
	48, 391, 393, 392, 382, 380, 330, 334, 336, 333,
	381, 354, 32, 11, 29, 210, 24, 25, 111, 191,
	89, 90, 213, 27, 211, 74, 20, 51, 12, 14,
	15, 294, 329, 201, 200, 101, 347, 197, 46, 9,
	120, 30, 98, 331, 42, 78, 44, 99, 18, 383,
	384, 33, 346, 415, 217, 113, 295, 296, 49, 83,
	337, 72, 52, 79, 16, 47, 100, 192, 388, 45,
	335, 299, 301, 413, 300, 195, 365, 7, 290, 390,
	22, 209, 43, 196, 355, 88, 199, 73, 216, 149,
	6, 77, 10, 50, 53, 385, 386, 387, 35, 87,
	13, 302, 419, 338, 348, 349, 350, 351, 352, 353,
	177, 178, 179, 180, 181, 182, 258, 204, 202, 206,
	207, 458, 459, 183, 184, 281, 283, 156, 186, 187,
	188, 218, 134, 20, -45, -343, 121, 56, -83, -255,
	109, 59, 56, -227, 329, 467, 60, 57, 56, -255,
	199, -60, 62, 182, 62, 56, 19, 121, 56, -75,
	28, 29, -96, 201, -96, -230, -231, 335, 27, -216,
	53, -211, -212, -210, -214, 32, 12, -69, -97, -170,
	55, 57, 56, -197, -135, -135, -135, -181, -172, -183,
	-178, -183, -179, 121, -157, -170, -230, 55, 22, -141,
	-142, -143, -144, 42, 46, 48, 43, 44, 45, 49,
	22, 56, -360, 26, -166, -173, 26, -167, 62, -168,
	-161, -62, -64, 129, 132, 132, 131, -223, 199, 55,
	91, -248, -248, -248, 32, -169, 52, 56, -135, -67,
	-68, -70, -197, -197, -197, -197, -170, 62, -170, 109,
	-191, 83, 284, 72, 73, 74, -192, -209, 23, 268,
	269, -202, -203, -197, -145, 24, 23, -145, -145, -197,
	-145, 109, -203, -203, 57, 67, -335, -336, 394, 395,
	396, 397, 398, 399, 400, 401, 402, 403, 404, 295,
	290, 296, 294, 288, 302, 297, 298, 152, 411, 412,
	405, 406, 407, 408, 409, 410, -145, -145, -145, -145,
	-145, -197, -350, 282, 281, 283, -145, -145, -145, -145,
	-193, -193, -193, -193, -193, -193, -193, -193, -193, -193,
	-193, -193, -200, -207, -274, 55, 101, 99, 100, 85,
	-195, -193, -193, 57, 56, -338, -337, 87, -197, -335,
	-202, -197, -202, -202, 57, 57, -203, -202, -193, -202,
	-145, -135, 56, 55, 57, 56, 35, 121, 56, 91,
	57, 56, 121, 345, -170, -314, 57, 12, 121, 121,
	-228, 17, 419, -169, -150, 199, -229, -302, 200, 388,
	55, -305, 359, -197, -197, -170, -76, -84, 83, 55,
	-235, 419, 337, 336, 332, -232, -233, 331, 333, 330,
	334, 52, 276, 277, 278, 279, -210, -156, 117, 237,
	-96, -69, -170, 12, 56, -355, 121, -1, -170, -135,
	-181, -181, -183, -170, -235, 57, -238, -237, -150, -71,
	-71, -71, -71, 42, 42, 42, 47, 42, 47, 42,
	-143, -238, -74, -170, -173, 57, 132, -229, -184, 62,
	-240, -96, -96, -137, 14, 121, -191, 284, 72, -274,
	57, 56, -197, -197, -197, 26, -203, 57, 57, 57,
	57, 12, -197, -197, -197, -197, -197, 57, 12, 12,
	-197, -197, -197, -197, -197, -203, -200, -195, -193, -193,
	-198, 213, 82, -197, -196, -337, 89, -197, 56, 53,
	57, 12, 57, 57, 57, 53, 57, 56, 57, -197,
	-137, -204, -300, -299, -298, 35, -61, -82, -293, -170,
	-332, -298, -170, -163, -160, -168, -161, 67, -229, 109,
	109, 59, -169, 338, -169, -229, -241, 419, 30, 62,
	-311, 353, 348, 350, 121, 26, 27, -91, -92, -93,
	-99, -94, -150, -186, -95, 204, 202, 206, -328, 77,
	207, 258, 78, 197, -234, -236, 339, 340, 341, 342,
	82, -233, 62, 62, 62, 62, -96, -162, 91, -162,
	-162, -85, 53, 121, -68, -97, -170, 109, 57, -135,
	-135, -181, -188, -189, -187, 286, -288, 338, 329, -135,
	56, 91, -89, -88, 52, 53, -90, 52, -88, 42,
	42, -135, -84, 57, -136, 15, 17, -170, 109, -197,
	57, 57, 57, -100, -102, 325, 326, -106, -103, -105,
	-104, -108, -107, 153, 154, 118, 157, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 22, 212, 149,
	150, 151, 152, 169, 135, 155, 417, 177, 136, 178,
	137, 179, 138, 180, 139, 140, 181, 141, 144, 145,
	146, 143, 57, -197, 57, 57, 57, 57, 57, -197,
	-197, 12, 57, 57, 57, 57, 57, -198, 82, -195,
	-192, 57, 90, -197, 88, -101, -107, 118, 153, 212,
	152, 151, 149, 325, 326, -116, -197, -116, -193, 57,
	-136, 57, 56, -293, -169, 17, 26, -230, 309, 196,
	56, -282, 460, -309, 348, 17, 17, -61, -96, 57,
	56, -102, -95, -170, 78, -327, -328, -213, -327, 78,
	55, -236, 67, 67, 67, 67, -233, 55, -116, -118,
	-169, 118, 62, -166, -68, -170, -135, -355, 121, -135,
	-187, 287, 33, 120, 289, 32, 285, 17, -79, -237,
	-197, -197, 55, -197, -197, -203, 57, -109, 140, 139,
	-109, -281, 326, 325, -275, -277, 55, -276, 55, -276,
	-275, -275, 55, 55, -275, -278, 55, -278, -275, -279,
	55, -279, -280, 55, -279, 57, 57, 57, -197, -192,
	-197, 57, -275, -276, -275, -278, -275, -109, -109, 57,
	57, 20, 57, 57, -298, -169, -169, -241, 310, -96,
	465, -123, 461, 62, 17, 62, -307, 62, -84, -114,
	-115, -132, 323, 228, -214, 232, 66, 233, 345, 234,
	197, 236, 237, 238, 208, 239, 240, 241, 338, 242,
	243, 244, 245, 306, 6, 272, -93, -113, -112, -110,
	72, 83, 32, 323, -111, 66, 117, 251, 229, 252,
	-131, -185, 202, 77, 78, 311, -186, -324, -325, -170,
	-325, -170, -324, -324, -213, -197, -218, -220, -150, 55,
	-135, -135, 67, -289, -184, -80, -83, -283, 327, 67,
	67, -152, 62, -152, 67, 67, 67, 57, -197, -303,
	-261, 62, -153, 462, 67, 62, 350, 26, -257, 218,
	56, -132, -162, -162, -156, 117, -162, -162, -162, -162,
	235, 235, -162, -162, -162, -162, -162, -162, -162, -162,
	-162, -162, -162, -162, -162, -162, 55, -110, 72, -193,
	62, -118, -119, 32, 250, 246, -120, 32, 230, 231,
	-122, 55, 258, 78, 78, -96, 55, 53, 267, 55,
	55, 55, -325, 57, 57, 56, -275, -197, -79, 288,
	57, 57, 57, 57, 56, 57, 57, 57, 56, 57,
	56, 57, -310, 353, -306, -304, 348, 349, 350, 351,
	56, 55, 17, -61, 17, -132, 67, 67, -162, -162,
	67, 62, 62, 62, -162, -162, 67, 62, -173, 67,
	67, 67, 67, 32, 62, -121, 32, 246, 250, 247,
	248, 249, 67, 32, 67, 32, 67, 32, -170, 55,
	-329, -330, 62, 67, 55, -219, 55, -218, -326, 276,
	277, 278, 280, 279, -326, -218, -218, -218, 55, -243,
	-242, 259, 83, -221, -220, -75, 57, -80, 62, 67,
	67, -312, 200, -308, 352, -304, 17, 350, 17, 17,
	62, -154, -170, -307, -258, 260, 261, -259, -265, 263,
	-116, -116, 62, 62, -117, 229, -98, 57, 56, 91,
	57, -197, -125, -124, 415, -218, 57, 57, 57, 57,
	-218, 259, -222, 208, 66, 419, 274, 275, -75, 57,
	57, -319, 55, 67, -309, 17, -307, 17, -307, -307,
	466, 57, 56, -263, 264, 55, -261, 55, -261, 78,
	277, 230, 231, 57, -330, 62, 57, -129, -130, -127,
	-128, 52, 357, 256, 257, 57, -221, -221, -221, -221,
	57, -162, 62, 273, -323, 22, 57, -318, -317, -151,
	-313, -170, 353, 62, -307, 56, -170, -260, 265, 67,
	-193, 55, -193, 55, -262, 262, 55, -242, -128, 52,
	-127, 52, 11, 10, -131, 67, -168, -322, -321, -320,
	57, 56, 121, 465, -267, 55, 17, 57, -256, 57,
	-256, 55, 91, -193, -126, 253, 254, 22, 131, -126,
	56, 91, -317, -170, 62, -268, -266, 218, -259, 57,
	57, -256, 67, 57, 72, 32, 255, -321, 32, -197,
	121, 56, 57, 56, 59, -264, 266, 57, -170, 62,
	-266, -269, 35, 67, 56, -273, -270, 55, -132, 220,
	62, -273, -132, -272, -271, 265, 221, -171, 56, 57,
	56, 59, 55, 466, 465, -271, -270, -203, 57, 62,
	57, 466,
}

var yyDef = [...]int{
	23, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 507, 508, 509, 0, 322, 323, 0,
	309, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 241, 0, 190, 189,
	169, 170, 171, 129, 130, 131, 132, 0, 0, 0,
	392, -2, 510, 511, 512, 513, -2, 335, 0, 310,
	311, 312, 313, 314, 315, 230, 231, 232, 227, 228,
	229, -2, 0, 335, 182, 0, 174, 174, 0, 412,
	0, 0, 423, 436, 23, 370, 0, 375, 687, 723,
	724, 725, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1250, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321,
	1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341,
	1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351,
	1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361,
	1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
	1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
	1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391,
	1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411,
	191, 324, 325, 412, 412, 213, 0, 1292, 217, 0,
	0, 0, 306, 209, 210, 211, 212, 0, 499, 0,
	206, 0, 188, 0, 0, 90, 555, 92, 557, 0,
	96, 98, 99, -2, 103, 104, 105, 106, 107, 108,
	109, 0, 111, 1300, 113, 1360, 116, 117, 118, 0,
	127, 128, -2, -2, 552, 0, 0, 1348, 72, -2,
	0, 0, 0, 428, 516, 586, 586, 0, 586, 599,
	563, 564, 565, 584, 585, 340, 336, 337, 338, 339,
	400, 0, 402, 405, 290, 290, 0, 0, 281, 282,
	0, 299, 290, 290, 299, 0, 1088, 0, 0, 273,
	274, 275, 279, 280, 300, 244, 342, 183, 184, 173,
	0, 178, 0, 172, 1350, 0, 143, 0, 148, 0,
	1299, 1364, 1314, 0, 0, 1332, 0, 167, -2, 407,
	0, 413, 0, 412, 0, 244, 244, 244, 244, 244,
	0, 0, 0, 437, 438, 433, 434, 435, 439, 440,
	3, 0, 0, 374, 0, 407, -2, 0, 214, 726,
	0, 0, 218, 219, 0, 0, 233, 0, 236, 222,
	223, 224, 0, 0, 208, 0, 0, 86, 0, 0,
	0, 0, 0, 559, 97, 126, 100, 101, 0, 121,
	123, 125, 124, 110, 122, 112, 114, 115, 120, 86,
	0, 0, 0, 73, 395, 0, 376, 0, 425, 427,
	0, 429, 430, 0, 586, 517, 0, 0, 0, 0,
	0, 342, 341, 0, 401, 0, 0, 445, 0, 445,
	0, 295, 296, 290, 290, 283, 292, 0, 297, 298,
	0, 445, 445, 0, 0, 586, 1089, 1090, 0, 0,
	0, 343, 0, 0, 176, 0, 181, 133, 138, 136,
	137, 139, 0, 0, 0, 0, 0, 165, 166, 0,
	0, 0, 0, 0, 156, 159, 681, 682, 553, 160,
	161, 0, 376, 408, 424, 426, 421, 422, 0, 0,
	0, 0, 0, 321, 453, 447, 449, 494, 36, 0,
	978, 723, 983, -2, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, -2, 1431, -2, -2, 1434, 1435, 1436, 1438, -2,
	-2, -2, -2, -2, -2, 1445, -2, -2, -2, 1449,
	1450, -2, -2, 1453, 1454, 1455, 1456, 1457, -2, -2,
	-2, -2, -2, -2, -2, -2, 994, 794, 795, 796,
	797, 0, 0, 0, 0, 0, 804, 805, 0, 817,
	0, 811, 812, 813, 814, 48, 49, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 941, 781, 0,
	0, 0, 926, 0, 916, 0, 954, 0, 0, 0,
	0, 0, 50, 51, 932, 934, 935, 937, 938, 939,
	940, 943, 944, 945, 948, 949, 950, 951, 952, 953,
	956, 958, 928, 929, 930, 931, 920, 921, 922, 923,
	924, 925, 453, 344, 362, 346, 0, 351, 0, 688,
	376, 398, 376, 0, 215, 0, 220, 0, 0, 235,
	237, 238, 239, 225, 226, 307, 204, 205, 197, 198,
	199, 200, 201, 202, 203, 207, 46, 0, 0, 87,
	88, 89, 91, 102, 0, 0, 80, 540, 546, 543,
	556, 0, 94, 558, 119, 0, 75, 0, 25, 0,
	396, 409, 36, 414, 415, 418, 0, 0, 527, 0,
	554, 578, 504, 505, 506, -2, 0, 403, 0, 0,
	481, 270, 0, 291, 271, 445, 445, 445, 290, 0,
	292, 0, 292, 286, 287, 0, 301, 303, 0, 527,
	1391, 245, 458, 0, 459, 460, 456, 483, 486, 489,
	0, 185, 186, 0, 0, 180, 0, 0, 140, 141,
	142, 149, 144, 146, 0, 0, 150, 162, 163, 164,
	368, 369, 0, 0, 0, 154, 155, 0, 168, 394,
	316, 317, 0, 319, 685, 320, 500, 501, 445, 0,
	454, 0, 450, 0, 0, 0, 0, 495, 0, 497,
	0, 973, 0, 0, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 965, 961, 961, 961, 0, 961, 0, 0, 901,
	0, 0, 961, 961, 961, 961, 961, 902, 0, 961,
	961, 961, 961, 915, 909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 967, 0, 800, 801, 802, 803, 806,
	0, 818, 0, 0, 965, 965, 965, 904, 0, 0,
	906, 917, 0, 910, 965, 0, 965, 914, 961, 445,
	345, 359, 0, 363, 0, 0, 355, 357, 350, 352,
	0, 0, 372, 397, 399, 727, 0, 1095, -2, 1097,
	-2, -2, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1248, 1249, 0, 221, 234, 0, 0, 0, 0,
	81, 85, 0, 542, 0, 0, 545, 93, 0, 0,
	0, 69, 26, 0, 378, 0, 0, 0, 0, 417,
	419, 420, 405, 0, 0, 519, 528, 0, 587, 0,
	0, 583, -2, 590, 0, 596, 0, 0, 329, 333,
	23, 406, 0, 446, 272, 276, 277, 445, 293, 290,
	294, 290, 292, 0, 302, 305, 519, 0, 0, 0,
	0, 0, 0, 474, 0, 0, 473, 0, 0, 0,
	0, 0, 0, 487, 488, 490, 0, 492, 493, 502,
	503, 0, 412, 187, 175, 177, 0, 135, 0, 0,
	0, 151, 152, 153, 157, 158, 0, 0, 443, 448,
	455, 458, 969, 970, 971, 972, 496, 498, 37, 451,
	974, 0, 976, 979, 984, 985, 981, 0, 999, -2,
	-2, 0, 966, 967, 0, 962, 963, 0, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 0, 0, 0, 0,
	0, 0, 0, 867, 868, 869, 0, 0, 0, 0,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 986, 997, 998, 0, 0, 0, 0, 0,
	995, 990, 0, 798, 0, 815, 819, 0, 0, 960,
	0, 967, 0, 0, 927, 905, 0, 0, 0, 0,
	0, 443, 362, 364, 0, 0, 362, 0, 0, 0,
	371, 0, 0, 0, 308, 47, 240, 0, 0, 0,
	541, 0, 0, 544, 95, 0, 77, 0, 70, 71,
	0, 382, 0, 410, 411, 37, 416, 0, 0, 689,
	518, 0, 529, 530, 531, 532, 533, 0, 0, 0,
	0, 0, 579, 580, 581, 582, 591, 1091, 1091, 1091,
	370, 0, -2, 0, 0, 331, 0, 0, 482, 284,
	445, 445, 290, 304, 246, 0, 445, 194, 0, 477,
	471, 0, 464, 475, 476, 467, 0, 469, 0, 465,
	466, 445, 457, 405, 491, 485, 179, 134, 0, 258,
	145, 318, 686, 441, 0, 0, 975, 977, 980, 982,
	855, 0, 0, 0, 0, 0, 0, 844, 838, 839,
	919, 0, 0, 0, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 987, 995, 991, 0,
	988, 0, 0, 968, 0, 820, 0, 0, 0, 0,
	856, 0, 860, 903, 907, 0, 911, 0, 913, 0,
	441, 360, 0, 365, 366, 362, 349, 356, 348, 358,
	353, 354, 373, 728, 1096, 1093, 1094, 216, 79, 82,
	83, 84, 547, 0, 548, 527, 76, 0, 0, 0,
	384, 58, 0, 0, 0, 0, 0, 0, 690, 691,
	693, 694, 0, 0, 696, 750, 0, 705, 586, 705,
	0, 0, 707, 708, 520, 521, 0, 0, 0, 0,
	0, 535, 536, 537, 538, 539, 0, 0, 1092, 0,
	0, 489, 0, 0, 445, 330, 333, 334, 404, 288,
	285, 445, 242, 247, 248, 0, 252, 0, 0, 412,
	0, 0, 461, 478, 0, 0, 462, 0, 463, 468,
	470, 193, 484, 147, 431, 0, 0, 38, 452, 968,
	840, 841, 842, 0, 822, 834, 834, 1083, 1024, 1025,
	1026, 1070, 1028, 1074, 1074, 1070, 1070, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 0, 0, 1047, 1070,
	1072, 1072, 1070, 1067, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1077, 1077,
	1080, 1077, 843, 0, 862, 845, 846, 849, 847, 0,
	0, 0, 861, 850, 851, 837, 964, 989, 0, 996,
	992, 799, 807, 816, 0, 0, 825, 1070, 1074, 828,
	1070, 1072, 1070, 834, 834, 0, 0, 0, 0, 848,
	432, 361, 0, 347, 551, 0, 0, 77, 0, 0,
	0, 386, 0, 383, 0, 0, 0, 514, 405, -2,
	0, -2, 695, 751, 717, 717, 706, 717, 717, 586,
	0, 522, 523, 524, 525, 526, 534, 0, 592, 593,
	683, 684, 594, 445, 445, -2, 327, 332, 0, 289,
	249, 250, 251, 0, 254, 255, 257, 0, 407, 195,
	196, 479, 0, 472, 442, 444, 808, 823, 835, 836,
	824, 1086, 1084, 1085, 1027, 1071, 0, 1052, 0, 1053,
	1054, 1055, 0, 0, 1048, 1049, 0, 1050, 1051, 1043,
	0, 1044, 1045, 0, 1046, 859, 864, 865, 0, 993,
	821, 809, 826, 827, 829, 830, 831, 832, 833, 810,
	857, 0, 908, 912, 367, 549, 550, 74, 78, 60,
	0, 388, 0, 385, 0, 379, 381, 68, 0, 600,
	-2, 637, 1091, 1091, 0, 1091, 1091, 1091, 1091, 0,
	0, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
	1091, 1091, 1091, 1091, 1091, 0, 692, 719, -2, 731,
	733, 0, 0, 736, 737, 0, 0, 0, 0, 773,
	743, 0, 0, 1011, 1012, 0, 749, 0, 709, 718,
	0, 718, 0, 0, 717, 0, 0, 574, 1070, 0,
	412, 328, 0, 256, 243, 192, 0, 1023, 1087, 0,
	0, 0, 1068, 0, 0, 0, 0, 866, 0, 54,
	0, 0, 377, 0, 387, 59, 0, 0, 597, 0,
	595, 639, 0, 0, 1091, 1091, 0, 0, 0, 0,
	1091, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 732, 734, 735,
	738, 739, 740, 778, 779, 780, 741, 775, 776, 777,
	742, 0, 0, 1009, 1010, 771, 0, 0, 0, 0,
	0, 0, 0, 703, 567, 0, 418, 0, 407, 253,
	480, 1076, 1075, 1065, 0, 1066, 1073, 1078, 0, 1081,
	0, 858, 52, 56, 61, 62, 0, 0, 0, 0,
	0, 0, 0, 515, 633, 638, 640, 641, 0, 0,
	644, 645, 646, 647, 0, 0, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 675, 676, 677, 678,
	679, 680, 660, 661, 662, 663, 664, 665, 672, 0,
	0, 669, 0, 0, 0, 766, 0, 0, 710, 712,
	713, 714, 715, 716, 711, 0, 0, 0, 0, 702,
	704, 746, 0, 566, 575, 576, 418, 326, 1069, 0,
	0, 39, 0, 58, 0, 63, 0, 0, 0, 0,
	0, 0, 390, 380, 622, 0, 0, 628, 0, 634,
	642, 643, 648, 649, 666, 0, 0, 668, 0, 0,
	774, 0, 753, 767, 0, 0, 567, 567, 567, 567,
	0, 747, 568, 1091, 0, 0, 572, 573, 577, 1079,
	1082, 30, 0, 0, 55, 0, 64, 0, 66, 67,
	0, 389, 0, 602, 0, 0, 0, 0, 0, 631,
	0, 673, 674, 667, 670, 671, 744, 752, 754, 755,
	756, 0, 768, 769, 770, 772, 697, 698, 699, 700,
	0, 0, 570, 0, 24, 0, 40, 0, 42, 44,
	45, 720, 53, 57, 65, 0, 391, 604, 0, 623,
	0, 0, 0, 0, 0, 0, 0, 745, 757, 0,
	758, 0, 0, 0, 701, 569, 571, 31, 32, 0,
	41, 0, 0, 0, 601, 0, 633, 624, 0, 626,
	0, 0, 0, 0, 759, 761, 762, 0, 0, 760,
	0, 0, 43, 721, 0, 0, 606, 0, 620, 625,
	627, 0, 632, 630, 763, 765, 764, 33, 34, 35,
	0, 0, 605, 0, 618, 603, 0, 629, 722, 0,
	607, -2, 0, 621, 0, 608, -2, 0, 616, 0,
	28, 609, 617, 0, 612, 0, 0, 0, 0, 611,
	0, -2, 0, 0, 0, 613, -2, 0, 27, 0,
	619, 29,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 84, 3, 3, 3, 112, 104, 3,
	55, 57, 109, 107, 56, 108, 121, 110, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 464,
	92, 91, 93, 3, 467, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 465, 3, 466, 114, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 115,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 85,
	86, 87, 88, 89, 90, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 105, 106, 111, 113, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:518
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:524
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:550
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:554
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:560
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				LoadParam:         yyDollar[5].loadParamUnion(),
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Loadparameter
//line mysql_sql.y:575
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Loadparameter
//line mysql_sql.y:579
		{
			yyLOCAL = &tree.Loadparameter{
				File:     yyDollar[1].str,
				LoadType: tree.LOCAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-19 : yypt+1]
		var yyLOCAL *tree.Loadparameter
//line mysql_sql.y:587
		{
			yyLOCAL = &tree.Loadparameter{
				File:     yyDollar[14].str,
				LoadType: tree.S3,
				Config: fileservice.S3Config{
					Endpoint:  yyDollar[3].str,
					APIKey:    yyDollar[6].str,
					APISecret: yyDollar[8].str,
					Bucket:    yyDollar[12].str,
					Region:    yyDollar[16].str,
				},
				CompressType: yyDollar[17].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:604
		{
			yyVAL.str = "NONE"
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:608
		{
			yyVAL.str = yyDollar[3].str
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:613
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:617
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:623
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:627
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:633
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:640
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:649
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:653
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:657
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:662
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:666
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:670
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:676
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:685
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:696
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:700
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:706
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:710
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:716
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:720
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:726
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:750
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:769
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:773
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:778
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:782
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:790
		{
			yyVAL.str = ""
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:794
		{
			yyVAL.str = yyDollar[3].str
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:799
		{
			yyVAL.str = "\n"
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:803
		{
			yyVAL.str = yyDollar[3].str
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:808
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:812
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:836
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:840
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:846
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:852
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:870
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:887
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:910
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:914
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:918
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:923
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:927
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:933
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:943
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:951
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:961
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:965
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:975
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:985
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:995
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1001
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1007
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1014
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1022
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1030
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1034
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1038
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1042
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1048
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1052
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1058
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1065
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1074
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1078
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1084
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1088
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1092
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1096
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1100
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1104
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1108
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1112
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1116
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1120
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1124
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1128
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1132
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1136
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1140
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1144
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1168
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1172
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1176
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1180
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1184
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1188
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1192
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1196
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1200
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1204
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1208
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1212
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1224
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1230
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1238
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1246
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1250
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1254
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1260
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1264
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1268
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1274
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1280
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1284
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1291
		{
			yyVAL.str = yyDollar[3].str
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1297
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1301
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1307
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1315
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1324
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1332
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1340
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1363
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1386
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1393
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1400
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1408
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1415
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1422
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1431
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1435
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1439
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1445
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1449
		{
			yyVAL.str = yyDollar[1].str
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1456
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1467
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1473
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1478
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1482
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1486
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1490
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1494
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1498
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1502
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1506
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1512
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1516
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1520
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1524
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1529
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1534
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1540
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1544
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1551
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1558
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1569
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: yyDollar[4].tableExprsUnion(),
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1580
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1584
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1590
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1602
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1608
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1612
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1618
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1622
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1628
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1637
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1643
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1648
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1653
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1657
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1661
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1665
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1673
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1681
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1691
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1723
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1727
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1733
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1739
		{
			yyVAL.str = yyDollar[1].str
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1744
		{
			yyVAL.str = "true"
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1745
		{
			yyVAL.str = "false"
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1746
		{
			yyVAL.str = yyDollar[1].str
		}
	case 240:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1751
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1761
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1772
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1785
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1789
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1794
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1798
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1804
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1808
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1814
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1818
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1822
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1826
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1830
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1834
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1840
		{
			yyVAL.item = nil
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1845
		{
			yyVAL.item = nil
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1867
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1871
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1877
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1891
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1901
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1910
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1914
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1918
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1924
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1930
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1936
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1942
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1952
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1964
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1968
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1974
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1986
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1999
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:2003
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2008
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2012
		{
			yyVAL.str = yyDollar[2].str
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2018
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2031
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2035
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2041
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2045
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2051
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2055
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2064
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2068
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2072
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2089
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2098
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2107
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2117
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2123
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2129
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2137
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2142
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2149
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2165
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: yyDollar[7].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2178
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: yyDollar[8].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2189
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2193
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2199
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2204
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2211
		{
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2213
		{
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2216
		{
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2225
		{
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2229
		{
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2234
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2243
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2250
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2256
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2264
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2271
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2278
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2297
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2301
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2305
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2311
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2320
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2324
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2330
		{
			yyVAL.str = yyDollar[1].str
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2334
		{
			yyVAL.str = yyDollar[3].str
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2340
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2344
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2350
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2355
		{
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2359
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2366
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2370
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2377
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2382
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2386
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2392
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2396
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2402
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2406
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2411
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2415
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2428
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2435
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2442
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2460
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2479
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2485
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2492
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2496
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2509
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2513
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2518
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2522
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2529
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2534
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2541
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2547
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2551
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2555
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2559
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2563
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2567
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2573
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2580
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2589
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2593
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2599
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2607
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2611
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2616
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2620
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2630
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2634
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2639
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2643
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2649
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2655
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2659
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2665
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2670
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2674
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2678
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2685
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2689
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2695
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2699
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2709
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2719
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2729
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2741
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2749
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2757
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2767
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2778
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2796
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2800
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2804
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2813
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2817
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2822
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2826
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2831
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2835
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2841
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2845
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2851
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2855
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2859
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2863
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2868
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2876
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2882
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2890
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2894
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2907
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2916
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2926
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2935
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2945
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2949
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2959
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2963
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2967
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2971
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2977
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2981
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2987
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2993
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2997
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3001
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3007
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3011
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3017
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:3021
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3027
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3031
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3037
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:3041
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:3054
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3059
		{
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3060
		{
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:3064
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3076
		{
			yyVAL.str = ""
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3080
		{
			yyVAL.str = yyDollar[1].str
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3084
		{
			yyVAL.str = yyDollar[2].str
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3093
		{
			yyVAL.str = ""
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3097
		{
			yyVAL.str = yyDollar[1].str
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3101
		{
			yyVAL.str = yyDollar[2].str
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3105
		{
			yyVAL.str = yyDollar[1].str
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3109
		{
			yyVAL.str = yyDollar[2].str
		}
	case 514:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3142
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3152
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3163
		{
		}
	case 518:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3168
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3182
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3188
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3192
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3198
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3202
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3206
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3210
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3216
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3223
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3228
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3233
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3238
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3244
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3248
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3252
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3258
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3262
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3266
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3270
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3276
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3280
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3286
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3299
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3303
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3307
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3312
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3316
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3323
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3329
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3337
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3344
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3356
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3365
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3369
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3375
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3379
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3383
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3392
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3396
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3400
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3404
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3410
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3429
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3433
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3455
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3459
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3463
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3467
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3471
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3477
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3481
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3487
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3492
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3497
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3501
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3505
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3509
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3513
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3519
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3533
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3537
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3542
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3546
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3552
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3556
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3562
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3566
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3570
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3575
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3579
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3585
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3597
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3601
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3606
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3610
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3620
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3624
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3633
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3637
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3643
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3647
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3653
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3662
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3672
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3676
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3682
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3686
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3692
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3699
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3708
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3712
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3717
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3721
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3726
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3730
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3740
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3744
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3755
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3763
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3771
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3779
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3790
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3800
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3810
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3814
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3819
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3823
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3828
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3832
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3838
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3842
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3846
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3852
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3856
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3860
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3864
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3868
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3872
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3876
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3880
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3884
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3888
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3892
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3896
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3900
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3904
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3908
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3912
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3916
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3920
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3924
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3928
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3932
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3936
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3940
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3944
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3948
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3952
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3956
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3960
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3964
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3971
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3975
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3981
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3986
		{
			yyVAL.str = ""
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3990
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3994
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4000
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4004
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4008
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4012
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4016
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:4020
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4034
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:4038
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4047
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4052
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4058
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4065
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4069
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4075
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4079
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4085
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4095
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4101
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4110
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4119
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4142
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4151
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4161
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4169
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4175
		{
			yyVAL.str = ""
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4179
		{
			yyVAL.str = yyDollar[1].str
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4189
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4195
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4201
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4215
		{
			yyVAL.str = ""
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4222
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4228
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4232
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4236
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4247
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4251
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4255
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4260
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4264
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4270
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4274
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4280
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4284
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4288
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4292
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4296
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4300
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4304
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4308
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4312
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4316
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4320
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4324
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4328
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4338
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4342
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4347
		{
			yyVAL.str = ""
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4351
		{
			yyVAL.str = yyDollar[1].str
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4357
		{
			yyVAL.str = ""
		}
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4361
		{
			yyVAL.str = yyDollar[2].str
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4367
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4378
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4388
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4395
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4402
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4409
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4418
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4424
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4430
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4434
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4438
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4442
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4446
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4451
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4458
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4462
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4466
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4471
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4475
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4480
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4484
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4500
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4506
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4510
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4514
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4518
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4522
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4526
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4530
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4534
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4538
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4542
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4546
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4550
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4554
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4560
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4564
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4568
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4572
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4576
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4580
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4584
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4588
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4592
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4596
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4600
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4604
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4609
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4617
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4621
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4625
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4634
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4638
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4642
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4646
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4651
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4655
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4660
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4664
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4670
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4674
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4680
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4690
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4707
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4724
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4737
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4750
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4762
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4776
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4791
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4806
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4823
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4838
		{
		}
	case 837:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4844
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4853
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4861
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4869
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4878
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4887
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4896
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4905
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4914
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4923
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4932
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4941
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4950
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4959
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4968
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4984
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4992
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5000
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5008
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5016
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5025
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5033
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5042
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5051
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5059
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5067
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5076
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5096
		{
			yyVAL.str = yyDollar[1].str
		}
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5132
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5144
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5158
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5166
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5173
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5180
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5192
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5200
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5211
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5220
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5229
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5237
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5247
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5255
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5263
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5273
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5277
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5283
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5287
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5306
		{
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5308
		{
		}
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5348
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5358
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5362
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5366
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5372
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5377
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5381
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5387
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5391
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5398
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5402
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5406
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5414
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5418
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5422
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5426
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5430
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5435
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5440
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5446
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5450
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5454
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5458
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5465
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5469
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5475
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5479
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5483
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5487
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5491
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5495
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5499
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5503
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5509
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5513
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5519
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5523
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5530
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5534
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5538
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5544
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5548
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5552
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5556
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5560
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5564
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5568
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5574
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5578
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5582
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5586
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5592
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5596
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5609
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5614
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5618
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5622
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5626
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5640
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5644
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5658
		{
			yyLOCAL = tree.NewParamExpr(yyp)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5664
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5675
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5680
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5686
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5698
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5710
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5722
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5735
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5748
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5761
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5774
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5787
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5800
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5813
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5826
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5839
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5852
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5867
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5890
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5927
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5975
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5992
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6004
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6019
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6039
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6059
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6075
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6088
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6101
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6114
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6127
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6139
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6151
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6163
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6175
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6187
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6199
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6211
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6223
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6235
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6248
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6263
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6286
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6291
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6297
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6304
		{
			yyLOCAL = 6
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6308
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6313
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6317
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6323
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6329
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6336
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6343
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6352
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6359
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6366
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6375
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6379
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6383
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6389
		{
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6391
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6401
		{
			yyVAL.str = ""
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6405
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
